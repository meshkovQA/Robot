#!/usr/bin/env python3
"""
Robot Controller –¥–ª—è Raspberry Pi
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Arduino —á–µ—Ä–µ–∑ I2C —Å –¥–≤—É–º—è –¥–∞—Ç—á–∏–∫–∞–º–∏ –∏ —Ç–∞–Ω–∫–æ–≤—ã–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏
"""

import time
import struct
import smbus2
from dataclasses import dataclass
from typing import Optional

# I2C –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
I2C_BUS = 1  # Raspberry Pi 4 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç bus 1
ARDUINO_ADDRESS = 0x08  # –ê–¥—Ä–µ—Å Arduino (8 –≤ hex)


@dataclass
class RobotCommand:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Arduino (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç C++ struct)"""
    speed: int = 0          # –°–∫–æ—Ä–æ—Å—Ç—å -255 –¥–æ 255
    direction: int = 0      # 0=—Å—Ç–æ–ø, 1=–≤–ø–µ—Ä–µ–¥, 2=–Ω–∞–∑–∞–¥, 3=—Ç–∞–Ω–∫ –≤–ª–µ–≤–æ, 4=—Ç–∞–Ω–∫ –≤–ø—Ä–∞–≤–æ
    steering: int = 90      # –£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å–µ—Ä–≤—ã 0-180
    front_wheels: bool = True   # –í–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–¥–Ω–∏–µ –∫–æ–ª–µ—Å–∞
    rear_wheels: bool = True    # –í–∫–ª—é—á–∏—Ç—å –∑–∞–¥–Ω–∏–µ –∫–æ–ª–µ—Å–∞


class RobotController:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ä–æ–±–æ—Ç–∞"""
        try:
            self.bus = smbus2.SMBus(I2C_BUS)
            print("‚úÖ I2C –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            time.sleep(0.5)  # –î–∞—Ç—å –≤—Ä–µ–º—è Arduino –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è
            self.test_connection()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ I2C –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise

    def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å Arduino"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
            front_dist, rear_dist = self.read_sensors()
            if front_dist != 999 or rear_dist != 999:
                print(
                    f"‚úÖ Arduino –æ—Ç–≤–µ—á–∞–µ—Ç. –î–∞—Ç—á–∏–∫–∏: –ø–µ—Ä–µ–¥–Ω–∏–π={front_dist}—Å–º, –∑–∞–¥–Ω–∏–π={rear_dist}—Å–º")
                return True
            else:
                print("‚ö†Ô∏è Arduino –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –¥–∞—Ç—á–∏–∫–∏ –Ω–µ —á–∏—Ç–∞—é—Ç—Å—è")
                return False
        except Exception as e:
            print(f"‚ùå Arduino –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
            return False

    def send_command(self, command: RobotCommand) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ Arduino —á–µ—Ä–µ–∑ I2C"""
        try:
            print(f"üîß –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {command}")

            # –£–ø–∞–∫–æ–≤–∫–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–∞–π—Ç—ã
            data = []

            # speed (2 –±–∞–π—Ç–∞, little-endian)
            speed_value = command.speed
            data.append(speed_value & 0xFF)  # –ú–ª–∞–¥—à–∏–π –±–∞–π—Ç
            data.append((speed_value >> 8) & 0xFF)  # –°—Ç–∞—Ä—à–∏–π –±–∞–π—Ç

            # direction (2 –±–∞–π—Ç–∞)
            data.append(command.direction & 0xFF)
            data.append((command.direction >> 8) & 0xFF)

            # steering (2 –±–∞–π—Ç–∞)
            data.append(command.steering & 0xFF)
            data.append((command.steering >> 8) & 0xFF)

            # front_wheels (1 –±–∞–π—Ç)
            data.append(1 if command.front_wheels else 0)

            # rear_wheels (1 –±–∞–π—Ç)
            data.append(1 if command.rear_wheels else 0)

            print(f"üîß –£–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data} ({len(data)} –±–∞–π—Ç)")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ I2C –¥–∞–Ω–Ω—ã—Ö
            if len(data) > 1:
                self.bus.write_i2c_block_data(
                    ARDUINO_ADDRESS, data[0], data[1:])
            else:
                self.bus.write_byte(ARDUINO_ADDRESS, data[0])

            print(f"üì§ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return False

    def read_sensors(self) -> tuple:
        """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±–æ–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤ —Å Arduino"""
        try:
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º
            time.sleep(0.05)

            # –ó–∞–ø—Ä–æ—Å 4 –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö (2 –¥–∞—Ç—á–∏–∫–∞ –ø–æ 2 –±–∞–π—Ç–∞ –∫–∞–∂–¥—ã–π)
            data = self.bus.read_i2c_block_data(ARDUINO_ADDRESS, 0, 4)
            print(f"üîç I2C raw data: {data}")  # –û—Ç–ª–∞–¥–∫–∞

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            if len(data) != 4:
                print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: {len(data)}")
                return 999, 999

            # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (little-endian)
            front_distance = (data[1] << 8) | data[0]  # –ü–µ—Ä–µ–¥–Ω–∏–π –¥–∞—Ç—á–∏–∫
            rear_distance = (data[3] << 8) | data[2]   # –ó–∞–¥–Ω–∏–π –¥–∞—Ç—á–∏–∫

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π
            if front_distance > 500 or rear_distance > 500:
                print(
                    f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: front={front_distance}, rear={rear_distance}")
                return 999, 999

            print(
                f"üìä –î–∞—Ç—á–∏–∫–∏: –ø–µ—Ä–µ–¥–Ω–∏–π={front_distance}—Å–º, –∑–∞–¥–Ω–∏–π={rear_distance}—Å–º")
            return front_distance, rear_distance

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤: {e}")
            return 999, 999

    def move_forward(self, speed: int = 200) -> bool:
        """–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥"""
        command = RobotCommand(speed=speed, direction=1, steering=90)
        return self.send_command(command)

    def move_backward(self, speed: int = 150) -> bool:
        """–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥"""
        command = RobotCommand(speed=speed, direction=2, steering=90)
        return self.send_command(command)

    def tank_turn_left(self, speed: int = 150) -> bool:
        """–¢–∞–Ω–∫–æ–≤—ã–π –ø–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ"""
        command = RobotCommand(speed=speed, direction=3, steering=90)
        return self.send_command(command)

    def tank_turn_right(self, speed: int = 150) -> bool:
        """–¢–∞–Ω–∫–æ–≤—ã–π –ø–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ"""
        command = RobotCommand(speed=speed, direction=4, steering=90)
        return self.send_command(command)

    def turn_left(self, speed: int = 120, steering_angle: int = 10) -> bool:
        """–û–±—ã—á–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ (—Ä—É–ª–µ–º)"""
        command = RobotCommand(speed=speed, direction=1,
                               steering=steering_angle)
        return self.send_command(command)

    def turn_right(self, speed: int = 120, steering_angle: int = 170) -> bool:
        """–û–±—ã—á–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ (—Ä—É–ª–µ–º)"""
        command = RobotCommand(speed=speed, direction=1,
                               steering=steering_angle)
        return self.send_command(command)

    def stop(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–±–æ—Ç–∞"""
        command = RobotCommand(speed=0, direction=0, steering=90)
        return self.send_command(command)

    def set_steering(self, angle: int) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ –±–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è"""
        command = RobotCommand(speed=0, direction=0, steering=angle)
        return self.send_command(command)

    def emergency_stop(self) -> bool:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!")
        return self.stop()

    def get_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–æ–±–æ—Ç–∞"""
        front_dist, rear_dist = self.read_sensors()

        return {
            "front_distance": front_dist,
            "rear_distance": rear_dist,
            "obstacles": {
                "front": front_dist < 20 and front_dist != 999,
                "rear": rear_dist < 20 and rear_dist != 999
            },
            "sensor_error": front_dist == 999 or rear_dist == 999,
            "timestamp": time.time()
        }


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Robot Controller...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        robot = RobotController()

        print("\nüéÆ –î–µ–º–æ-–ø—Ä–æ–≥—Ä–∞–º–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("–ö–æ–º–∞–Ω–¥—ã: w=–≤–ø–µ—Ä–µ–¥, s=–Ω–∞–∑–∞–¥, a=—Ç–∞–Ω–∫ –≤–ª–µ–≤–æ, d=—Ç–∞–Ω–∫ –≤–ø—Ä–∞–≤–æ")
        print("         q=–ø–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ, e=–ø–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ, x=—Å—Ç–æ–ø, z=–≤—ã—Ö–æ–¥")

        while True:
            # –ß—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            status = robot.get_status()

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            if status['sensor_error']:
                print("‚ö†Ô∏è –û–®–ò–ë–ö–ê –î–ê–¢–ß–ò–ö–û–í!")
            else:
                print(
                    f"üìä –î–∞—Ç—á–∏–∫–∏ OK: –ü–µ—Ä–µ–¥–Ω–∏–π={status['front_distance']}—Å–º, –ó–∞–¥–Ω–∏–π={status['rear_distance']}—Å–º")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
                if status['obstacles']['front']:
                    print("‚ö†Ô∏è  –ü–†–ï–ü–Ø–¢–°–¢–í–ò–ï –°–ü–ï–†–ï–î–ò!")
                if status['obstacles']['rear']:
                    print("‚ö†Ô∏è  –ü–†–ï–ü–Ø–¢–°–¢–í–ò–ï –°–ó–ê–î–ò!")

            # –í–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
            command = input("\n–ö–æ–º–∞–Ω–¥–∞ (w/s/a/d/q/e/x/z): ").lower().strip()

            if command == 'w':
                print("‚¨ÜÔ∏è  –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥")
                if status['obstacles']['front'] and not status['sensor_error']:
                    print("üö´ –î–≤–∏–∂–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ —Å–ø–µ—Ä–µ–¥–∏!")
                else:
                    robot.move_forward(200)

            elif command == 's':
                print("‚¨áÔ∏è  –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥")
                if status['obstacles']['rear'] and not status['sensor_error']:
                    print("üö´ –î–≤–∏–∂–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ —Å–∑–∞–¥–∏!")
                else:
                    robot.move_backward(150)

            elif command == 'a':
                print("üîÑ –¢–∞–Ω–∫–æ–≤—ã–π –ø–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ")
                robot.tank_turn_left()

            elif command == 'd':
                print("üîÑ –¢–∞–Ω–∫–æ–≤—ã–π –ø–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ")
                robot.tank_turn_right()

            elif command == 'q':
                print("‚¨ÖÔ∏è  –ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ (—Ä—É–ª–µ–º)")
                robot.turn_left()

            elif command == 'e':
                print("‚û°Ô∏è  –ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ (—Ä—É–ª–µ–º)")
                robot.turn_right()

            elif command == 'x':
                print("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞")
                robot.stop()

            elif command == 'z':
                print("üëã –í—ã—Ö–æ–¥...")
                robot.stop()
                break

            elif command == 'test':
                # –°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                print("üîß –¢–µ—Å—Ç I2C —Å–≤—è–∑–∏...")
                robot.test_connection()

            else:
                print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π: w/s/a/d/q/e/x/z")

            time.sleep(0.2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏

    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        robot.emergency_stop()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        try:
            robot.emergency_stop()
        except:
            pass


if __name__ == "__main__":
    main()
