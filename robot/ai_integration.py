# robot/ai_integration.py
"""
AI Integration - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è AI —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–æ–±–æ—Ç–∞
"""

from __future__ import annotations
import logging
from typing import Optional
import time

from robot.ai_vision.ai_vision import AIVisionProcessor
from robot.controller import RobotController
from robot.devices.camera import USBCamera

logger = logging.getLogger(__name__)


class AIRobotController:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–æ–±–æ—Ç–∞ —Å AI –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""

    def __init__(self, robot: RobotController, camera: Optional[USBCamera] = None):
        self.robot = robot
        self.camera = camera
        self.ai_vision: Optional[AIVisionProcessor] = None

        # AI —Ä–µ–∂–∏–º—ã
        self.follow_person_mode = False
        self.auto_avoid_people = True
        self.smart_navigation = False

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        self.person_follow_distance = 100  # –ø–∏–∫—Å–µ–ª–µ–π –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫–∞–¥—Ä–∞
        self.person_too_close_threshold = 200  # –ø–ª–æ—â–∞–¥—å bbox

        self._init_ai_vision()
        self._setup_ai_callbacks()

    def _init_ai_vision(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∑—Ä–µ–Ω–∏—è"""
        if not self.camera:
            logger.warning("–ö–∞–º–µ—Ä–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ - AI —Ñ—É–Ω–∫—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")
            return

        try:
            self.ai_vision = AIVisionProcessor(self.camera)
            logger.info("‚úÖ AI Vision –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI Vision: {e}")

    def _setup_ai_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è AI —Å–æ–±—ã—Ç–∏–π"""
        if not self.ai_vision:
            return

        # –ö–æ–ª–±—ç–∫ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
        self.ai_vision.add_callback(
            'person_detected', self._on_person_detected)

        # –ö–æ–ª–±—ç–∫ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        self.ai_vision.add_callback(
            'motion_detected', self._on_motion_detected)

        # –ö–æ–ª–±—ç–∫ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ª–∏—Ü–∞
        self.ai_vision.add_callback('face_detected', self._on_face_detected)

    def start_ai(self) -> bool:
        """–ó–∞–ø—É—Å–∫ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.ai_vision:
            logger.warning("AI Vision –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False

        success = self.ai_vision.start_processing()
        if success:
            logger.info("üß† AI —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω—ã")
        return success

    def stop_ai(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if self.ai_vision:
            self.ai_vision.stop_processing()
            logger.info("üõë AI —Å–∏—Å—Ç–µ–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # ==================== AI –ö–û–õ–ë–≠–ö–ò ====================

    def _on_person_detected(self, people, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞"""
        try:
            if not people:
                return

            logger.debug(f"üë§ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª—é–¥–µ–π: {len(people)}")

            # –†–µ–∂–∏–º —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —á–µ–ª–æ–≤–µ–∫–æ–º
            if self.follow_person_mode:
                self._follow_person_logic(people)

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ª—é–¥–µ–π –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
            if self.auto_avoid_people and self.robot.is_moving:
                self._avoid_people_logic(people)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–ª–±—ç–∫–µ person_detected: {e}")

    def _on_motion_detected(self, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è"""
        logger.debug("üèÉ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –∫–∞–¥—Ä–µ")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ

    def _on_face_detected(self, faces, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–∏—Ü–∞"""
        logger.debug(f"üòä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª–∏—Ü: {len(faces)}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è

    # ==================== –£–ú–ù–´–ï –†–ï–ñ–ò–ú–´ –î–í–ò–ñ–ï–ù–ò–Ø ====================

    def _follow_person_logic(self, people):
        """–õ–æ–≥–∏–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —á–µ–ª–æ–≤–µ–∫–æ–º"""
        if not people:
            return

        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
        closest_person = max(people, key=lambda p: p.area)

        center_x = closest_person.center[0]
        frame_center = 320  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∫–∞–º–µ—Ä—É 640px —à–∏—Ä–∏–Ω—ã

        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
        deviation = center_x - frame_center

        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–æ–≤
        turn_threshold = 80

        # –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ - –æ—Ç–æ–¥–≤–∏–≥–∞–µ–º—Å—è
        if closest_person.area > self.person_too_close_threshold:
            logger.info("üë§ –ß–µ–ª–æ–≤–µ–∫ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ, –æ—Ç–æ–¥–≤–∏–≥–∞—é—Å—å")
            self.robot.move_backward(80)
            time.sleep(0.5)
            self.robot.stop()

        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫ —á–µ–ª–æ–≤–µ–∫—É
        elif abs(deviation) > turn_threshold:
            if deviation > 0:  # –ß–µ–ª–æ–≤–µ–∫ —Å–ø—Ä–∞–≤–∞
                logger.info("üë§ –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞—é –∫ —á–µ–ª–æ–≤–µ–∫—É (–≤–ø—Ä–∞–≤–æ)")
                self.robot.tank_turn_right(100)
            else:  # –ß–µ–ª–æ–≤–µ–∫ —Å–ª–µ–≤–∞
                logger.info("üë§ –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞—é –∫ —á–µ–ª–æ–≤–µ–∫—É (–≤–ª–µ–≤–æ)")
                self.robot.tank_turn_left(100)
            time.sleep(0.3)
            self.robot.stop()

        # –î–≤–∏–≥–∞–µ–º—Å—è –≤–ø–µ—Ä–µ–¥ –∫ —á–µ–ª–æ–≤–µ–∫—É
        elif closest_person.area < 150:  # –ß–µ–ª–æ–≤–µ–∫ –¥–∞–ª–µ–∫–æ
            logger.info("üë§ –ü—Ä–∏–±–ª–∏–∂–∞—é—Å—å –∫ —á–µ–ª–æ–≤–µ–∫—É")
            self.robot.move_forward(70)
            time.sleep(0.5)
            self.robot.stop()

    def _avoid_people_logic(self, people):
        """–õ–æ–≥–∏–∫–∞ –∏–∑–±–µ–∂–∞–Ω–∏—è –ª—é–¥–µ–π"""
        if not people:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª—é–¥–∏ –≤–ø–µ—Ä–µ–¥–∏ –ø–æ —Ö–æ–¥—É –¥–≤–∏–∂–µ–Ω–∏—è
        people_ahead = []
        frame_center = 320
        frame_width = 200  # –ó–æ–Ω–∞ –≤–ø–µ—Ä–µ–¥–∏

        for person in people:
            center_x = person.center[0]
            if abs(center_x - frame_center) < frame_width:
                people_ahead.append(person)

        if people_ahead:
            logger.warning("üë§ –ß–µ–ª–æ–≤–µ–∫ –≤–ø–µ—Ä–µ–¥–∏! –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
            self.robot.stop()

            # –ñ–¥–µ–º –ø–æ–∫–∞ —á–µ–ª–æ–≤–µ–∫ –Ω–µ —É–π–¥–µ—Ç
            time.sleep(2)

 # ==================== –ü–£–ë–õ–ò–ß–ù–´–ï AI –ú–ï–¢–û–î–´ ====================

    def enable_follow_person_mode(self, enable: bool = True):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —á–µ–ª–æ–≤–µ–∫–æ–º"""
        self.follow_person_mode = enable
        status = "–≤–∫–ª—é—á–µ–Ω" if enable else "–≤—ã–∫–ª—é—á–µ–Ω"
        logger.info(f"üë§ –†–µ–∂–∏–º —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —á–µ–ª–æ–≤–µ–∫–æ–º {status}")

    def enable_auto_avoid_people(self, enable: bool = True):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ª—é–¥–µ–π"""
        self.auto_avoid_people = enable
        status = "–≤–∫–ª—é—á–µ–Ω" if enable else "–≤—ã–∫–ª—é—á–µ–Ω"
        logger.info(f"üö∂ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ª—é–¥–µ–π {status}")

    def enable_smart_navigation(self, enable: bool = True):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–º–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é"""
        self.smart_navigation = enable
        status = "–≤–∫–ª—é—á–µ–Ω" if enable else "–≤—ã–∫–ª—é—á–µ–Ω"
        logger.info(f"üß† –£–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è {status}")

    def get_ai_status(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI —Å–∏—Å—Ç–µ–º"""
        status = {
            "ai_vision_active": self.ai_vision is not None and hasattr(self.ai_vision, '_processing_thread') and self.ai_vision._processing_thread and self.ai_vision._processing_thread.is_alive(),
            "follow_person_mode": self.follow_person_mode,
            "auto_avoid_people": self.auto_avoid_people,
            "smart_navigation": self.smart_navigation,
        }

        if self.ai_vision:
            vision_state = self.ai_vision.get_state()
            status.update({
                "detected_objects": len(vision_state.objects),
                "detected_faces": len(vision_state.faces),
                "motion_detected": vision_state.motion_detected,
                "scene_description": vision_state.scene_description,
                "processing_fps": vision_state.processing_fps,
                "person_in_front": self.ai_vision.is_person_in_front(),
                "object_counts": self.ai_vision.count_detected_objects()
            })

        return status

    def get_scene_description(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã"""
        if not self.ai_vision:
            return "AI –∑—Ä–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

        vision_state = self.ai_vision.get_state()
        return vision_state.scene_description

    def is_safe_to_move_forward(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä–µ–¥ —Å —É—á–µ—Ç–æ–º AI"""
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤
        robot_status = self.robot.get_status()
        if robot_status['obstacles']['front']:
            return False

        # AI –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª—é–¥–µ–π –≤–ø–µ—Ä–µ–¥–∏
        if self.auto_avoid_people and self.ai_vision:
            if self.ai_vision.is_person_in_front():
                logger.warning("üë§ –ß–µ–ª–æ–≤–µ–∫ –≤–ø–µ—Ä–µ–¥–∏ - –¥–≤–∏–∂–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ AI")
                return False

        return True

    def smart_move_forward(self, speed: int) -> bool:
        """–£–º–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ —Å AI –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        if not self.is_safe_to_move_forward():
            logger.warning("üö´ AI –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥")
            return False

        return self.robot.move_forward(speed)

    def smart_navigate_to_target(self, description: str):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ü–µ–ª–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
        logger.info(f"üéØ –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫: {description}")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏
        # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        pass

    # ==================== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú API ====================

    def get_extended_status(self) -> dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–æ–±–æ—Ç–∞ —Å AI –¥–∞–Ω–Ω—ã–º–∏"""
        base_status = self.robot.get_status()
        ai_status = self.get_ai_status()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        extended_status = {**base_status}
        extended_status['ai'] = ai_status

        return extended_status
