# robot/ai_agent/wake_word_service.py
import threading
import time
import logging
from pathlib import Path

from .audio_manager import AudioManager
from .speech_handler import SpeechHandler
from .simple_kws import SimpleKWS


class WakeWordService:
    """
    –°–µ—Ä–≤–∏—Å –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:
    - –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–∏—à–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞–Ω–∫–∏ (1—Å)
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö SimpleKWS (–±–µ–∑ STT)
    - –ü—Ä–∏ –¥–µ—Ç–µ–∫—Ç–µ ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–æ —Ç–∏—à–∏–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ AI
    """

    def __init__(self, config, ai_orchestrator=None):
        self.config = config
        self.ai_orchestrator = ai_orchestrator

        # ---- KWS ----
        kws_cfg = (self.config.get("wake_kws", {}) or {})
        self._kws = SimpleKWS(threshold=float(kws_cfg.get("threshold", 0.82)))
        samples_dir = kws_cfg.get("samples_dir", "data/wake_samples")
        loaded = self._kws.enroll_dir(samples_dir)
        logging.info(
            f"üóùÔ∏è SimpleKWS: –∑–∞–≥—Ä—É–∂–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {loaded} (threshold={self._kws.threshold})")

        # ---- –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ----
        self.activation_timeout = int(
            self.config.get("activation_timeout", 10))

        # ---- —Å–æ—Å—Ç–æ—è–Ω–∏–µ ----
        self.is_running = False
        self.is_listening = False
        self.service_thread = None

        # ---- –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ----
        self.audio_manager: AudioManager | None = None
        self.speech_handler: SpeechHandler | None = None

        # ---- —Ç–∞–π–º–∏–Ω–≥–∏/–∫—É–ª–¥–∞—É–Ω—ã ----
        wake_cfg = self.config.get("wake", {}) or {}
        self.cooldown_until = 0.0
        self._cd_after_tts = float(wake_cfg.get(
            "cooldown_after_tts_ms", 2000)) / 1000.0
        self._cd_after_activation = float(wake_cfg.get(
            "cooldown_after_activation_ms", 1000)) / 1000.0

        self._initialize_components()
        logging.info("üé§ WakeWordService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (SimpleKWS)")

    def _initialize_components(self):
        try:
            self.audio_manager = AudioManager(self.config.get("audio", {}))
            self.speech_handler = SpeechHandler(self.config)
            self.speech_handler.audio_manager = self.audio_manager
            logging.info("‚úÖ WakeWord –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WakeWord –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

    # ---------------- —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º ----------------

    def start_service(self):
        if self.is_running:
            logging.warning("‚ö†Ô∏è WakeWord —Å–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        if not self.audio_manager or not self.speech_handler:
            logging.error("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return False

        self.is_running = True
        self.is_listening = True
        self.service_thread = threading.Thread(
            target=self._wake_word_loop, daemon=True)
        self.service_thread.start()

        logging.info("üöÄ WakeWord —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω (SimpleKWS)")
        return True

    def stop_service(self):
        if not self.is_running:
            return
        self.is_running = False
        self.is_listening = False
        if self.service_thread and self.service_thread.is_alive():
            self.service_thread.join(timeout=5)
        logging.info("‚èπÔ∏è WakeWord —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # ---------------- –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ----------------

    def _wake_word_loop(self):
        """–°–ª—É—à–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω —á–∞–Ω–∫–∞–º–∏ –ø–æ 1—Å –∏ –¥–µ—Ç–µ–∫—Ç–∏–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ SimpleKWS."""
        try:
            logging.info("üîÑ –ù–ê–ß–ò–ù–ê–Æ _wake_word_loop")
            chunk_duration = 1  # —Å–µ–∫—É–Ω–¥–∞

            while self.is_running:
                if time.time() < self.cooldown_until:
                    time.sleep(0.05)
                    continue

                if not self.is_listening:
                    time.sleep(0.1)
                    continue

                # 1) –∑–∞–ø–∏—Å—ã–≤–∞–µ–º 1-—Å–µ–∫—É–Ω–¥–Ω—ã–π —á–∞–Ω–∫
                tmp = self.audio_manager.record_chunk(
                    duration_seconds=chunk_duration)
                if not tmp:
                    continue

                # 2) –ª—ë–≥–∫–∏–µ –ø–æ—Ä–æ–≥–∏, —á—Ç–æ–±—ã –Ω–µ –∫–æ—Ä–º–∏—Ç—å KWS –ø—É—Å—Ç—ã–º–∏/—à—É–º–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
                try:
                    has_voice = self.audio_manager.has_speech(tmp)
                    cont = self.audio_manager.has_continuous_sound(tmp)
                    if not (has_voice and cont):
                        # —Ç–∏—Ö–æ/—à—É–º ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        Path(tmp).unlink(missing_ok=True)
                        continue

                    # 3) KWS —Å–∫–æ—Ä–∏—Ç —á–∞–Ω–∫
                    score = self._kws.score(tmp)
                    logging.info(
                        f"ü™Ñ KWS score={score:.3f} (thr={self._kws.threshold:.3f})")
                    if score >= self._kws.threshold:
                        logging.info("‚úÖ Wake word –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω (SimpleKWS)")
                        self.is_listening = False
                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–∏—Å–∏ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ –ø—Ä–µ—Ä–æ–ª–ª–æ–≤/—Å–∫–ª–µ–µ–∫)
                        self._handle_activation()
                        # cooldown –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        self.cooldown_until = time.time() + self._cd_after_activation
                        self.is_listening = True
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ KWS/–æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                finally:
                    Path(tmp).unlink(missing_ok=True)

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
        finally:
            logging.info("üîö –¶–∏–∫–ª WakeWord –∑–∞–≤–µ—Ä—à–µ–Ω")

    # ---------------- —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ----------------

    def _handle_activation(self):
        """–ü–æ—Å–ª–µ –¥–µ—Ç–µ–∫—Ç–∞: –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–æ —Ç–∏—à–∏–Ω—ã, —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å."""
        try:
            # –í–∏–∑—É–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            try:
                robot = getattr(self.ai_orchestrator, "robot", None)
                if robot and hasattr(robot, "set_rgb_preset"):
                    robot.set_rgb_preset("green")
            except Exception:
                pass

            audio_file = self.audio_manager.record_until_silence(
                max_duration=self.activation_timeout,
                silence_timeout=1.8,
                pre_roll_files=None,
            )

            # –í—ã–∫–ª—é—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ü–∏—é
            try:
                robot = getattr(self.ai_orchestrator, "robot", None)
                if robot and hasattr(robot, "set_rgb_preset"):
                    robot.set_rgb_preset("off")
            except Exception:
                pass

            if not audio_file:
                logging.info("ü§´ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É—Å–ª—ã—à–∞–Ω–∞")
                return

            # STT (–≤—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤–Ω—É—Ç—Ä–∏ SpeechHandler)
            command_text = self.speech_handler.transcribe_audio(audio_file)
            Path(audio_file).unlink(missing_ok=True)

            if not command_text:
                logging.info("ü§´ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
                return

            cleaned = command_text.strip().strip(".!?,‚Ä¶").lower()
            if len(cleaned) < 2 or cleaned in {"–≤—Å—ë", "–≤—Å–µ", "–æ–∫", "—É–≥—É", "–∞–≥–∞", "–¥–∞", "–Ω–µ—Ç"}:
                logging.info(
                    f"ü§∑ –ü—É—Å—Ç–∞—è/—Å–ª—É–∂–µ–±–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command_text!r} ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ AI")
                return

            logging.info(f"üë§ –ö–æ–º–∞–Ω–¥–∞: '{command_text}'")
            self._process_voice_command(command_text)

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        finally:
            self._resume_wake_word_listening()

    def _process_voice_command(self, command_text: str):
        try:
            if not self.ai_orchestrator:
                self._speak_response(
                    f"–ü–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É: {command_text}. –ù–æ AI –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.")
                return

            logging.info("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ AI...")
            result = self.ai_orchestrator.smart_process_request(
                text=command_text)

            if result.get("success"):
                response_text = result.get("ai_response", "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                self._speak_response(response_text)
                logging.info(
                    f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ({result.get('intent', 'unknown')}): '{response_text[:50]}...'")
            else:
                self._speak_response("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
                logging.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {result.get('error')}")
        except Exception as e:
            self._speak_response("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

    def _speak_response(self, text: str):
        try:
            if not self.speech_handler or not self.audio_manager:
                logging.warning("‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return
            self.is_listening = False
            logging.info(f"üîä –û–∑–≤—É—á–∏–≤–∞—é: '{text[:50]}...'")
            audio_file = self.speech_handler.text_to_speech(text)
            if audio_file:
                ok = self.audio_manager.play_audio(audio_file)
                if not ok:
                    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç")
            else:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª")
            time.sleep(2)  # –¥–∞—Ç—å –∑–≤—É–∫—É –∑–∞—Ç–∏—Ö–Ω—É—Ç—å
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")
        finally:
            if self.is_running:
                self.cooldown_until = time.time() + max(self._cd_after_tts, 2.5)
                self.is_listening = True

    def _resume_wake_word_listening(self):
        try:
            time.sleep(2)
            if self.is_running:
                self.is_listening = True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")

    def _play_activation_sound(self):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–≤—É–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª)
        logging.debug("üîî –ó–≤—É–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (stub)")
