# robot/ai_agent/wake_word_service.py
import threading
import time
import logging
from pathlib import Path
import re
from .audio_manager import AudioManager
from .speech_handler import SpeechHandler


class WakeWordService:
    """
    –°–µ—Ä–≤–∏—Å –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∞ –í–∏–Ω–¥–∏
    –ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–ª—É—à–∞–µ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–ª–æ–≤–æ "–í–∏–Ω–¥–∏"
    """

    def __init__(self, config, ai_orchestrator=None):
        self.config = config
        self.ai_orchestrator = ai_orchestrator

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ wake word
        self.wake_words = config.get('wake_words', ['–≤–∏–Ω–¥–∏', 'windy', '–≤–µ–Ω–¥–∏'])
        self.activation_timeout = config.get(
            'activation_timeout', 10)  # —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
        self.sensitivity_threshold = config.get('sensitivity_threshold', 800)

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        self.is_running = False
        self.is_listening = False
        self.service_thread = None

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.audio_manager: AudioManager | None = None
        self.speech_handler: SpeechHandler | None = None

        self.wake_cfg = self.config.get('wake', {}) or {}

        self._confirm_second_look = bool(
            self.wake_cfg.get('confirm_second_look', True))

        match_cfg = self.wake_cfg.get('match', {}) if isinstance(
            self.wake_cfg, dict) else {}
        self._match_start_only = bool(match_cfg.get('start_only', True))
        self._max_prefix_words = int(match_cfg.get('max_prefix_words', 2))
        self._use_word_boundary = bool(match_cfg.get('word_boundary', True))

        # cooldown
        self.cooldown_until = 0.0
        self._cd_after_tts = float(self.wake_cfg.get(
            'cooldown_after_tts_ms', 2000))/1000.0
        self._cd_after_activation = float(self.wake_cfg.get(
            'cooldown_after_activation_ms', 1000))/1000.0

        self._initialize_components()
        logging.info("üé§ WakeWordService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logging.info(f"üëÇ –°–ª–æ–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {', '.join(self.wake_words)}")

    def _initialize_components(self):
        try:
            self.audio_manager = AudioManager(self.config.get('audio', {}))
            self.speech_handler = SpeechHandler(self.config)
            self.speech_handler.audio_manager = self.audio_manager
            logging.info("‚úÖ WakeWord –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WakeWord –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

    def start_service(self):
        if self.is_running:
            logging.warning("‚ö†Ô∏è WakeWord —Å–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        if not self.audio_manager or not self.speech_handler:
            logging.error("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return False

        self.is_running = True
        self.is_listening = True
        self.service_thread = threading.Thread(
            target=self._wake_word_loop, daemon=True)
        self.service_thread.start()

        logging.info("üöÄ WakeWord —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
        logging.info(
            f"üëÇ –°–ª—É—à–∞—é –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(self.wake_words)}")
        return True

    def stop_service(self):
        if not self.is_running:
            return
        self.is_running = False
        self.is_listening = False
        if self.service_thread and self.service_thread.is_alive():
            self.service_thread.join(timeout=5)
        logging.info("‚èπÔ∏è WakeWord —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # ------------ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ------------

    def _wake_word_loop(self):
        """–°–ª—É—à–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω —á–∞–Ω–∫–∞–º–∏, –±—É—Ñ–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ~3—Å, —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º –∏ –∏—â–µ–º wake-word."""
        try:
            logging.info("üîÑ –ù–ê–ß–ò–ù–ê–Æ _wake_word_loop")
            buffer_files: list[str] = []
            buffer_duration = 0
            max_buffer_duration = 3
            chunk_duration = 1

            while self.is_running:
                logging.info("üëÇ –ñ–¥—É wake word...")
                if time.time() < self.cooldown_until:
                    logging.info(
                        f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞: {self.cooldown_until - time.time():.1f}—Å")
                    time.sleep(0.05)
                    continue
                if not self.is_listening:
                    logging.info("üëÇ –û–∂–∏–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...")
                    time.sleep(0.1)
                    continue

                # –ø–∏—à–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —á–∞–Ω–∫ —á–µ—Ä–µ–∑ AudioManager
                tmp = self.audio_manager.record_chunk(
                    duration_seconds=chunk_duration)
                logging.info(f"üéß –ó–∞–ø–∏—Å–∞–Ω —á–∞–Ω–∫: {tmp}")
                if not tmp:
                    continue

                buffer_files.append(tmp)
                buffer_duration += chunk_duration

                logging.info(
                    f"üó£Ô∏è –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è: {buffer_duration}/{max_buffer_duration}—Å")

                # –¥–µ—Ä–∂–∏–º –æ–∫–Ω–æ ~3—Å
                while buffer_duration > max_buffer_duration and buffer_files:
                    logging.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –±—É—Ñ–µ—Ä: {buffer_files[0]}")
                    old = buffer_files.pop(0)
                    Path(old).unlink(missing_ok=True)
                    logging.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {old}")
                    buffer_duration -= chunk_duration

                # —Å–æ–±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—É—Å–∫–∏ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª –∏ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏–º
                recent = buffer_files[-3:] if len(
                    buffer_files) >= 3 else buffer_files[:]
                logging.info(f"üîä –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º {len(recent)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                combined = f"/tmp/wake_combined_{int(time.time()*1000)}.wav"

                if self.audio_manager.combine_audio_files(recent, combined):
                    # 1) –µ—Å—Ç—å –ª–∏ —Ä–µ—á—å
                    logging.info(f"üó£Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {combined}")
                    if self.audio_manager.has_speech(combined):
                        # 2) –ø–æ—Ö–æ–∂–∞ –ª–∏ –Ω–∞ —Ä–µ—á—å (–Ω–µ –æ–¥–∏–Ω–æ—á–Ω—ã–π —à—É–º)
                        if self.audio_manager.has_continuous_sound(combined):
                            text = self.speech_handler.transcribe_audio(
                                combined)
                            if text and self._contains_wake_word(text):
                                logging.info(
                                    "‚úÖ –ü–µ—Ä–≤–∏—á–Ω—ã–π –¥–µ—Ç–µ–∫—Ç wake word. –§–∏–∫—Å–∏—Ä—É—é —Å–ª—É—à–∞–ª–∫—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –Ω–∞ –±—É—Ñ–µ—Ä–µ")
                                # 1) –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–∏—Å–∞–ª –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                                self.is_listening = False

                                # 2) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ñ–∞–π–ª–∞–º (–±–µ–∑ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞)
                                if self._confirm_wake_word_from_recent(recent_files=recent, primary_text=text):
                                    logging.info(
                                        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ wake word –ø—Ä–æ–π–¥–µ–Ω–æ")
                                    # –¥–∞–ª—å—à–µ –æ–Ω —Å–∞–º —Ä–µ—à–∏—Ç: –ø–∞—Ä—Å–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ñ—Ä–∞–∑—ã –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é
                                    self._handle_activation(text)
                                else:
                                    logging.info(
                                        "‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ wake word –Ω–µ –ø—Ä–æ—à–ª–æ")
                                    # —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–ª—É—à–∞–ª–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
                                    if self.is_running:
                                        self.is_listening = True
                    Path(combined).unlink(missing_ok=True)

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
        finally:
            # –æ—á–∏—Å—Ç–∏–º —Ö–≤–æ—Å—Ç—ã
            for f in buffer_files:
                Path(f).unlink(missing_ok=True)
            logging.info("üîö –¶–∏–∫–ª WakeWord –∑–∞–≤–µ—Ä—à–µ–Ω")

    # ------------ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ------------

    def _contains_wake_word(self, text: str) -> bool:
        clean = re.sub(r'[^\w\s]', ' ', text.lower()).strip()
        if not clean:
            return False
        tokens = clean.split()
        head = " ".join(tokens[:max(1, self._max_prefix_words)])
        for ww in self.wake_words:
            ww = ww.lower()
            if self._use_word_boundary:
                pat = r'^\b' + \
                    re.escape(
                        ww) + r'\b' if self._match_start_only else r'\b' + re.escape(ww) + r'\b'
                if re.search(pat, head if self._match_start_only else clean):
                    return True
            else:
                to_scan = head if self._match_start_only else clean
                if ww in to_scan:
                    return True
        return False

    def _extract_command_after_wake_word(self, activation_text):
        text_lower = activation_text.lower().strip()
        for wake_word in self.wake_words:
            if wake_word in text_lower:
                wake_pos = text_lower.find(wake_word)
                after_wake = text_lower[wake_pos + len(wake_word):].strip()
                filtered = [w for w in after_wake.split() if w not in [
                    '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–º–æ–∂–µ—à—å', '—Å–∫–∞–∂–∏']]
                if filtered:
                    cmd = ' '.join(filtered)
                    return cmd if len(cmd) > 2 else None
        return None

    def _confirm_wake_word_from_recent(self, recent_files, primary_text: str) -> bool:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º wake word –±–µ–∑ arecord:
        - –µ—Å–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ —É–∂–µ –µ—Å—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä ‚Äî ok;
        - –∏–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —á–∞–Ω–∫ –∏–∑ recent_files.
        """
        try:
            # –µ—Å–ª–∏ —É–∂–µ —è–≤–Ω–æ –µ—Å—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ‚Äî —Å—á–∏—Ç–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º
            if self._contains_wake_word(primary_text):
                return True

            # –∏–Ω–∞—á–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ (1 —Å–µ–∫) –∏–∑ –æ–∫–Ω–∞
            if not recent_files:
                return False

            last_chunk = recent_files[-1]
            text2 = self.speech_handler.transcribe_audio(last_chunk) or ""
            logging.info(
                f"üîÅ –í—Ç–æ—Ä–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ wake word –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —á–∞–Ω–∫–µ: '{text2}'")
            return self._contains_wake_word(text2)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ second-look: {e}")
            # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äî –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
            return False

    # ------------ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ------------

    def _handle_activation(self, activation_text):
        try:
            self.is_listening = False
            command = self._extract_command_after_wake_word(activation_text)
            if command:
                logging.info(f"üéØ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: '{command}'")
                self._process_voice_command(command)
            else:
                logging.info("üëÇ –°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É...")
                self._enter_command_mode()
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        finally:
            time.sleep(3)
            self.cooldown_until = time.time() + self._cd_after_activation
            self.is_listening = True

    def _enter_command_mode(self):
        try:
            # –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            try:
                robot = getattr(self.ai_orchestrator, "robot", None)
                if robot and hasattr(robot, "set_rgb_preset"):
                    robot.set_rgb_preset("green")
            except Exception:
                pass

            audio_file = self.audio_manager.record_until_silence(
                max_duration=self.activation_timeout,
                silence_timeout=1.5
            )

            try:
                robot = getattr(self.ai_orchestrator, "robot", None)
                if robot and hasattr(robot, "set_rgb_preset"):
                    robot.set_rgb_preset("off")
            except Exception:
                pass

            if not audio_file:
                logging.info("ü§´ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É—Å–ª—ã—à–∞–Ω–∞")
                return

            command_text = self.speech_handler.transcribe_audio(audio_file)
            Path(audio_file).unlink(missing_ok=True)

            if command_text:
                logging.info(f"üë§ –ö–æ–º–∞–Ω–¥–∞: '{command_text}'")
                self._process_voice_command(command_text)
            else:
                logging.info("ü§´ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∂–∏–º–∞ –∫–æ–º–∞–Ω–¥: {e}")
        finally:
            self._resume_wake_word_listening()

    def _process_voice_command(self, command_text):
        try:
            if not self.ai_orchestrator:
                self._speak_response(
                    f"–ü–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É: {command_text}. –ù–æ AI –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.")
                return

            logging.info("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ AI...")
            result = self.ai_orchestrator.smart_process_request(
                text=command_text)

            if result.get("success"):
                response_text = result.get("ai_response", "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                self._speak_response(response_text)
                logging.info(
                    f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ({result.get('intent', 'unknown')}): '{response_text[:50]}...'")
            else:
                self._speak_response("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
                logging.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {result.get('error')}")
        except Exception as e:
            self._speak_response("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

    def _speak_response(self, text):
        try:
            if not self.speech_handler or not self.audio_manager:
                logging.warning("‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return
            self.is_listening = False
            logging.info(f"üîä –û–∑–≤—É—á–∏–≤–∞—é: '{text[:50]}...'")
            audio_file = self.speech_handler.text_to_speech(text)
            if audio_file:
                ok = self.audio_manager.play_audio(audio_file)
                if not ok:
                    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç")
            else:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª")
            time.sleep(2)  # –¥–∞—ë–º –∑–≤—É–∫—É –∑–∞—Ç–∏—Ö–Ω—É—Ç—å
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")
        finally:
            if self.is_running:
                self.cooldown_until = time.time() + self._cd_after_tts
                self.is_listening = True

    def _resume_wake_word_listening(self):
        try:
            time.sleep(2)
            if self.is_running:
                self.is_listening = True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")

    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–≤—É–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª)
    def _play_activation_sound(self):
        logging.debug("üîî –ó–≤—É–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (stub)")

    def _confirm_wake_word(self) -> bool:
        if not self._confirm_second_look:
            return True
        tmp = self.audio_manager.record_chunk(duration_seconds=1)
        if not tmp:
            return False
        try:
            text2 = self.speech_handler.transcribe_audio(tmp) or ""
            return self._contains_wake_word(text2)
        finally:
            Path(tmp).unlink(missing_ok=True)
