# robot/ai_agent/wake_word_service.py
import threading
import time
import logging
from pathlib import Path

from .audio_manager import AudioManager
from .speech_handler import SpeechHandler
from .simple_kws import SimpleKWS


class WakeWordService:
    """
    –°–µ—Ä–≤–∏—Å –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (wake):
    - –ü–∏—à–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞–Ω–∫–∏ (1 —Å–µ–∫)
    - –§–∏–ª—å—Ç—Ä—É–µ—Ç –∏—Ö –ø–æ –ø—Ä–æ—Å—Ç—ã–º –∞—É–¥–∏–æ-–≥–µ–π—Ç–∞–º (–µ—Å—Ç—å —Ä–µ—á—å/–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å)
    - –ü—Ä–æ–≥–æ–Ω—è–µ—Ç —á–µ—Ä–µ–∑ SimpleKWS (–±–µ–∑ STT –∏ –±–µ–∑ —Ç—è–∂—ë–ª—ã—Ö –º–æ–¥–µ–ª–µ–π)
    - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç wake –ø–æ N –ø–æ–ø–∞–¥–∞–Ω–∏—è–º –∑–∞ –æ–∫–Ω–æ T
    - –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∏—à–µ—Ç –∫–æ–º–∞–Ω–¥—É ¬´–¥–æ —Ç–∏—à–∏–Ω—ã¬ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ AI
    """

    def __init__(self, config, ai_orchestrator=None):
        self.config = config
        self.ai_orchestrator = ai_orchestrator

        # ---- –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ----
        self.audio_manager: AudioManager | None = None
        self.speech_handler: SpeechHandler | None = None

        # ---- –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ----
        self.activation_timeout = int(
            self.config.get("activation_timeout", 10))

        # ---- —Ç–∞–π–º–∏–Ω–≥–∏/–∫—É–ª–¥–∞—É–Ω—ã ----
        wake_cfg = (self.config.get("wake", {}) or {})
        self.cooldown_until = 0.0
        self._cd_after_tts = float(wake_cfg.get(
            "cooldown_after_tts_ms", 2000)) / 1000.0
        self._cd_after_activation = float(wake_cfg.get(
            "cooldown_after_activation_ms", 1000)) / 1000.0

        # ---- KWS ----
        kws_cfg = (self.config.get("wake_kws", {}) or {})
        self._kws = SimpleKWS(
            threshold=float(kws_cfg.get("threshold", 0.85)),
            margin_alpha=float(kws_cfg.get("margin_alpha", 1.0)),
        )
        pos_dir = kws_cfg.get("samples_dir", "data/wake_samples")
        neg_dir = kws_cfg.get("negatives_dir", "data/wake_negatives")
        pos_loaded = self._kws.enroll_dir(pos_dir)
        neg_loaded = self._kws.enroll_neg_dir(neg_dir)
        logging.info(
            "üóùÔ∏è SimpleKWS: POS=%d NEG=%d (thr=%.3f, alpha=%.2f)",
            pos_loaded, neg_loaded, self._kws.threshold, self._kws.alpha
        )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ wake: N –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –æ–∫–Ω–µ T
        self._kws_min_hits = int(kws_cfg.get(
            "min_hits", 2))          # —Ä–µ–∫–æ–º–µ–Ω–¥—É—é 2..3
        self._kws_window = float(kws_cfg.get(
            "window_sec", 1.5))      # 1.5‚Äì2.0 —Å–µ–∫
        self._kws_hits: list[float] = []

        # ---- —Å–æ—Å—Ç–æ—è–Ω–∏–µ ----
        self.is_running = False
        self.is_listening = False
        self.service_thread = None

        self._initialize_components()
        logging.info("üé§ WakeWordService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (KWS-only)")

    # ---------------- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ----------------

    def _initialize_components(self):
        try:
            self.audio_manager = AudioManager(self.config.get("audio", {}))
            self.speech_handler = SpeechHandler(self.config)
            self.speech_handler.audio_manager = self.audio_manager
            logging.info("‚úÖ WakeWord –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WakeWord –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

    # ---------------- —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º ----------------

    def start_service(self):
        if self.is_running:
            logging.warning("‚ö†Ô∏è WakeWord —Å–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        if not self.audio_manager or not self.speech_handler:
            logging.error("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return False

        self.is_running = True
        self.is_listening = True
        self.service_thread = threading.Thread(
            target=self._wake_word_loop, daemon=True)
        self.service_thread.start()

        logging.info("üöÄ WakeWord —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω (SimpleKWS)")
        return True

    def stop_service(self):
        if not self.is_running:
            return
        self.is_running = False
        self.is_listening = False
        if self.service_thread and self.service_thread.is_alive():
            self.service_thread.join(timeout=5)
        logging.info("‚èπÔ∏è WakeWord —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # ---------------- –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ----------------

    def _wake_word_loop(self):
        """
        Wake —Ç–æ–ª—å–∫–æ –ø–æ KWS (–±–µ–∑ STT).
        1) 1c —á–∞–Ω–∫ ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ has_speech/has_continuous_sound
        2) SimpleKWS.detect -> (ok, pos, neg, margin)
        3) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ N –ø–æ–ø–∞–¥–∞–Ω–∏—è–º –≤ –æ–∫–Ω–µ T
        """
        try:
            logging.info("üîÑ –ù–ê–ß–ò–ù–ê–Æ _wake_word_loop (KWS-only)")
            chunk_duration = 1.0

            while self.is_running:
                # –∫—É–ª–¥–∞—É–Ω: –∏–≥–Ω–æ—Ä —á–∞–Ω–∫
                if time.time() < self.cooldown_until:
                    time.sleep(0.03)
                    continue

                # –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Å–ª—É—à–∞–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ –≤—Ä–µ–º—è TTS)
                if not self.is_listening:
                    time.sleep(0.05)
                    continue

                # 1) –∑–∞–ø–∏—Å—ã–≤–∞–µ–º 1 —Å–µ–∫
                tmp = self.audio_manager.record_chunk(
                    duration_seconds=chunk_duration)
                if not tmp:
                    continue

                try:
                    # 2) –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≥–µ–π—Ç –ø–æ –∞—É–¥–∏–æ, —á—Ç–æ–±—ã –Ω–µ –∫–æ—Ä–º–∏—Ç—å KWS —à—É–º–æ–º
                    has_voice = self.audio_manager.has_speech(tmp)
                    cont = self.audio_manager.has_continuous_sound(tmp)
                    logging.info(
                        "üéöÔ∏è –ì–µ–π—Ç: has_voice=%s cont=%s —Ñ–∞–π–ª=%s", has_voice, cont, tmp)
                    if not (has_voice and cont):
                        Path(tmp).unlink(missing_ok=True)
                        continue

                    # 3) KWS
                    ok, pos, neg, margin = self._kws.detect(tmp)
                    logging.info(
                        "üîé KWS: ok=%s pos=%.3f neg=%.3f margin=%.3f thr=%.3f",
                        ok, pos, neg, margin, self._kws.threshold
                    )

                    # sliding window –ø–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è–º
                    now = time.time()
                    self._kws_hits = [t for t in self._kws_hits if (
                        now - t) <= self._kws_window]
                    if ok:
                        self._kws_hits.append(now)
                        logging.info("‚úÖ KWS hit %d/%d (–æ–∫–Ω–æ %.1fs)",
                                     len(self._kws_hits), self._kws_min_hits, self._kws_window)

                    if len(self._kws_hits) >= self._kws_min_hits:
                        logging.info(
                            "üéØ Wake CONFIRMED –ø–æ KWS (hits=%d)", len(self._kws_hits))
                        self._kws_hits.clear()
                        self.is_listening = False
                        self._handle_activation()  # —Ç–µ–∫—Å—Ç –Ω–µ –Ω—É–∂–µ–Ω
                        # –Ω–µ–±–æ–ª—å—à–æ–π –∫—É–ª–¥–∞—É–Ω –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                        self.cooldown_until = time.time() + self._cd_after_activation
                        self.is_listening = True

                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ KWS/–æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                finally:
                    Path(tmp).unlink(missing_ok=True)

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
        finally:
            logging.info("üîö –¶–∏–∫–ª WakeWord –∑–∞–≤–µ—Ä—à–µ–Ω")

    # ---------------- —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ----------------

    def _handle_activation(self):
        """
        –ü–æ—Å–ª–µ –¥–µ—Ç–µ–∫—Ç–∞: –∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–æ —Ç–∏—à–∏–Ω—ã, —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ SpeechHandler (—Ç–æ—Ç —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞),
        –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ª—É–∂–µ–±–Ω—ã–µ/–ø—É—Å—Ç—ã–µ, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ AI.
        """
        try:
            # –í–∏–∑—É–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            try:
                robot = getattr(self.ai_orchestrator, "robot", None)
                if robot and hasattr(robot, "set_rgb_preset"):
                    robot.set_rgb_preset("green")
            except Exception:
                pass

            logging.info("üé§ –ó–∞–ø–∏—Å—å –∫–æ–º–∞–Ω–¥—ã –¥–æ —Ç–∏—à–∏–Ω—ã (max=%ss)",
                         self.activation_timeout)
            audio_file = self.audio_manager.record_until_silence(
                max_duration=self.activation_timeout,
                silence_timeout=1.8,
                pre_roll_files=None,
            )

            # –í—ã–∫–ª—é—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ü–∏—é
            try:
                robot = getattr(self.ai_orchestrator, "robot", None)
                if robot and hasattr(robot, "set_rgb_preset"):
                    robot.set_rgb_preset("off")
            except Exception:
                pass

            if not audio_file:
                logging.info("ü§´ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É—Å–ª—ã—à–∞–Ω–∞")
                return

            logging.info("üó£Ô∏è STT –¥–ª—è —Ñ–∞–π–ª–∞: %s", audio_file)
            command_text = self.speech_handler.transcribe_audio(audio_file)
            Path(audio_file).unlink(missing_ok=True)

            if not command_text:
                logging.info("ü§´ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
                return

            cleaned = command_text.strip().strip(".!?,‚Ä¶").lower()
            if len(cleaned) < 2 or cleaned in {"–≤—Å—ë", "–≤—Å–µ", "–æ–∫", "—É–≥—É", "–∞–≥–∞", "–¥–∞", "–Ω–µ—Ç"}:
                logging.info(
                    "ü§∑ –°–ª—É–∂–µ–±–Ω–∞—è/–ø—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞: %r ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é", command_text)
                return

            logging.info("üë§ –ö–æ–º–∞–Ω–¥–∞: %r", command_text)
            self._process_voice_command(command_text)

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        finally:
            self._resume_wake_word_listening()

    def _process_voice_command(self, command_text: str):
        try:
            if not self.ai_orchestrator:
                self._speak_response(
                    f"–ü–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É: {command_text}. –ù–æ AI –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.")
                return

            logging.info("üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã AI...")
            result = self.ai_orchestrator.smart_process_request(
                text=command_text)

            if result.get("success"):
                response_text = result.get("ai_response", "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                logging.info("‚úÖ AI intent=%s", result.get("intent", "unknown"))
                self._speak_response(response_text)
            else:
                logging.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: %s",
                              result.get("error"))
                self._speak_response("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
        except Exception as e:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            self._speak_response("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

    def _speak_response(self, text: str):
        try:
            if not self.speech_handler or not self.audio_manager:
                logging.warning("‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return
            self.is_listening = False
            logging.info("üîä –û–∑–≤—É—á–∏–≤–∞—é: %r", text[:80])
            audio_file = self.speech_handler.text_to_speech(text)
            if audio_file:
                ok = self.audio_manager.play_audio(audio_file)
                if not ok:
                    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç")
            else:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª")
            time.sleep(2)  # –¥–∞—Ç—å –∑–≤—É–∫—É –∑–∞—Ç–∏—Ö–Ω—É—Ç—å
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")
        finally:
            if self.is_running:
                # –≥–ª—É—Ö–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ TTS
                self.cooldown_until = time.time() + max(self._cd_after_tts, 2.5)
                self.is_listening = True

    def _resume_wake_word_listening(self):
        try:
            time.sleep(2)
            if self.is_running:
                self.is_listening = True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")

    def _play_activation_sound(self):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–≤—É–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª)
        logging.debug("üîî –ó–≤—É–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (stub)")
