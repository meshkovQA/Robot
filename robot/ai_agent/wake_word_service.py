# robot/ai_agent/wake_word_service.py

import threading
import time
import logging
from pathlib import Path
import re
from .audio_manager import AudioManager
from .speech_handler import SpeechHandler
from robot.controllers.rgb_controller import RGBController
import subprocess
import tempfile
import wave
import numpy as np


class WakeWordService:
    """
    –°–µ—Ä–≤–∏—Å –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∞ –í–∏–Ω–¥–∏
    –ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–ª—É—à–∞–µ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–ª–æ–≤–æ "–í–∏–Ω–¥–∏"
    """

    def __init__(self, config, ai_orchestrator=None):
        self.config = config
        self.ai_orchestrator = ai_orchestrator

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ wake word
        self.wake_words = config.get('wake_words', ['–≤–∏–Ω–¥–∏', 'windy', '–≤–µ–Ω–¥–∏'])
        self.activation_timeout = config.get(
            'activation_timeout', 10)  # —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
        self.sensitivity_threshold = config.get('sensitivity_threshold', 800)

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        self.is_running = False
        self.is_listening = False
        self.service_thread = None

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.audio_manager = None
        self.speech_handler = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._initialize_components()

        logging.info("üé§ WakeWordService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logging.info(f"üëÇ –°–ª–æ–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {', '.join(self.wake_words)}")

    def _initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AudioManager
            self.audio_manager = AudioManager(self.config.get('audio', {}))

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SpeechHandler
            self.speech_handler = SpeechHandler(self.config)
            self.speech_handler.audio_manager = self.audio_manager
            logging.info("‚úÖ WakeWord –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WakeWord –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

    def start_service(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        if self.is_running:
            logging.warning("‚ö†Ô∏è WakeWord —Å–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return False

        if not self.audio_manager:
            logging.error("‚ùå AudioManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False

        if not self.speech_handler:
            logging.error(
                "‚ùå SpeechHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False

        self.is_running = True
        self.service_thread = threading.Thread(
            target=self._wake_word_loop,
            daemon=True
        )
        self.service_thread.start()

        logging.info("üöÄ WakeWord —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
        logging.info(
            f"üëÇ –°–ª—É—à–∞—é –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(self.wake_words)}")
        return True

    def stop_service(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        if not self.is_running:
            return

        self.is_running = False
        self.is_listening = False

        if self.audio_manager:
            self.audio_manager.stop_continuous_recording()

        if self.service_thread and self.service_thread.is_alive():
            self.service_thread.join(timeout=5)

        logging.info("‚èπÔ∏è WakeWord —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _wake_word_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è wake word —á–µ—Ä–µ–∑ arecord"""
        try:

            logging.info("üîÑ –ù–ê–ß–ò–ù–ê–Æ _wake_word_loop")

            while self.is_running:
                try:
                    logging.info("üîÑ –í–æ—à–µ–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–π while —Ü–∏–∫–ª")
                    self.is_listening = True
                    logging.info("üé§ –ù–∞—á–∞—Ç–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∑–∞–ø–∏—Å—å (—á–µ—Ä–µ–∑ arecord)")

                    # –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∞—É–¥–∏–æ
                    audio_buffer = []
                    buffer_duration = 0
                    max_buffer_duration = 3.0  # –º–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –≤ –±—É—Ñ–µ—Ä–µ
                    chunk_duration = 1  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ 1 —Å–µ–∫—É–Ω–¥–µ

                    while self.is_running and self.is_listening:
                        logging.info("üîÑ –¶–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è wake word...")
                       # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç—Ä–µ–∑–∫–∏ (1 —Å–µ–∫—É–Ω–¥—ã) –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è wake word
                        temp_file = f"/tmp/wake_chunk_{int(time.time() * 1000)}.wav"

                        cmd = [
                            'arecord',
                            # PLUGHW!
                            '-D', f'plughw:{self.audio_manager.microphone_index},0',
                            '-r', str(self.audio_manager.sample_rate),
                            '-c', str(self.audio_manager.channels),
                            '-f', 'S16_LE',
                            '-d', str(chunk_duration),
                            temp_file
                        ]
                        logging.info(f"üîÑ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")

                        try:

                            result = subprocess.run(
                                cmd, capture_output=True, timeout=1)

                            logging.info(
                                f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {result}")

                            if result.returncode == 0 and Path(temp_file).exists():
                                file_size = Path(temp_file).stat().st_size

                                if file_size > 500:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è 0.5 —Å–µ–∫
                                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
                                    audio_buffer.append(temp_file)
                                    buffer_duration += chunk_duration

                                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω
                                    while buffer_duration > max_buffer_duration:
                                        old_file = audio_buffer.pop(0)
                                        Path(old_file).unlink(missing_ok=True)
                                        buffer_duration -= chunk_duration

                                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –±—É—Ñ–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ wake word
                                    self._process_audio_buffer(
                                        audio_buffer.copy())
                                else:
                                    Path(temp_file).unlink(missing_ok=True)
                            else:
                                Path(temp_file).unlink(missing_ok=True)

                        except subprocess.TimeoutExpired:
                            Path(temp_file).unlink(missing_ok=True)
                            continue
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ chunk: {e}")
                            Path(temp_file).unlink(missing_ok=True)
                            time.sleep(0.1)

                    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
                    for temp_file in audio_buffer:
                        Path(temp_file).unlink(missing_ok=True)

                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
                    time.sleep(5)

        finally:
            logging.info("üîö –¶–∏–∫–ª WakeWord –∑–∞–≤–µ—Ä—à–µ–Ω")

    def _check_audio_has_speech(self, audio_file):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ—á–∏ –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ –ø–æ —É—Ä–æ–≤–Ω—é –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        try:
            import wave
            import numpy as np

            with wave.open(audio_file, 'rb') as wf:
                frames = wf.readframes(wf.getnframes())
                audio_data = np.frombuffer(frames, dtype=np.int16)

                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
                volume = np.abs(audio_data).mean()
                max_volume = np.abs(audio_data).max()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
                min_avg_volume = 100   # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
                min_max_volume = 1000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∏–∫–æ–≤–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å

                has_speech = volume > min_avg_volume and max_volume > min_max_volume

                logging.debug(
                    f"üîä –ê—É–¥–∏–æ –ø—Ä–æ–≤–µ—Ä–∫–∞: avg={volume:.1f}, max={max_volume:.1f}, speech={has_speech}")

                return has_speech

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–¥–∏–æ: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É

    def _contains_wake_word(self, text):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ wake word"""
        # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        clean_text = re.sub(r'[^\w\s]', '', text).strip()
        words = clean_text.split()

        # –ò—â–µ–º wake word –≤ –Ω–∞—á–∞–ª–µ —Ñ—Ä–∞–∑—ã (–ø–µ—Ä–≤—ã–µ 3 —Å–ª–æ–≤–∞)
        first_words = words[:3] if len(words) >= 3 else words

        for wake_word in self.wake_words:
            for word in first_words:
                if wake_word in word or word in wake_word:
                    return True

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - wake word –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Ñ—Ä–∞–∑—ã
        for wake_word in self.wake_words:
            if wake_word in clean_text:
                return True

        return False

    def _handle_activation(self, activation_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞"""
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ wake word
            self.is_listening = False

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ wake word
            command = self._extract_command_after_wake_word(activation_text)

            if command:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ "–í–∏–Ω–¥–∏" - –≤—ã–ø–æ–ª–Ω—è–µ–º –µ—ë
                logging.info(f"üéØ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: '{command}'")
                self._process_voice_command(command)
            else:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ "–í–∏–Ω–¥–∏" - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
                logging.info("üëÇ –°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É...")
                self._enter_command_mode()

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        finally:
            # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ wake word —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            time.sleep(3)
            self.is_listening = True

    def _extract_command_after_wake_word(self, activation_text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ wake word"""
        text_lower = activation_text.lower().strip()

        # –ò—â–µ–º wake word –∏ –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–µ–≥–æ
        for wake_word in self.wake_words:
            if wake_word in text_lower:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é wake word
                wake_pos = text_lower.find(wake_word)
                # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ wake word
                after_wake = text_lower[wake_pos + len(wake_word):].strip()

                # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
                command_words = after_wake.split()
                filtered_words = [w for w in command_words if w not in [
                    '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–º–æ–∂–µ—à—å', '—Å–∫–∞–∂–∏']]

                if filtered_words:
                    command = ' '.join(filtered_words)
                    return command if len(command) > 2 else None

        return None

    def _enter_command_mode(self):
        """–†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        try:
            # –ò–≥—Ä–∞–µ–º –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            self._play_activation_sound()

            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
            if hasattr(self.audio_manager, 'stop_continuous_recording'):
                self.audio_manager.stop_continuous_recording()
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞

            # –ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ, —á—Ç–æ –∏–¥—ë—Ç –∑–∞–ø–∏—Å—å –∫–æ–º–∞–Ω–¥—ã ‚Äî –∑–µ–ª—ë–Ω—ã–π
            try:
                robot = getattr(self.ai_orchestrator, "robot", None)
                if robot and hasattr(robot, "set_rgb_preset"):
                    robot.set_rgb_preset("green")
            except Exception as _:
                pass

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logging.info("üé§ –ó–∞–ø–∏—Å—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É...")

            if not self.audio_manager:
                return

            # –£–º–Ω–∞—è –∑–∞–ø–∏—Å—å —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –≥–æ–ª–æ—Å–∞
            audio_file = self.audio_manager.record_audio(
                duration_seconds=self.activation_timeout
            )

            if not audio_file:
                logging.info("ü§´ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É—Å–ª—ã—à–∞–Ω–∞")
                return

            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            command_text = self.speech_handler.transcribe_audio(audio_file)

            if command_text:
                logging.info(f"üë§ –ö–æ–º–∞–Ω–¥–∞: '{command_text}'")
                self._process_voice_command(command_text)
            else:
                logging.info("ü§´ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                Path(audio_file).unlink(missing_ok=True)
            except:
                pass

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∂–∏–º–∞ –∫–æ–º–∞–Ω–¥: {e}")
        finally:
            # –ì–∞—Å–∏–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é –∑–∞–ø–∏—Å–∏
            try:
                robot = getattr(self.ai_orchestrator, "robot", None)
                if robot and hasattr(robot, "set_rgb_preset"):
                    robot.set_rgb_preset("off")
            except Exception as _:
                pass

            # –í—Å–µ–≥–¥–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ wake word
            self._resume_wake_word_listening()

    def _process_voice_command(self, command_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ AI –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä"""
        try:
            if not self.ai_orchestrator:
                # Fallback - –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
                response_text = f"–ü–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É: {command_text}. –ù–æ AI –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω."
                self._speak_response(response_text)
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            logging.info("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ AI...")

            result = self.ai_orchestrator.smart_process_request(
                text=command_text
            )

            if result.get("success"):
                response_text = result.get("ai_response", "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

                # –û–∑–≤—É—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                self._speak_response(response_text)

                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                intent = result.get("intent", "unknown")
                logging.info(
                    f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ({intent}): '{response_text[:50]}...'")

            else:
                error_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É"
                self._speak_response(error_text)
                logging.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {result.get('error')}")

        except Exception as e:
            error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã"
            self._speak_response(error_text)
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

    def _speak_response(self, text):
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        try:
            if not self.speech_handler or not self.audio_manager:
                logging.warning("‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return

            logging.info(f"üîä –û–∑–≤—É—á–∏–≤–∞—é: '{text[:50]}...'")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            audio_file = self.speech_handler.text_to_speech(text)

            if audio_file:
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                success = self.audio_manager.play_audio(audio_file)
                if success:
                    logging.info("‚úÖ –û—Ç–≤–µ—Ç –æ–∑–≤—É—á–µ–Ω")
                else:
                    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç")
            else:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")

    def _play_activation_sound(self):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        try:
            # –ú–æ–∂–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logging.debug("üîî –ó–≤—É–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –∑–≤—É–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")

    def get_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            "wake_word_service": {
                "running": self.is_running,
                "listening": self.is_listening,
                "wake_words": self.wake_words,
                "sensitivity_threshold": self.sensitivity_threshold,
                "audio_manager_available": self.audio_manager is not None,
                "speech_handler_available": self.speech_handler is not None,
                "ai_orchestrator_connected": self.ai_orchestrator is not None
            }
        }

    def test_wake_word_detection(self, test_phrases):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è wake word"""
        results = []

        for phrase in test_phrases:
            detected = self._contains_wake_word(phrase.lower())
            results.append({
                "phrase": phrase,
                "detected": detected,
                "expected": any(wake in phrase.lower() for wake in self.wake_words)
            })

        return results

    def _resume_wake_word_listening(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è wake word –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            time.sleep(2)

            if self.is_running:
                self.is_listening = True
                # –¶–∏–∫–ª —Å–∞–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")

    def _process_audio_buffer(self, audio_files):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ wake word"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            if len(audio_files) < 2:  # –ú–∏–Ω–∏–º—É–º –æ–¥–∏–Ω chunk
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2-3 —Ñ–∞–π–ª–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            recent_files = audio_files[-3:] if len(
                audio_files) >= 3 else audio_files

            combined_file = f"/tmp/wake_combined_{int(time.time() * 1000)}.wav"

            if self._combine_audio_files(recent_files, combined_file):
                if self._check_audio_has_speech(combined_file):
                    text = self.speech_handler.transcribe_audio(
                        combined_file) if self.speech_handler else None

                    if text and self._contains_wake_word(text.lower()):
                        logging.info(f"üó£Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ wake word: '{text}'")

                        if self._wait_for_silence_after_wake_word():
                            self._handle_activation(text)

                Path(combined_file).unlink(missing_ok=True)

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä–∞: {e}")

    def _wait_for_silence_after_wake_word(self):
        """–ñ–¥–µ–º —Ç–∏—à–∏–Ω—É –ø–æ—Å–ª–µ –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–∏—è wake word (–º–∞–∫—Å–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞)"""
        try:
            import subprocess

            silence_threshold = 200  # –ü–æ—Ä–æ–≥ —Ç–∏—à–∏–Ω—ã (–Ω–∏–∂–µ - —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–∏—à–∏–Ω–æ–π)
            silence_duration = 0
            max_silence_wait = 1.0  # –ú–∞–∫—Å–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞ –æ–∂–∏–¥–∞–Ω–∏—è
            check_interval = 0.2   # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.2 —Å–µ–∫—É–Ω–¥—ã

            logging.debug("ü§´ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–∏—à–∏–Ω—É –ø–æ—Å–ª–µ wake word...")

            while silence_duration < max_silence_wait:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—Ä–µ–∑–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                temp_file = f"/tmp/silence_check_{int(time.time() * 1000)}.wav"

                cmd = [
                    'arecord',
                    '-D', f'plughw:{self.audio_manager.microphone_index},0',
                    '-r', str(self.audio_manager.sample_rate),
                    '-c', str(self.audio_manager.channels),
                    '-f', 'S16_LE',
                    '-d', str(check_interval),
                    temp_file
                ]

                try:
                    result = subprocess.run(
                        cmd, capture_output=True, timeout=0.5)

                    if result.returncode == 0 and Path(temp_file).exists():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞
                        if self._is_audio_silent(temp_file, silence_threshold):
                            silence_duration += check_interval
                            logging.debug(f"ü§´ –¢–∏—à–∏–Ω–∞ {silence_duration:.1f}s")
                        else:
                            # –ï—Å—Ç—å –∑–≤—É–∫ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Ä–µ—á—å
                            logging.debug("üó£Ô∏è –†–µ—á—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...")
                            Path(temp_file).unlink(missing_ok=True)
                            return False

                        Path(temp_file).unlink(missing_ok=True)
                    else:
                        Path(temp_file).unlink(missing_ok=True)
                        time.sleep(check_interval)
                        silence_duration += check_interval

                except subprocess.TimeoutExpired:
                    Path(temp_file).unlink(missing_ok=True)
                    silence_duration += check_interval
                except Exception as e:
                    Path(temp_file).unlink(missing_ok=True)
                    logging.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏—à–∏–Ω—ã: {e}")
                    return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ç–∏—à–∏–Ω–∞

            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –±—ã–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ç–∏—à–∏–Ω–∞
            logging.debug("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–∏—à–∏–Ω–∞ –ø–æ—Å–ª–µ wake word")
            return True

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ç–∏—à–∏–Ω—ã: {e}")
            return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ç–∏—à–∏–Ω–∞ –µ—Å—Ç—å

    def _combine_audio_files(self, audio_files, output_file):
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö WAV —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω"""
        try:
            import wave

            with wave.open(output_file, 'wb') as output_wav:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                with wave.open(audio_files[0], 'rb') as first_wav:
                    output_wav.setparams(first_wav.getparams())

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
                for audio_file in audio_files:
                    with wave.open(audio_file, 'rb') as input_wav:
                        output_wav.writeframes(
                            input_wav.readframes(input_wav.getnframes()))

            return True

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤: {e}")
            return False

    def _is_audio_silent(self, audio_file, threshold=200):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—É–¥–∏–æ —Ç–∏—à–∏–Ω–æ–π"""
        try:
            import wave
            import numpy as np

            with wave.open(audio_file, 'rb') as wf:
                frames = wf.readframes(wf.getnframes())
                audio_data = np.frombuffer(frames, dtype=np.int16)

                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
                volume = np.abs(audio_data).mean()

                is_silent = volume < threshold
                logging.debug(
                    f"üîä –£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞: {volume:.1f}, —Ç–∏—à–∏–Ω–∞: {is_silent}")

                return is_silent

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏—à–∏–Ω—ã: {e}")
            return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Ç–∏—à–∏–Ω–æ–π
