# robot/ai_agent/vision_analyzer.py

import json
import logging
from openai import OpenAI
import os
import cv2
import base64
from datetime import datetime
from pathlib import Path


class VisionAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∞
    –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞: YOLO –¥–µ—Ç–µ–∫—Ü–∏–∏ ‚Üí —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã, –Ω–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–π ‚Üí OpenAI Vision
    """

    def __init__(self, config, camera=None, ai_detector=None):
        self.config = config
        self.camera = camera
        self.ai_detector = ai_detector

        # OpenAI API –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ YOLO –Ω–∏—á–µ–≥–æ –Ω–µ –≤–∏–¥–∏—Ç
        self.api_key = os.getenv('OPENAI_API_KEY')
        self.client = None
        if self.api_key:
            self.client = OpenAI(api_key=self.api_key)
            logging.info("‚úÖ OpenAI Vision API –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è fallback")
        else:
            logging.warning(
                "‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ç–æ–ª—å–∫–æ YOLO –∞–Ω–∞–ª–∏–∑")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è GPT-4V
        self.vision_model = config.get('vision_model', 'gpt-4o-mini')
        self.max_tokens = config.get('vision_max_tokens', 300)

        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ YOLO
        self._init_description_templates()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if not self.ai_detector:
            logging.warning(
                "‚ö†Ô∏è SimpleAIDetector –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - –¥–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            logging.info(
                "‚úÖ VisionAnalyzer –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π SimpleAIDetector")

        if not self.camera:
            logging.warning("‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        else:
            logging.info("‚úÖ VisionAnalyzer –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–º–µ—Ä–µ")

        logging.info("üëÅÔ∏è VisionAnalyzer —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _init_description_templates(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤"""
        self.description_templates = {
            # –õ—é–¥–∏
            'person': [
                "–Ø –≤–∏–∂—É —á–µ–ª–æ–≤–µ–∫–∞ –≤ –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —á–µ–ª–æ–≤–µ–∫",
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫"
            ],
            'people': [
                "–Ø –≤–∏–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª—é–¥–∏",
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –ª—é–¥–µ–π"
            ],

            # –ñ–∏–≤–æ—Ç–Ω—ã–µ
            'cat': [
                "–Ø –≤–∏–∂—É –∫–æ—Ç–∞",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–æ—Ç",
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ—Ç"
            ],
            'dog': [
                "–Ø –≤–∏–∂—É —Å–æ–±–∞–∫—É",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–æ–±–∞–∫–∞",
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–æ–±–∞–∫–∞"
            ],

            # –ú–µ–±–µ–ª—å
            'chair': [
                "–Ø –≤–∏–∂—É —Å—Ç—É–ª",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å—Ç—É–ª"
            ],
            'sofa': [
                "–Ø –≤–∏–∂—É –¥–∏–≤–∞–Ω",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–∏–≤–∞–Ω"
            ],
            'bed': [
                "–Ø –≤–∏–∂—É –∫—Ä–æ–≤–∞—Ç—å",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫—Ä–æ–≤–∞—Ç—å"
            ],
            'table': [
                "–Ø –≤–∏–∂—É —Å—Ç–æ–ª",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å—Ç–æ–ª"
            ],

            # –¢–µ—Ö–Ω–∏–∫–∞
            'tv': [
                "–Ø –≤–∏–∂—É —Ç–µ–ª–µ–≤–∏–∑–æ—Ä",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ–ª–µ–≤–∏–∑–æ—Ä"
            ],
            'laptop': [
                "–Ø –≤–∏–∂—É –Ω–æ—É—Ç–±—É–∫",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–æ—É—Ç–±—É–∫"
            ],
            'cell phone': [
                "–Ø –≤–∏–∂—É —Ç–µ–ª–µ—Ñ–æ–Ω",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω"
            ],

            # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            'car': [
                "–Ø –≤–∏–∂—É –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–∞—à–∏–Ω–∞"
            ],
            'bicycle': [
                "–Ø –≤–∏–∂—É –≤–µ–ª–æ—Å–∏–ø–µ–¥",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–µ–ª–æ—Å–∏–ø–µ–¥"
            ],

            # –û–±—â–∏–µ –æ–±—ä–µ–∫—Ç—ã
            'bottle': [
                "–Ø –≤–∏–∂—É –±—É—Ç—ã–ª–∫—É",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±—É—Ç—ã–ª–∫–∞"
            ],
            'cup': [
                "–Ø –≤–∏–∂—É —á–∞—à–∫—É",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —á–∞—à–∫–∞"
            ],
            'book': [
                "–Ø –≤–∏–∂—É –∫–Ω–∏–≥—É",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–Ω–∏–≥–∞"
            ],

            # –ï–¥–∞
            'banana': [
                "–Ø –≤–∏–∂—É –±–∞–Ω–∞–Ω",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–∞–Ω–∞–Ω"
            ],
            'apple': [
                "–Ø –≤–∏–∂—É —è–±–ª–æ–∫–æ",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —è–±–ª–æ–∫–æ"
            ],

            # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            'default': [
                "–Ø –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ–±—ä–µ–∫—Ç",
                "–í –∫–∞–¥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç"
            ]
        }

    def capture_frame(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã"""
        if not self.camera:
            logging.error("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            return None

        try:
            frame = self.camera.get_frame()
            if frame is not None:
                logging.debug("üì∑ –ö–∞–¥—Ä –ø–æ–ª—É—á–µ–Ω —Å –∫–∞–º–µ—Ä—ã")
                return frame
            else:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã")
                return None
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–∞: {e}")
            return None

    def detect_objects_yolo(self, frame):
        """–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ YOLO"""
        if not self.ai_detector:
            logging.warning("‚ö†Ô∏è AI –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return []

        try:
            detections = self.ai_detector.detect_objects(frame)

            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç
            detected_objects = []
            for det in detections:
                detected_objects.append({
                    'class': det.get('class_name', 'unknown'),
                    'confidence': det.get('confidence', 0.0),
                    'bbox': det.get('bbox', [0, 0, 0, 0]),
                    'center': det.get('center', [0, 0])
                })

            logging.info(f"üîç YOLO –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ–±—ä–µ–∫—Ç–æ–≤: {len(detected_objects)}")
            for obj in detected_objects:
                logging.debug(f"   {obj['class']} ({obj['confidence']:.2f})")

            return detected_objects

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ YOLO –¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
            return []

    def generate_yolo_description(self, detected_objects):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ YOLO –¥–µ—Ç–µ–∫—Ü–∏–π —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏"""
        if not detected_objects:
            return None

        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ –∫–ª–∞—Å—Å–∞–º
            object_counts = {}
            high_confidence_objects = []

            for obj in detected_objects:
                class_name = obj['class'].lower()
                confidence = obj['confidence']

                # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Å —Ö–æ—Ä–æ—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
                if confidence > 0.5:
                    object_counts[class_name] = object_counts.get(
                        class_name, 0) + 1
                    if confidence > 0.7:
                        high_confidence_objects.append(
                            (class_name, confidence))

            if not object_counts:
                return None

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            description_parts = []

            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∏–±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            processed_classes = set()

            for class_name, confidence in sorted(high_confidence_objects, key=lambda x: x[1], reverse=True):
                if class_name in processed_classes:
                    continue

                count = object_counts[class_name]

                # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω
                if count > 1 and class_name == 'person':
                    template_key = 'people'
                else:
                    template_key = class_name

                templates = self.description_templates.get(
                    template_key, self.description_templates['default'])

                # –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–Ω–¥–æ–º –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
                template = templates[0]

                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
                if count > 1 and template_key != 'people':
                    if class_name in ['chair', 'table', 'bottle', 'cup', 'book']:
                        if '—Å—Ç—É–ª' in template:
                            template = template.replace(
                                '—Å—Ç—É–ª', f"{count} —Å—Ç—É–ª–∞")
                        elif '—Å—Ç–æ–ª' in template:
                            template = template.replace(
                                '—Å—Ç–æ–ª', f"{count} —Å—Ç–æ–ª–∞")
                        elif '–±—É—Ç—ã–ª–∫—É' in template:
                            template = template.replace(
                                '–±—É—Ç—ã–ª–∫—É', f"{count} –±—É—Ç—ã–ª–∫–∏")
                        elif '—á–∞—à–∫—É' in template:
                            template = template.replace(
                                '—á–∞—à–∫—É', f"{count} —á–∞—à–∫–∏")
                        elif '–∫–Ω–∏–≥—É' in template:
                            template = template.replace(
                                '–∫–Ω–∏–≥—É', f"{count} –∫–Ω–∏–≥–∏")
                        else:
                            template = f"–Ø –≤–∏–∂—É {count} –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–ª–∞—Å—Å–∞ {class_name}"
                    else:
                        template = f"–Ø –≤–∏–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤: {class_name}"

                description_parts.append(template)
                processed_classes.add(class_name)

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                if len(description_parts) >= 3:
                    break

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã –æ–±—â–∏–º —Å–ø–∏—Å–∫–æ–º –µ—Å–ª–∏ –µ—Å—Ç—å
            remaining_objects = [
                cls for cls in object_counts.keys() if cls not in processed_classes]
            if remaining_objects and len(description_parts) < 3:
                if len(remaining_objects) == 1:
                    description_parts.append(
                        f"–¢–∞–∫–∂–µ –≤–∏–∂—É {remaining_objects[0]}")
                else:
                    description_parts.append(
                        f"–¢–∞–∫–∂–µ –≤–∏–∂—É: {', '.join(remaining_objects[:2])}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            if len(description_parts) == 1:
                final_description = description_parts[0]
            elif len(description_parts) == 2:
                final_description = f"{description_parts[0]}. {description_parts[1]}"
            else:
                final_description = f"{description_parts[0]}. {description_parts[1]}. {description_parts[2]}"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            max_confidence = max([obj['confidence']
                                 for obj in detected_objects])
            if max_confidence < 0.7:
                final_description += ". –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å—Ä–µ–¥–Ω—è—è"

            logging.info(
                f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ YOLO –æ–ø–∏—Å–∞–Ω–∏–µ: '{final_description}'")
            return final_description

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ YOLO –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
            return None

    def describe_scene_with_openai(self, frame):
        """–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã —á–µ—Ä–µ–∑ OpenAI Vision API –∫–æ–≥–¥–∞ YOLO –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª"""
        if not self.client:
            return "–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ –ø–æ–∫–∞–∑–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∞ OpenAI Vision API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        try:
            logging.info(
                "üß† YOLO –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ç–æ –≤ OpenAI Vision...")

            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_base64 = self._encode_image_to_base64(frame)
            if not image_base64:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            messages = [
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": "–ú–æ–π —Ä–æ–±–æ—Ç —Å–º–æ—Ç—Ä–∏—Ç –∫–∞–º–µ—Ä–æ–π, –Ω–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ YOLO –Ω–∏—á–µ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª. –û–ø–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ - –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É, —Ü–≤–µ—Ç–∞, —Ñ–æ—Ä–º—ã, –ª—é–±—ã–µ –¥–µ—Ç–∞–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã. –û—Ç–≤–µ—Ç—å –∫–∞–∫ —Ä–æ–±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{image_base64}",
                                "detail": "low"
                            }
                        }
                    ]
                }
            ]

            response = self.client.chat.completions.create(
                model=self.vision_model,
                messages=messages,
                max_tokens=self.max_tokens,
                temperature=0.3
            )

            description = response.choices[0].message.content.strip()
            logging.info(f"‚úÖ OpenAI Vision –æ–ø–∏—Å–∞–Ω–∏–µ: '{description[:100]}...'")
            return description

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI Vision: {e}")
            return "–ù–µ –º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"

    def _encode_image_to_base64(self, frame):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–∞–¥—Ä–∞ –≤ base64 –¥–ª—è OpenAI"""
        try:
            # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
            height, width = frame.shape[:2]
            if width > 800:  # –£–º–µ–Ω—å—à–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
                scale = 800 / width
                new_width = 800
                new_height = int(height * scale)
                frame = cv2.resize(frame, (new_width, new_height))

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG
            encode_param = [int(cv2.IMWRITE_JPEG_QUALITY), 80]
            success, buffer = cv2.imencode('.jpg', frame, encode_param)

            if not success:
                return None

            # –í base64
            image_base64 = base64.b64encode(buffer).decode('utf-8')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            size_mb = len(image_base64) * 0.75 / 1024 / 1024
            if size_mb > 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                logging.warning(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–æ–µ: {size_mb:.1f}MB")
                return None

            return image_base64

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return None

    def analyze_current_view(self):
        """
        –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–∞
        –õ–æ–≥–∏–∫–∞: YOLO —Å–Ω–∞—á–∞–ª–∞ ‚Üí —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã, –Ω–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–π ‚Üí OpenAI
        """
        try:
            logging.info("üëÅÔ∏è –ù–∞—á–∏–Ω–∞—é —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–∞...")

            # 1. –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã
            frame = self.capture_frame()
            if frame is None:
                return {
                    "success": False,
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã"
                }

            # 2. –ü—Ä–æ–±—É–µ–º YOLO –¥–µ—Ç–µ–∫—Ü–∏—é
            detected_objects = self.detect_objects_yolo(frame)

            # 3. –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê: –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏ ‚Üí —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
            if detected_objects:
                yolo_description = self.generate_yolo_description(
                    detected_objects)

                if yolo_description:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç YOLO –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI
                    result = {
                        "success": True,
                        "description": yolo_description,
                        "detected_objects": detected_objects,
                        "objects_count": len(detected_objects),
                        "analysis_method": "yolo_templates",
                        "timestamp": datetime.now().isoformat(),
                        "openai_used": False
                    }

                    logging.info(
                        f"‚úÖ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ YOLO —à–∞–±–ª–æ–Ω—ã: {len(detected_objects)} –æ–±—ä–µ–∫—Ç–æ–≤")
                    return result

            # 4. –ï—Å–ª–∏ YOLO –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI
            logging.info(
                "üîÑ YOLO –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI Vision...")

            openai_description = self.describe_scene_with_openai(frame)

            result = {
                "success": True,
                "description": openai_description,
                "detected_objects": detected_objects,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                "objects_count": len(detected_objects),
                "analysis_method": "openai_vision",
                "timestamp": datetime.now().isoformat(),
                "openai_used": True
            }

            logging.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI Vision –∑–∞–≤–µ—Ä—à–µ–Ω")
            return result

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {
                "success": False,
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }

    def get_quick_scene_summary(self):
        """–ë—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞ –æ —Å—Ü–µ–Ω–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ YOLO"""
        try:
            frame = self.capture_frame()
            if frame is None:
                return {"error": "–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}

            detected_objects = self.detect_objects_yolo(frame)

            if detected_objects:
                # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
                object_counts = {}
                for obj in detected_objects:
                    if obj['confidence'] > 0.5:
                        class_name = obj['class']
                        object_counts[class_name] = object_counts.get(
                            class_name, 0) + 1

                if object_counts:
                    summary_parts = []
                    for obj_class, count in object_counts.items():
                        if count == 1:
                            summary_parts.append(obj_class)
                        else:
                            summary_parts.append(f"{obj_class} ({count})")

                    summary = f"–ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä: {', '.join(summary_parts)}"
                else:
                    summary = "–û–±—ä–µ–∫—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –Ω–æ —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é"
            else:
                summary = "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"

            return {
                "success": True,
                "summary": summary,
                "object_count": len(detected_objects),
                "method": "yolo_only"
            }

        except Exception as e:
            return {"error": str(e)}

    def test_vision_system(self):
        """–¢–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –∑—Ä–µ–Ω–∏—è"""
        results = {
            "camera_test": False,
            "yolo_test": False,
            "openai_test": False,
            "templates_test": False,
            "overall_test": False,
            "details": []
        }

        try:
            # 1. –¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã
            frame = self.capture_frame()
            if frame is not None:
                results["camera_test"] = True
                results["details"].append(
                    f"‚úÖ –ö–∞–º–µ—Ä–∞: –∫–∞–¥—Ä {frame.shape} –ø–æ–ª—É—á–µ–Ω")

                # 2. –¢–µ—Å—Ç YOLO
                if self.ai_detector:
                    detections = self.detect_objects_yolo(frame)
                    results["yolo_test"] = True
                    results["details"].append(
                        f"‚úÖ YOLO: {len(detections)} –¥–µ—Ç–µ–∫—Ü–∏–π")

                    # 3. –¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤
                    if detections:
                        template_desc = self.generate_yolo_description(
                            detections)
                        if template_desc:
                            results["templates_test"] = True
                            results["details"].append(
                                "‚úÖ –®–∞–±–ª–æ–Ω—ã: –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
                        else:
                            results["details"].append(
                                "‚ùå –®–∞–±–ª–æ–Ω—ã: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å")
                    else:
                        results["details"].append(
                            "‚ÑπÔ∏è –®–∞–±–ª–æ–Ω—ã: –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

                    # 4. –¢–µ—Å—Ç OpenAI (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                    if self.client:
                        try:
                            openai_desc = self.describe_scene_with_openai(
                                frame)
                            if openai_desc and len(openai_desc) > 10:
                                results["openai_test"] = True
                                results["details"].append(
                                    "‚úÖ OpenAI Vision: —Ä–∞–±–æ—Ç–∞–µ—Ç")
                            else:
                                results["details"].append(
                                    "‚ùå OpenAI Vision: –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
                        except Exception as e:
                            results["details"].append(f"‚ùå OpenAI Vision: {e}")
                    else:
                        results["details"].append(
                            "‚ö†Ô∏è OpenAI Vision: API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

                else:
                    results["details"].append("‚ùå YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            else:
                results["details"].append("‚ùå –ö–∞–º–µ—Ä–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä")

            # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            results["overall_test"] = results["camera_test"] and results["yolo_test"]

            passed = sum([results["camera_test"], results["yolo_test"],
                         results["templates_test"], results["openai_test"]])
            results["score"] = f"{passed}/4"

            logging.info(f"üß™ –¢–µ—Å—Ç —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑—Ä–µ–Ω–∏—è: {results['score']}")
            return results

        except Exception as e:
            results["details"].append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return results

    def get_status(self):
        """–°—Ç–∞—Ç—É—Å —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑—Ä–µ–Ω–∏—è"""
        return {
            "smart_vision_analyzer": {
                "initialized": True,
                "camera_connected": self.camera is not None,
                "yolo_detector_connected": self.ai_detector is not None,
                "openai_available": self.client is not None,
                "templates_loaded": len(self.description_templates) > 0,
                "vision_model": self.vision_model,
                "analysis_strategy": "yolo_first_then_openai"
            }
        }
