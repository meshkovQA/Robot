# robot/ai_agent/audio_manager.py
import wave
import threading
import time
import logging
import subprocess
from pathlib import Path


class AudioManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º –∏ –¥–∏–Ω–∞–º–∏–∫–∞–º–∏ –Ω–∞ Raspberry Pi"""

    def __init__(self, config=None):
        self.config = config or {}

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
        self.sample_rate = self.config.get('sample_rate', 48000)
        self.channels = self.config.get('channels', 1)

        # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        self.microphone_index = self.config.get('microphone_index', None)
        self.speaker_index = self.config.get('speaker_index', None)

        logging.info(
            f"AudioManager. –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω index: {self.microphone_index}")
        logging.info(
            f"AudioManager. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏–∫ index: {self.speaker_index}")

    def record_audio(self, duration_seconds=5, output_file=None):
        """–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ arecord (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ –¥–ª—è USB Audio)"""
        if output_file is None:
            output_file = f"data/temp_recording_{int(time.time())}.wav"

        Path(output_file).parent.mkdir(parents=True, exist_ok=True)

        try:
            logging.info(f"üé§ –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ {duration_seconds}—Å –≤ {output_file}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º arecord —Å plughw –¥–ª—è USB –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            cmd = [
                'arecord',
                '-D', f'plughw:{self.microphone_index},0',
                '-r', str(self.sample_rate),
                '-c', str(self.channels),
                '-f', 'S16_LE',
                '-d', str(duration_seconds),
                output_file
            ]

            result = subprocess.run(cmd, capture_output=True,)

            if result.returncode == 0:
                return output_file

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: {e}")
            return None

    def start_continuous_recording(self, callback=None):
        """–ù–∞—á–∞—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∑–∞–ø–∏—Å—å (–¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)"""
        if self.is_recording:
            logging.warning("–ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥–µ—Ç")
            return

        self.is_recording = True
        self.recording_thread = threading.Thread(
            target=self._continuous_recording_loop,
            args=(callback,)
        )
        self.recording_thread.daemon = True
        self.recording_thread.start()
        logging.info("üé§ –ù–∞—á–∞—Ç–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∑–∞–ø–∏—Å—å")

    def stop_continuous_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∑–∞–ø–∏—Å—å"""
        self.is_recording = False
        if self.recording_thread:
            self.recording_thread.join()
        logging.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∑–∞–ø–∏—Å—å")

    def _continuous_recording_loop(self, callback):
        """–¶–∏–∫–ª –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        if not self.audio or self.microphone_index is None:
            return

        try:
            stream = self.audio.open(
                format=self.format,
                channels=self.channels,
                rate=self.sample_rate,
                input=True,
                input_device_index=self.microphone_index,
                frames_per_buffer=self.chunk
            )

            while self.is_recording:
                try:
                    data = stream.read(self.chunk, exception_on_overflow=False)

                    # –ü—Ä–æ—Å—Ç–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞
                    import numpy as np
                    audio_data = np.frombuffer(data, dtype=np.int16)
                    volume = np.abs(audio_data).mean()

                    # –ï—Å–ª–∏ –≥—Ä–æ–º–∫–æ—Å—Ç—å –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ - –≤—ã–∑—ã–≤–∞–µ–º callback
                    if volume > 500 and callback:  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø–æ—Ä–æ–≥
                        callback(data, volume)

                except Exception as e:
                    if self.is_recording:
                        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∑–∞–ø–∏—Å–∏: {e}")
                    break

            stream.stop_stream()
            stream.close()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏: {e}")

    def play_audio(self, audio_file):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏–∫–∏"""
        if not audio_file or not Path(audio_file).exists():
            logging.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
            return False

        try:
            # –í—ã–±–∏—Ä–∞–µ–º –ø–ª–µ–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
            if audio_file.lower().endswith('.mp3'):
                # –î–ª—è MP3 –∏—Å–ø–æ–ª—å–∑—É–µ–º mpg123
                if self.speaker_index is not None:
                    cmd = f"mpg123 -a plughw:{self.speaker_index},0 {audio_file}"
                else:
                    cmd = f"mpg123 {audio_file}"
            else:
                # –î–ª—è WAV –∏—Å–ø–æ–ª—å–∑—É–µ–º aplay
                if self.speaker_index is not None:
                    cmd = f"aplay -D plughw:{self.speaker_index},0 {audio_file}"
                else:
                    cmd = f"aplay {audio_file}"

            logging.info(f"üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {audio_file}")
            result = subprocess.run(
                cmd, shell=True, capture_output=True, text=True)

            if result.returncode == 0:
                logging.info("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                return True
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {result.stderr}")
                return False

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
            return False

    def get_audio_devices_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"""
        if not self.audio:
            return {"error": "PyAudio –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}

        devices = {
            "microphones": [],
            "speakers": [],
            "selected_microphone": self.microphone_index,
            "selected_speaker": self.speaker_index
        }

        try:
            device_count = self.audio.get_device_count()
            for i in range(device_count):
                device_info = self.audio.get_device_info_by_index(i)

                device_data = {
                    "index": i,
                    "name": device_info['name'],
                    "max_input_channels": device_info['maxInputChannels'],
                    "max_output_channels": device_info['maxOutputChannels'],
                    "default_sample_rate": device_info['defaultSampleRate']
                }

                if device_info['maxInputChannels'] > 0:
                    devices["microphones"].append(device_data)

                if device_info['maxOutputChannels'] > 0:
                    devices["speakers"].append(device_data)

            return devices

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            return {"error": str(e)}

    def __del__(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.is_recording:
            self.stop_continuous_recording()

        if self.audio:
            self.audio.terminate()
