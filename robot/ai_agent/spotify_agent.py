# robot/ai_agent/spotify_agent.py
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
import time
import json
import requests
import subprocess
import os
import logging
import base64
from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib.parse import urlencode, urlparse, parse_qs


logger = logging.getLogger(__name__)


class SpotifyAgent:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Spotify –ø–æ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–æ–º–∞–Ω–¥–∞–º

    –ö–ª—é—á–∏ API –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∫–∞–∫ –¥–ª—è Yandex)
    –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–∑ JSON –∫–æ–Ω—Ñ–∏–≥–∞
    """

    def __init__(self, audio_manager=None, config: Dict[str, Any] = None):
        self.audio_manager = audio_manager
        self.config = config or {}

        # Spotify –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        spotify_config = (self.config.get("speech", {})
                          or {}).get("spotify", {}) or {}

        # –ö–ª—é—á–∏ API –¢–û–õ–¨–ö–û –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∫–∞–∫ –¥–ª—è Yandex)
        self.client_id = os.getenv('SPOTIFY_CLIENT_ID')
        self.client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')

        if not self.client_id or not self.client_secret:
            raise ValueError(
                "Spotify API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. "
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SPOTIFY_CLIENT_ID –∏ SPOTIFY_CLIENT_SECRET"
            )

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ JSON –∫–æ–Ω—Ñ–∏–≥–∞ (–∫–∞–∫ —É Yandex)
        self.scopes = spotify_config.get("scopes", [])
        self.redirect_uri = spotify_config.get(
            'redirect_uri', 'http://127.0.0.1:8888/callback')
        self.default_volume = spotify_config.get('default_volume', 50)
        self.search_limit = spotify_config.get('search_limit', 10)
        self.control_method = spotify_config.get(
            'control_method', 'auto')  # auto, playerctl, osascript
        self.preferred_device = spotify_config.get('preferred_device')

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞
        self.is_playing = False
        self.current_track = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        self.current_volume = self.default_volume
        self.access_token = None
        self.refresh_token = None
        self.token_expires_at = 0

        # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        self.token_file = Path("data/spotify_tokens.json")

        # API endpoints
        self.api_base = "https://api.spotify.com/v1"

        # –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_commands = {
            "–≤–∫–ª—é—á–∏ –º—É–∑—ã–∫—É": "play",
            "–≤—ã–∫–ª—é—á–∏ –º—É–∑—ã–∫—É": "pause",
            "–ø–æ—Å—Ç–∞–≤—å –Ω–∞ –ø–∞—É–∑—É": "pause",
            "–ø—Ä–æ–¥–æ–ª–∂–∏ –º—É–∑—ã–∫—É": "play",
            "—Å–ª–µ–¥—É—é—â–∞—è –ø–µ—Å–Ω—è": "next_track",
            "–ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø–µ—Å–Ω—è": "previous_track",
            "—á—Ç–æ –∏–≥—Ä–∞–µ—Ç": "current_track_info",
            "—Ç–∏—à–µ": "volume_down",
            "–≥—Ä–æ–º—á–µ": "volume_up",
            "–ø–æ—Å—Ç–∞–≤—å": "search_and_play"
        }

        # –ö–æ–º–∞–Ω–¥—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        configured_commands = spotify_config.get(
            'voice_commands', default_commands)
        self.voice_commands = {cmd: getattr(
            self, action) for cmd, action in configured_commands.items()}

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        self._load_tokens()

        logger.info("üéµ Spotify Agent initialized")

    def _load_tokens(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        try:
            if self.token_file.exists():
                with open(self.token_file, 'r') as f:
                    data = json.load(f)
                    self.access_token = data.get('access_token')
                    self.refresh_token = data.get('refresh_token')
                    self.token_expires_at = data.get('expires_at', 0)
                logger.info("‚úÖ Spotify —Ç–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã: {e}")

    def _save_tokens(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤"""
        try:
            self.token_file.parent.mkdir(parents=True, exist_ok=True)
            data = {
                'access_token': self.access_token,
                'refresh_token': self.refresh_token,
                'expires_at': self.token_expires_at
            }
            with open(self.token_file, 'w') as f:
                json.dump(data, f, indent=2)
            logger.info("‚úÖ Spotify —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã: {e}")

    def start_user_auth(self):
        """–û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è OAuth –∏ –ø–æ–π–º–∞—Ç—å –∫–æ–¥ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–µ"""
        auth_url = "https://accounts.spotify.com/authorize"
        params = {
            "client_id": self.client_id,
            "response_type": "code",
            "redirect_uri": self.redirect_uri,
            "scope": " ".join(self.scopes),
            "show_dialog": "true",
        }
        full_url = f"{auth_url}?{urlencode(params)}"
        print(f"–û—Ç–∫—Ä–æ–π URL –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Spotify:\n{full_url}")

        code_holder = {"code": None, "error": None}

        class Handler(BaseHTTPRequestHandler):
            def do_GET(self):
                qs = parse_qs(urlparse(self.path).query)
                code_holder["code"] = qs.get("code", [None])[0]
                code_holder["error"] = qs.get("error", [None])[0]
                self.send_response(200)
                self.send_header("Content-Type", "text/plain; charset=utf-8")
                self.end_headers()
                self.wfile.write(b"You can close this tab. Return to the app.")

            def log_message(self, *args, **kwargs):
                return  # —Ç–∏—à–∏–Ω–∞

        host, port = urlparse(self.redirect_uri).hostname, urlparse(
            self.redirect_uri).port
        httpd = HTTPServer((host, port), Handler)
        httpd.handle_request()  # –∂–¥—ë–º –æ–¥–∏–Ω –∑–∞—Ö–æ–¥

        if code_holder["error"]:
            raise RuntimeError(f"Spotify OAuth error: {code_holder['error']}")
        if not code_holder["code"]:
            raise RuntimeError("No authorization code received")

        self._exchange_code_for_token(code_holder["code"])
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

    def _exchange_code_for_token(self, code: str):
        token_url = "https://accounts.spotify.com/api/token"
        data = {
            "grant_type": "authorization_code",
            "code": code,
            "redirect_uri": self.redirect_uri,
            "client_id": self.client_id,
            "client_secret": self.client_secret,
        }
        r = requests.post(token_url, data=data)
        r.raise_for_status()
        td = r.json()
        self.access_token = td["access_token"]
        self.refresh_token = td.get("refresh_token", self.refresh_token)
        self.token_expires_at = time.time() + int(td.get("expires_in", 3600))
        self._save_tokens()

    def _refresh_user_token(self) -> bool:
        if not self.refresh_token:
            return False
        token_url = "https://accounts.spotify.com/api/token"
        data = {
            "grant_type": "refresh_token",
            "refresh_token": self.refresh_token,
            "client_id": self.client_id,
            "client_secret": self.client_secret,
        }
        r = requests.post(token_url, data=data)
        if r.status_code != 200:
            logging.error("Refresh token failed: %s %s", r.status_code, r.text)
            return False
        td = r.json()
        self.access_token = td["access_token"]
        self.token_expires_at = time.time() + int(td.get("expires_in", 3600))
        self._save_tokens()
        return True

    def _ensure_user_token(self) -> bool:
        if not self.access_token:
            return False
        if time.time() > self.token_expires_at - 60:
            return self._refresh_user_token()
        return True

    # ===== –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ Web API –æ—Ç –ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =====

    def _api(self, method: str, path: str, **kwargs):
        if not self._ensure_user_token():
            return False, "User token invalid or missing. Run start_user_auth()."
        headers = kwargs.pop("headers", {})
        headers["Authorization"] = f"Bearer {self.access_token}"
        url = f"https://api.spotify.com/v1{path}"
        resp = requests.request(method.upper(), url,
                                headers=headers, timeout=10, **kwargs)
        if 200 <= resp.status_code < 300:
            return True, (resp.json() if resp.content else None)
        return False, f"{resp.status_code}: {resp.text}"

    # ===== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –∏ –ø–ª–µ–µ—Ä–æ–º —á–µ—Ä–µ–∑ Web API =====

    def get_devices(self):
        ok, data = self._api("GET", "/me/player/devices")
        return data.get("devices", []) if ok and data else []

    def _pick_device(self):
        devices = self.get_devices()
        if not devices:
            return None
        if self.preferred_device:
            for d in devices:
                if self.preferred_device.lower() in d.get("name", "").lower():
                    return d
        for d in devices:
            if d.get("is_active"):
                return d
        return devices[0]

    def transfer_playback(self, device_id: str, play: bool = True):
        body = {"device_ids": [device_id], "play": play}
        ok, err = self._api("PUT", "/me/player", json=body)
        return ok

    def play_uri(self, uri: str, position_ms: int = 0) -> str:
        device = self._pick_device()
        if not device:
            return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ Spotify. –û—Ç–∫—Ä–æ–π Spotify-–∫–ª–∏–µ–Ω—Ç."
        self.transfer_playback(device["id"], play=True)
        payload = {"uris": [uri], "position_ms": int(position_ms)}
        ok, err = self._api("PUT", "/me/player/play", json=payload)
        if ok:
            self.is_playing = True
            return "–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É —Ç—Ä–µ–∫"
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫: {err}"

    def play_context(self, context_uri: str, position_ms: int = 0, offset: Optional[int] = None) -> str:
        device = self._pick_device()
        if not device:
            return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ Spotify."
        self.transfer_playback(device["id"], play=True)
        body = {"context_uri": context_uri, "position_ms": int(position_ms)}
        if offset is not None:
            body["offset"] = {"position": int(offset)}
        ok, err = self._api("PUT", "/me/player/play", json=body)
        self.is_playing = bool(ok)
        return "–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É" if ok else f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {err}"

    def _get_access_token(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ access token —á–µ—Ä–µ–∑ Client Credentials Flow"""
        try:
            auth_url = "https://accounts.spotify.com/api/token"

            headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
            }

            data = {
                'grant_type': 'client_credentials'
            }

            response = requests.post(
                auth_url,
                headers=headers,
                data=data,
                auth=(self.client_id, self.client_secret)
            )

            if response.status_code == 200:
                token_data = response.json()
                self.access_token = token_data['access_token']
                expires_in = token_data.get('expires_in', 3600)
                self.token_expires_at = time.time() + expires_in

                self._save_tokens()
                logger.info("‚úÖ Spotify access token –ø–æ–ª—É—á–µ–Ω")
                return True
            else:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Spotify: {e}")
            return False

    def _ensure_token(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        current_time = time.time()

        if not self.access_token or current_time >= self.token_expires_at - 60:
            return self._get_access_token()

        return True

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

    def play(self) -> str:
        try:
            ok, err = self._api("PUT", "/me/player/play", json={})
            if ok:
                self.is_playing = True
                return "–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞"
        except Exception:
            pass
        success, output = self._run_spotify_script("play")
        if success:
            self.is_playing = True
            return "–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ (fallback)"
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É: {output}"

    def pause(self) -> str:
        try:
            ok, err = self._api("PUT", "/me/player/pause")
            if ok:
                self.is_playing = False
                return "–ú—É–∑—ã–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É"
        except Exception:
            pass
        success, output = self._run_spotify_script("pause")
        if success:
            self.is_playing = False
            return "–ú—É–∑—ã–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É (fallback)"
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É: {output}"

    def next_track(self) -> str:
        try:
            ok, err = self._api("POST", "/me/player/next")
            if ok:
                return "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"
        except Exception:
            pass
        success, output = self._run_spotify_script("next")
        return "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ (fallback)" if success else f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–∫: {output}"

    def previous_track(self) -> str:
        try:
            ok, err = self._api("POST", "/me/player/previous")
            if ok:
                return "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫"
        except Exception:
            pass
        success, output = self._run_spotify_script("previous")
        return "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ (fallback)" if success else f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å: {output}"

    def set_volume(self, percent: int) -> str:
        percent = max(0, min(100, int(percent)))
        try:
            ok, err = self._api(
                "PUT", f"/me/player/volume?volume_percent={percent}")
            if ok:
                self.current_volume = percent
                return f"–ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {percent}%"
        except Exception:
            pass
        ok, out = self._run_spotify_script("set_volume", str(percent))
        if ok:
            self.current_volume = percent
            return f"–ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {percent}% (fallback)"
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å: {out}"

    def volume_up(self) -> str:
        """–£–≤–µ–ª–∏—á–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"""
        try:
            success, output = self._run_spotify_script("volume", "up")
            if success:
                self.current_volume = min(100, self.current_volume + 10)
                return f"–ì—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ {self.current_volume}%"
            else:
                return f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å: {output}"

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"

    def volume_down(self) -> str:
        """–£–º–µ–Ω—å—à–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"""
        try:
            success, output = self._run_spotify_script("volume", "down")
            if success:
                self.current_volume = max(0, self.current_volume - 10)
                return f"–ì—Ä–æ–º–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞ –¥–æ {self.current_volume}%"
            else:
                return f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–º–µ–Ω—å—à–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å: {output}"

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —É–º–µ–Ω—å—à–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"

    def current_track_info(self) -> str:
        try:
            ok, data = self._api("GET", "/me/player/currently-playing")
            if ok and data and data.get("item"):
                item = data["item"]
                name = item.get("name")
                artist = ", ".join(a["name"] for a in item.get("artists", []))
                is_playing = data.get("is_playing", False)
                return f"–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {name} ‚Äî {artist} ({'playing' if is_playing else 'paused'})"
        except Exception:
            pass
        success, output = self._run_spotify_script("status")
        return output if success else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ"

    def search_and_play(self, query: str) -> str:
        try:
            tracks = self.search_tracks(query, limit=1)
            if not tracks:
                return f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}"
            track = tracks[0]
            uri = track["uri"]  # spotify:track:...
            title = f"{track['name']} - {track['artists'][0]['name']}"
            msg = self.play_uri(uri)
            if msg.startswith("–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É"):
                return f"{msg}: {title}"
            return f"{msg}. –£–±–µ–¥–∏—Å—å, —á—Ç–æ Spotify-–∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ OAuth."
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞/–∑–∞–ø—É—Å–∫–∞: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É"

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    def _run_spotify_script(self, script_name: str, *args) -> Tuple[bool, str]:
        """–ó–∞–ø—É—Å–∫ bash-—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Spotify"""
        try:
            script_path = Path("scripts/spotify") / f"spotify_{script_name}.sh"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
            if not script_path.exists():
                logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
                return False, f"–°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"

            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            script_path.chmod(0o755)

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
            cmd = [str(script_path)] + list(args)
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=10
            )

            output = result.stdout.strip() if result.stdout else ""
            error = result.stderr.strip() if result.stderr else ""

            if result.returncode == 0:
                logger.info(
                    f"‚úÖ –°–∫—Ä–∏–ø—Ç {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {output}")
                return True, output
            else:
                logger.error(
                    f"‚ùå –°–∫—Ä–∏–ø—Ç {script_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {error}")
                return False, error

        except subprocess.TimeoutExpired:
            logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ {script_name}")
            return False, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ {script_name}: {e}")
            return False, str(e)

    def _get_current_track(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ"""
        try:
            result = subprocess.run(
                ["playerctl", "--player=spotify", "metadata",
                    "--format", "{{ title }} - {{ artist }}"],
                capture_output=True,
                text=True,
                timeout=5
            )

            if result.returncode == 0 and result.stdout.strip():
                return result.stdout.strip()

        except:
            pass

        return None

    def search_tracks(self, query: str, limit: int = 10) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ —á–µ—Ä–µ–∑ Spotify API"""
        try:
            params = {
                'q': query,
                'type': 'track',
                'limit': limit
            }

            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            url = f"{self.api_base}/search"

            if not self._ensure_token():
                return []

            headers = {
                'Authorization': f'Bearer {self.access_token}'
            }

            response = requests.get(url, headers=headers, params=params)

            if response.status_code == 200:
                data = response.json()
                tracks = data.get('tracks', {}).get('items', [])
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(tracks)}")
                return tracks
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
                return []

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤: {e}")
            return []

    def process_voice_command(self, text: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        text_lower = text.lower().strip()
        logger.info(f"üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: '{text}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for command, handler in self.voice_commands.items():
            if command in text_lower:
                if command == "–ø–æ—Å—Ç–∞–≤—å" and len(text_lower) > len(command):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                    query = text_lower.replace("–ø–æ—Å—Ç–∞–≤—å", "").strip()
                    return handler(query)
                else:
                    return handler()

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
        return f"–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {text}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {', '.join(self.voice_commands.keys())}"

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Spotify –∞–≥–µ–Ω—Ç–∞"""
        return {
            "spotify_agent": {
                "initialized": True,
                "client_id_configured": bool(self.client_id),
                "client_secret_configured": bool(self.client_secret),
                "access_token_valid": bool(self.access_token and time.time() < self.token_expires_at),
                "is_playing": self.is_playing,
                "current_volume": self.current_volume,
                "current_track": self.current_track,
                "available_commands": list(self.voice_commands.keys())
            }
        }

    def set_volume(self, percent: int) -> str:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å (0-100)"""
        percent = max(0, min(100, int(percent)))
        ok, out = self._run_spotify_script("set_volume", str(percent))
        if ok:
            self.current_volume = percent
            return f"–ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {percent}%"
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å: {out}"

    def duck(self, target_percent: int = 20) -> None:
        """–ú—è–≥–∫–æ –ø—Ä–∏–≥–ª—É—à–∏—Ç—å –º—É–∑—ã–∫—É (–±–µ–∑ –ª–æ–≥–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤)"""
        try:
            self.set_volume(target_percent)
        except Exception:
            pass

    def unduck(self, previous_percent: Optional[int] = None) -> None:
        """–í–µ—Ä–Ω—É—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"""
        try:
            self.set_volume(previous_percent or self.default_volume)
        except Exception:
            pass

    def test_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Spotify API"""
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
            results = self.search_tracks("test", limit=1)

            return {
                "success": True,
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Spotify API —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "search_results": len(results)
            }

        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "message": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Spotify API"
            }
