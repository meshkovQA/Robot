# api.py

from __future__ import annotations
import logging
import signal
import time
from datetime import datetime
from flask import Flask, Blueprint, jsonify, request, render_template,  Response, stream_template
from pathlib import Path

from .controller import RobotController
from .camera import USBCamera, CameraConfig, list_available_cameras
from .config import LOG_LEVEL, LOG_FMT, API_KEY, SPEED_MIN, SPEED_MAX

logging.basicConfig(level=LOG_LEVEL, format=LOG_FMT)
logger = logging.getLogger(__name__)


def create_app(controller: RobotController | None = None) -> Flask:
    app = Flask(__name__,
                template_folder='../templates',
                static_folder='../static')
    robot = controller or RobotController()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
    if camera is None:
        try:
            available_cameras = list_available_cameras()
            if available_cameras:
                camera_config = CameraConfig(
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–∞–º–µ—Ä—É
                    device_id=available_cameras[0],
                    width=640,
                    height=480,
                    fps=30,
                    auto_start=True
                )
                camera = USBCamera(camera_config)
                logger.info(
                    f"üé• –ö–∞–º–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: /dev/video{available_cameras[0]}")
            else:
                logger.warning("üé• USB –∫–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                camera = None
        except Exception as e:
            logger.error(f"üé• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã: {e}")
            camera = None

    # API Blueprint
    bp = Blueprint("api", __name__)

    # --------- —É—Ç–∏–ª–∏—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ ----------
    def ok(data=None, code=200):
        return jsonify({
            "success": True,
            "data": data or {},
            "timestamp": datetime.now().isoformat()
        }), code

    def err(msg, code=400):
        return jsonify({
            "success": False,
            "error": msg,
            "timestamp": datetime.now().isoformat()
        }), code

    # --------- –ø—Ä–æ—Å—Ç–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ----------
    @app.before_request
    def _auth():
        if API_KEY and request.path.startswith("/api/"):
            if request.headers.get("X-API-Key") != API_KEY:
                return err("unauthorized", 401)

    # --------- –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ----------
    @app.route("/")
    def index():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        return render_template("index.html")

    # --------- API –º–∞—Ä—à—Ä—É—Ç—ã –¥–≤–∏–∂–µ–Ω–∏—è ----------
    @bp.route("/move/forward", methods=["POST"])
    def move_forward():
        data = request.get_json() or {}
        speed = int(data.get("speed", 100))
        speed = max(SPEED_MIN, min(SPEED_MAX, speed))

        success = robot.move_forward(speed)
        return ok({
            "command": "move_forward",
            "speed": speed,
            "success": success,
            **robot.get_status()
        })

    @bp.route("/move/backward", methods=["POST"])
    def move_backward():
        data = request.get_json() or {}
        speed = int(data.get("speed", 100))
        speed = max(SPEED_MIN, min(SPEED_MAX, speed))

        success = robot.move_backward(speed)
        return ok({
            "command": "move_backward",
            "speed": speed,
            "success": success,
            **robot.get_status()
        })

    @bp.route("/turn/left", methods=["POST"])
    def turn_left():
        data = request.get_json() or {}
        speed = int(data.get("speed", 150))
        speed = max(SPEED_MIN, min(SPEED_MAX, speed))

        success = robot.tank_turn_left(speed)
        return ok({
            "command": "tank_turn_left",
            "speed": speed,
            "success": success,
            **robot.get_status()
        })

    @bp.route("/turn/right", methods=["POST"])
    def turn_right():
        data = request.get_json() or {}
        speed = int(data.get("speed", 150))
        speed = max(SPEED_MIN, min(SPEED_MAX, speed))

        success = robot.tank_turn_right(speed)
        return ok({
            "command": "tank_turn_right",
            "speed": speed,
            "success": success,
            **robot.get_status()
        })

    # --------- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ----------
    @bp.route("/move", methods=["POST"])
    def universal_move():
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–µ–º –∏ —Ä—É–ª–µ–º"""
        data = request.get_json() or {}
        speed = int(data.get("speed", 0))
        direction = int(data.get("direction", 0))  # 0=stop, 1=fwd, 2=bwd
        steering = int(data.get("steering", 90))   # 10-170, 90=center

        speed = max(SPEED_MIN, min(SPEED_MAX, speed))
        steering = max(10, min(170, steering))

        success = robot.move_with_steering(speed, direction, steering)
        return ok({
            "command": "universal_move",
            "speed": speed,
            "direction": direction,
            "steering": steering,
            "success": success,
            **robot.get_status()
        })

    @bp.route("/speed", methods=["POST"])
    def update_speed():
        data = request.get_json() or {}
        new_speed = int(data.get("speed", 0))
        new_speed = max(SPEED_MIN, min(SPEED_MAX, new_speed))

        success = robot.update_speed(new_speed)
        status = robot.get_status()

        return ok({
            "command": "update_speed",
            "new_speed": new_speed,
            "success": success,
            **status
        })

    @bp.route("/stop", methods=["POST"])
    def stop():
        success = robot.stop()
        return ok({
            "command": "stop",
            "success": success,
            **robot.get_status()
        })

    @bp.route("/emergency_stop", methods=["POST"])
    def emergency_stop():
        logger.warning("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê!")
        success = robot.stop()
        return ok({
            "command": "emergency_stop",
            "success": success,
            **robot.get_status()
        })

    # --------- API –º–∞—Ä—à—Ä—É—Ç—ã –∫–∞–º–µ—Ä—ã ----------

    @bp.route("/camera/status", methods=["GET"])
    def camera_status():
        """–°—Ç–∞—Ç—É—Å –∫–∞–º–µ—Ä—ã"""
        if not camera:
            return ok({
                "available": False,
                "error": "–ö–∞–º–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
            })

        return ok({
            "available": True,
            **camera.get_status()
        })

    @bp.route("/camera/photo", methods=["POST"])
    def take_photo():
        """–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"""
        if not camera:
            return err("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 404)

        data = request.get_json() or {}
        filename = data.get("filename")

        success, result = camera.take_photo(filename)

        if success:
            return ok({
                "command": "take_photo",
                "filepath": result,
                "filename": Path(result).name
            })
        else:
            return err(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ: {result}")

    @bp.route("/camera/recording/start", methods=["POST"])
    def start_recording():
        """–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ"""
        if not camera:
            return err("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 404)

        data = request.get_json() or {}
        filename = data.get("filename")
        duration = data.get("duration")  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        success, result = camera.start_recording(filename, duration)

        if success:
            return ok({
                "command": "start_recording",
                "filepath": result,
                "filename": Path(result).name,
                "duration_limit": duration
            })
        else:
            return err(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: {result}")

    @bp.route("/camera/recording/stop", methods=["POST"])
    def stop_recording():
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ"""
        if not camera:
            return err("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 404)

        success, result = camera.stop_recording()

        if success:
            return ok({
                "command": "stop_recording",
                "filepath": result,
                "filename": Path(result).name if result else ""
            })
        else:
            return err(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {result}")

    @bp.route("/camera/restart", methods=["POST"])
    def restart_camera():
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã"""
        if not camera:
            return err("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 404)

        success = camera.restart()

        if success:
            return ok({
                "command": "restart_camera",
                "status": "–ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞"
            })
        else:
            return err("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã")

    @bp.route("/camera/devices", methods=["GET"])
    def list_cameras():
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä"""
        try:
            available = list_available_cameras()
            return ok({
                "available_cameras": available,
                "count": len(available)
            })
        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä: {e}")

    # --------- –í–µ–±-—Å—Ç—Ä–∏–º –∫–∞–º–µ—Ä—ã ----------
    @app.route("/camera/stream")
    def camera_stream():
        """MJPEG —Å—Ç—Ä–∏–º –∫–∞–º–µ—Ä—ã"""
        if not camera or not camera.status.is_connected:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
            return Response(
                b'--frame\r\nContent-Type: text/plain\r\n\r\nCamera not available\r\n',
                mimetype='multipart/x-mixed-replace; boundary=frame'
            )

        def generate():
            while True:
                frame_data = camera.get_frame_jpeg()
                if frame_data:
                    yield (b'--frame\r\n'
                           b'Content-Type: image/jpeg\r\n\r\n' + frame_data + b'\r\n')
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–¥—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
                    yield (b'--frame\r\n'
                           b'Content-Type: text/plain\r\n\r\nNo frame available\r\n')

                time.sleep(1.0 / (camera.config.stream_fps if camera else 10))

        return Response(
            generate(),
            mimetype='multipart/x-mixed-replace; boundary=frame'
        )

    @bp.route("/camera/frame", methods=["GET"])
    def get_frame():
        """–ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –∫–∞–¥—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64"""
        if not camera:
            return err("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 404)

        frame_b64 = camera.get_frame_base64()

        if frame_b64:
            return ok({
                "frame": frame_b64,
                "format": "base64_jpeg",
                "timestamp": time.time()
            })
        else:
            return err("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤")

    # --------- –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ + —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ) ----------
    @bp.route("/status", methods=["GET"])
    def status():
        robot_status = robot.get_status()

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–º–µ—Ä—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if camera:
            robot_status["camera"] = camera.get_status()
        else:
            robot_status["camera"] = {"available": False}

        return ok(robot_status)

    @bp.route("/health", methods=["GET"])
    def health():
        status = robot.get_status()
        status.update({
            "i2c_connected": robot.bus is not None,
            "controller_active": True,
            "camera_available": camera is not None,
            "camera_connected": camera.status.is_connected if camera else False,
            "api_version": "2.1"  # –û–±–Ω–æ–≤–∏–ª–∏ –≤–µ—Ä—Å–∏—é –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–º–µ—Ä—ã
        })
        return ok(status)

    @bp.route("/sensors", methods=["GET"])
    def sensors():
        front, rear = robot.read_sensors()
        sensor_data = {
            "front_distance": front,
            "rear_distance": rear,
            "front_obstacle": front != 999 and front < 15,
            "rear_obstacle": rear != 999 and rear < 10,
            "sensors_working": front != 999 and rear != 999
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–µ—Ä–µ
        if camera:
            sensor_data["camera"] = {
                "connected": camera.status.is_connected,
                "fps": camera.status.fps_actual,
                "frame_count": camera.status.frame_count
            }

        return ok(sensor_data)

    # --------- —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ (–¥–ª—è —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) ----------
    @bp.route("/files/photos", methods=["GET"])
    def list_photos():
        """–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        if not camera:
            return err("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 404)

        try:
            photo_dir = Path(camera.config.save_path)
            if not photo_dir.exists():
                return ok({"files": [], "count": 0})

            photos = []
            for file in photo_dir.glob("*.jpg"):
                stat = file.stat()
                photos.append({
                    "filename": file.name,
                    "path": str(file),
                    "size": stat.st_size,
                    "created": stat.st_mtime,
                    "created_str": datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d %H:%M:%S")
                })

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
            photos.sort(key=lambda x: x["created"], reverse=True)

            return ok({
                "files": photos,
                "count": len(photos),
                "directory": str(photo_dir)
            })

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ñ–æ—Ç–æ: {e}")

    @bp.route("/files/videos", methods=["GET"])
    def list_videos():
        """–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ"""
        if not camera:
            return err("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 404)

        try:
            video_dir = Path(camera.config.video_path)
            if not video_dir.exists():
                return ok({"files": [], "count": 0})

            videos = []
            for file in video_dir.glob("*.mp4"):
                stat = file.stat()
                videos.append({
                    "filename": file.name,
                    "path": str(file),
                    "size": stat.st_size,
                    "created": stat.st_mtime,
                    "created_str": datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d %H:%M:%S")
                })

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
            videos.sort(key=lambda x: x["created"], reverse=True)

            return ok({
                "files": videos,
                "count": len(videos),
                "directory": str(video_dir)
            })

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤–∏–¥–µ–æ: {e}")

    @bp.route("/files/delete", methods=["POST"])
    def delete_file():
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        data = request.get_json() or {}
        filepath = data.get("filepath")

        if not filepath:
            return err("–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")

        try:
            file_path = Path(filepath)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
            if camera:
                allowed_dirs = [
                    Path(camera.config.save_path),
                    Path(camera.config.video_path)
                ]

                if not any(file_path.is_relative_to(dir) for dir in allowed_dirs):
                    return err("–§–∞–π–ª –≤–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", 403)

            if file_path.exists():
                file_path.unlink()
                return ok({
                    "command": "delete_file",
                    "filepath": str(file_path),
                    "status": "–§–∞–π–ª —É–¥–∞–ª–µ–Ω"
                })
            else:
                return err("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", 404)

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º API blueprint
    app.register_blueprint(bp, url_prefix="/api")

    # --------- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ----------
    @app.errorhandler(404)
    def not_found(error):
        if request.path.startswith("/api/"):
            return err("endpoint not found", 404)
        return render_template("index.html")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –¥–ª—è SPA

    @app.errorhandler(500)
    def internal_error(error):
        logger.error("Internal server error: %s", error)
        return err("internal server error", 500)

    # --------- –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ----------
    def _graceful_shutdown(*_):
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ —Å–∏–≥–Ω–∞–ª—É...")
        try:
            robot.shutdown()
            if camera:
                camera.stop()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: %s", e)
        finally:
            raise SystemExit(0)

    signal.signal(signal.SIGINT, _graceful_shutdown)
    signal.signal(signal.SIGTERM, _graceful_shutdown)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑–≤–Ω–µ
    app.robot = robot  # type: ignore[attr-defined]
    app.camera = camera  # type: ignore[attr-defined]

    logger.info("ü§ñ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞–º–µ—Ä—ã")
    return app
