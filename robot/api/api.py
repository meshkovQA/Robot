# robot/api/api.py

from __future__ import annotations
import logging
import signal
import time
from datetime import datetime
from flask import Flask, Blueprint, jsonify, request, render_template, Response
from flask_cors import CORS  # –î–û–ë–ê–í–õ–Ø–ï–ú CORS
from pathlib import Path

from robot.controller import RobotController
from robot.devices.camera import USBCamera, CameraConfig, list_available_cameras
from robot.devices.imu import MPU6500
from robot.heading_controller import HeadingHoldService
from robot.ai_integration import AIRobotController
from robot.ai_vision.home_ai_vision import HomeAIVision
from robot.api.ai_api_extensions import add_ai_routes
from robot.config import LOG_LEVEL, LOG_FMT, API_KEY, SPEED_MIN, SPEED_MAX, CAMERA_SAVE_PATH, CAMERA_VIDEO_PATH, CAMERA_AVAILABLE, CAMERA_CONFIG, LIGHT_INIT, STATIC_DIR, TEMPLATES_DIR
from datetime import datetime
from pathlib import Path

logging.basicConfig(level=LOG_LEVEL, format=LOG_FMT)
logger = logging.getLogger(__name__)


def create_app(controller: RobotController | None = None, camera_instance: USBCamera | None = None) -> Flask:
    app = Flask(__name__,
                template_folder=TEMPLATES_DIR,
                static_folder=STATIC_DIR)

    STATIC_ROOT = Path(app.static_folder).resolve()

    PHOTOS_DIR = Path(CAMERA_SAVE_PATH)
    VIDEOS_DIR = Path(CAMERA_VIDEO_PATH)
    PHOTOS_DIR.mkdir(parents=True, exist_ok=True)
    VIDEOS_DIR.mkdir(parents=True, exist_ok=True)

    # –í–ö–õ–Æ–ß–ê–ï–ú CORS –î–õ–Ø –í–°–ï–• –ú–ê–†–®–†–£–¢–û–í
    CORS(app, origins="*", methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"])

    robot = controller or RobotController()

    heading = None

    camera = camera_instance

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ª—ë–≥–∫–∏–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω
    if camera is None and not LIGHT_INIT:
        try:
            if CAMERA_AVAILABLE:
                # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤ –∫–æ–Ω—Ñ–∏–≥–µ device_id
                preferred_id = CAMERA_CONFIG.get("device_id", 0)
                available_cameras = list_available_cameras()

                device_id = None
                if preferred_id in available_cameras:
                    device_id = preferred_id
                elif available_cameras:
                    device_id = available_cameras[0]

                if device_id is not None:
                    camera_config = CameraConfig(
                        device_id=device_id,
                        width=CAMERA_CONFIG['width'],
                        height=CAMERA_CONFIG['height'],
                        fps=CAMERA_CONFIG['fps'],
                        quality=CAMERA_CONFIG['quality'],
                        stream_quality=CAMERA_CONFIG['stream_quality'],
                        stream_fps=CAMERA_CONFIG['stream_fps'],
                        brightness=CAMERA_CONFIG['brightness'],
                        contrast=CAMERA_CONFIG['contrast'],
                        saturation=CAMERA_CONFIG['saturation'],
                        save_path=CAMERA_CONFIG['save_path'],
                        video_path=CAMERA_CONFIG['video_path'],
                        auto_start=True
                    )
                    camera = USBCamera(camera_config)
                    logger.info(
                        f"üé• –ö–∞–º–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: /dev/video{device_id}")
                else:
                    logger.warning("üé• USB –∫–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    camera = None
            else:
                logger.warning("üé• OpenCV –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                camera = None
        except Exception as e:
            logger.error(f"üé• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã: {e}")
            camera = None

    # ==================== AI –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ====================

    # –°–æ–∑–¥–∞–µ–º AI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–æ–±–æ—Ç–∞
    ai_robot = AIRobotController(robot, camera)

    # –ó–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω–æ–µ AI –∑—Ä–µ–Ω–∏–µ –Ω–∞ –¥–æ–º–∞—à–Ω–µ–µ
    if camera and CAMERA_AVAILABLE:
        try:
            home_ai_vision = HomeAIVision(camera)
            ai_robot.ai_vision = home_ai_vision
            ai_robot._setup_ai_callbacks()  # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏
            logger.info("üè† –î–æ–º–∞—à–Ω–µ–µ AI –∑—Ä–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ AI: {e}")

    # API Blueprint
    bp = Blueprint("api", __name__)

    # ==================== –£–¢–ò–õ–ò–¢–´ –û–¢–í–ï–¢–û–í ====================

    def ok(data=None, code=200):
        response = jsonify({
            "success": True,
            "data": data or {},
            "timestamp": datetime.now().isoformat()
        })
        response.headers['Access-Control-Allow-Origin'] = '*'
        return response, code

    def err(msg, code=400):
        response = jsonify({
            "success": False,
            "error": msg,
            "timestamp": datetime.now().isoformat()
        })
        response.headers['Access-Control-Allow-Origin'] = '*'
        return response, code

    # ==================== –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ====================

    @app.before_request
    def _auth():
        if API_KEY and request.path.startswith("/api/"):
            if request.headers.get("X-API-Key") != API_KEY:
                return err("unauthorized", 401)

    # ==================== –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ====================

    @app.route("/")
    def index():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        return render_template("index.html")

    # ==================== API –ú–ê–†–®–†–£–¢–´ –î–í–ò–ñ–ï–ù–ò–Ø ====================

    @bp.route("/move/forward", methods=["POST"])
    def move_forward():
        data = request.get_json() or {}
        speed = int(data.get("speed", 100))
        speed = max(SPEED_MIN, min(SPEED_MAX, speed))

        success = robot.move_forward(speed)
        return ok({
            "command": "move_forward",
            "speed": speed,
            "success": success,
            **robot.get_status()
        })

    @bp.route("/move/backward", methods=["POST"])
    def move_backward():
        data = request.get_json() or {}
        speed = int(data.get("speed", 100))
        speed = max(SPEED_MIN, min(SPEED_MAX, speed))

        success = robot.move_backward(speed)
        return ok({
            "command": "move_backward",
            "speed": speed,
            "success": success,
            **robot.get_status()
        })

    @bp.route("/turn/left", methods=["POST"])
    def turn_left():
        data = request.get_json() or {}
        speed = int(data.get("speed", 150))
        speed = max(SPEED_MIN, min(SPEED_MAX, speed))

        success = robot.tank_turn_left(speed)
        return ok({
            "command": "tank_turn_left",
            "speed": speed,
            "success": success,
            **robot.get_status()
        })

    @bp.route("/turn/right", methods=["POST"])
    def turn_right():
        data = request.get_json() or {}
        speed = int(data.get("speed", 150))
        speed = max(SPEED_MIN, min(SPEED_MAX, speed))

        success = robot.tank_turn_right(speed)
        return ok({
            "command": "tank_turn_right",
            "speed": speed,
            "success": success,
            **robot.get_status()
        })

    @bp.route("/speed", methods=["POST"])
    def update_speed():
        data = request.get_json() or {}
        new_speed = int(data.get("speed", 0))
        new_speed = max(SPEED_MIN, min(SPEED_MAX, new_speed))

        success = robot.update_speed(new_speed)
        status = robot.get_status()

        return ok({
            "command": "update_speed",
            "new_speed": new_speed,
            "success": success,
            **status
        })

    @bp.route("/stop", methods=["POST"])
    def stop():
        success = robot.stop()
        return ok({
            "command": "stop",
            "success": success,
            **robot.get_status()
        })

    @bp.route("/emergency_stop", methods=["POST"])
    def emergency_stop():
        logger.warning("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê!")
        success = robot.stop()
        return ok({
            "command": "emergency_stop",
            "success": success,
            **robot.get_status()
        })

    # ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ú–ï–†–û–ô ====================

    @bp.route("/camera/pan", methods=["POST"])
    def camera_pan():
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–∞–º–µ—Ä—ã –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏"""
        data = request.get_json() or {}
        angle = data.get("angle")

        if angle is None:
            return err("–ù–µ —É–∫–∞–∑–∞–Ω —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞", 400)

        try:
            angle = int(angle)
        except (TypeError, ValueError):
            return err("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–≥–ª–∞", 400)

        success = robot.set_camera_pan(angle)
        pan_angle, tilt_angle = robot.get_camera_angles()

        return ok({
            "command": "set_camera_pan",
            "requested_angle": angle,
            "actual_angle": pan_angle,
            "success": success,
            "camera": {
                "pan_angle": pan_angle,
                "tilt_angle": tilt_angle
            }
        })

    @bp.route("/camera/tilt", methods=["POST"])
    def camera_tilt():
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞ –∫–∞–º–µ—Ä—ã –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏"""
        data = request.get_json() or {}
        angle = data.get("angle")

        if angle is None:
            return err("–ù–µ —É–∫–∞–∑–∞–Ω —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞", 400)

        try:
            angle = int(angle)
        except (TypeError, ValueError):
            return err("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–≥–ª–∞", 400)

        success = robot.set_camera_tilt(angle)
        pan_angle, tilt_angle = robot.get_camera_angles()

        return ok({
            "command": "set_camera_tilt",
            "requested_angle": angle,
            "actual_angle": tilt_angle,
            "success": success,
            "camera": {
                "pan_angle": pan_angle,
                "tilt_angle": tilt_angle
            }
        })

    @bp.route("/camera/angles", methods=["POST"])
    def camera_angles():
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–æ–∏—Ö —É–≥–ª–æ–≤ –∫–∞–º–µ—Ä—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
        data = request.get_json() or {}
        pan = data.get("pan")
        tilt = data.get("tilt")

        if pan is None or tilt is None:
            return err("–ù–µ —É–∫–∞–∑–∞–Ω—ã —É–≥–ª—ã pan –∏ tilt", 400)

        try:
            pan = int(pan)
            tilt = int(tilt)
        except (TypeError, ValueError):
            return err("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–≥–ª–æ–≤", 400)

        success = robot.set_camera_angles(pan, tilt)
        actual_pan, actual_tilt = robot.get_camera_angles()

        return ok({
            "command": "set_camera_angles",
            "requested": {"pan": pan, "tilt": tilt},
            "actual": {"pan": actual_pan, "tilt": actual_tilt},
            "success": success,
            "camera": {
                "pan_angle": actual_pan,
                "tilt_angle": actual_tilt
            }
        })

    @bp.route("/camera/center", methods=["POST"])
    def camera_center():
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
        success = robot.center_camera()
        pan_angle, tilt_angle = robot.get_camera_angles()

        return ok({
            "command": "center_camera",
            "success": success,
            "camera": {
                "pan_angle": pan_angle,
                "tilt_angle": tilt_angle
            }
        })

    @bp.route("/camera/pan/left", methods=["POST"])
    def camera_pan_left():
        """–ü–æ–≤–µ—Ä–Ω—É—Ç—å –∫–∞–º–µ—Ä—É –≤–ª–µ–≤–æ –Ω–∞ —à–∞–≥"""
        data = request.get_json() or {}
        step = data.get("step")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä

        if step is not None:
            try:
                step = int(step)
            except (TypeError, ValueError):
                return err("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à–∞–≥–∞", 400)

        success = robot.pan_left(step)
        pan_angle, tilt_angle = robot.get_camera_angles()

        return ok({
            "command": "pan_left",
            "step": step,
            "success": success,
            "camera": {
                "pan_angle": pan_angle,
                "tilt_angle": tilt_angle
            }
        })

    @bp.route("/camera/pan/right", methods=["POST"])
    def camera_pan_right():
        """–ü–æ–≤–µ—Ä–Ω—É—Ç—å –∫–∞–º–µ—Ä—É –≤–ø—Ä–∞–≤–æ –Ω–∞ —à–∞–≥"""
        data = request.get_json() or {}
        step = data.get("step")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä

        if step is not None:
            try:
                step = int(step)
            except (TypeError, ValueError):
                return err("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à–∞–≥–∞", 400)

        success = robot.pan_right(step)
        pan_angle, tilt_angle = robot.get_camera_angles()

        return ok({
            "command": "pan_right",
            "step": step,
            "success": success,
            "camera": {
                "pan_angle": pan_angle,
                "tilt_angle": tilt_angle
            }
        })

    @bp.route("/camera/tilt/up", methods=["POST"])
    def camera_tilt_up():
        """–ù–∞–∫–ª–æ–Ω–∏—Ç—å –∫–∞–º–µ—Ä—É –≤–≤–µ—Ä—Ö –Ω–∞ —à–∞–≥"""
        data = request.get_json() or {}
        step = data.get("step")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä

        if step is not None:
            try:
                step = int(step)
            except (TypeError, ValueError):
                return err("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à–∞–≥–∞", 400)

        success = robot.tilt_up(step)
        pan_angle, tilt_angle = robot.get_camera_angles()

        return ok({
            "command": "tilt_up",
            "step": step,
            "success": success,
            "camera": {
                "pan_angle": pan_angle,
                "tilt_angle": tilt_angle
            }
        })

    @bp.route("/camera/tilt/down", methods=["POST"])
    def camera_tilt_down():
        """–ù–∞–∫–ª–æ–Ω–∏—Ç—å –∫–∞–º–µ—Ä—É –≤–Ω–∏–∑ –Ω–∞ —à–∞–≥"""
        data = request.get_json() or {}
        step = data.get("step")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä

        if step is not None:
            try:
                step = int(step)
            except (TypeError, ValueError):
                return err("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à–∞–≥–∞", 400)

        success = robot.tilt_down(step)
        pan_angle, tilt_angle = robot.get_camera_angles()

        return ok({
            "command": "tilt_down",
            "step": step,
            "success": success,
            "camera": {
                "pan_angle": pan_angle,
                "tilt_angle": tilt_angle
            }
        })

    @bp.route("/camera/limits", methods=["GET"])
    def camera_limits():
        """–ü–æ–ª—É—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–≥–ª–æ–≤ –∫–∞–º–µ—Ä—ã"""
        limits = robot.get_camera_limits()
        current_pan, current_tilt = robot.get_camera_angles()

        return ok({
            "limits": limits,
            "current": {
                "pan_angle": current_pan,
                "tilt_angle": current_tilt
            }
        })

    @bp.route("/camera/position", methods=["GET"])
    def camera_position():
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã"""
        pan_angle, tilt_angle = robot.get_camera_angles()
        limits = robot.get_camera_limits()

        return ok({
            "camera": {
                "pan_angle": pan_angle,
                "tilt_angle": tilt_angle
            },
            "limits": limits,
            "is_centered": (pan_angle == limits["pan"]["default"] and
                            tilt_angle == limits["tilt"]["default"])
        })

    # ==================== –ö–ê–ú–ï–†–ê API ====================

    @bp.route("/camera/status", methods=["GET"])
    def camera_status():
        """–°—Ç–∞—Ç—É—Å –∫–∞–º–µ—Ä—ã"""
        if not camera:
            return ok({
                "available": False,
                "connected": False,
                "error": "–ö–∞–º–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
            })

        return ok({
            "available": True,
            **camera.get_status()
        })

    @bp.route("/camera/photo", methods=["POST"])
    def take_photo():
        """–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"""
        if not camera:
            return err("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 404)

        data = request.get_json() or {}
        filename = data.get("filename")

        success, result = camera.take_photo(filename)

        if success:
            return ok({
                "command": "take_photo",
                "filepath": result,
                "filename": Path(result).name
            })
        else:
            return err(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ: {result}")

    @bp.route("/camera/recording/start", methods=["POST"])
    def start_recording():
        """–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ"""
        if not camera:
            return err("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 404)

        data = request.get_json() or {}
        filename = data.get("filename")
        duration = data.get("duration")

        success, result = camera.start_recording(filename, duration)

        if success:
            return ok({
                "command": "start_recording",
                "filepath": result,
                "filename": Path(result).name,
                "duration_limit": duration
            })
        else:
            return err(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏: {result}")

    @bp.route("/camera/recording/stop", methods=["POST"])
    def stop_recording():
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ"""
        if not camera:
            return err("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 404)

        success, result = camera.stop_recording()

        if success:
            return ok({
                "command": "stop_recording",
                "filepath": result,
                "filename": Path(result).name if result else ""
            })
        else:
            return err(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {result}")

    @bp.route("/camera/restart", methods=["POST"])
    def restart_camera():
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã"""
        if not camera:
            return err("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 404)

        success = camera.restart()

        if success:
            return ok({
                "command": "restart_camera",
                "status": "–ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞"
            })
        else:
            return err("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã")

    @bp.route("/camera/devices", methods=["GET"])
    def list_cameras():
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä"""
        try:
            available = list_available_cameras()
            return ok({
                "available_cameras": available,
                "count": len(available)
            })
        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä: {e}")

    # ==================== –í–ò–î–ï–û–ü–û–¢–û–ö ====================

    @app.route("/camera/stream")
    def camera_stream():
        """MJPEG —Å—Ç—Ä–∏–º –∫–∞–º–µ—Ä—ã"""

        def generate():
            """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞–¥—Ä–æ–≤ –¥–ª—è MJPEG —Å—Ç—Ä–∏–º–∞"""
            # –ó–∞–≥–ª—É—à–∫–∞ - —á–µ—Ä–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –≤ JPEG
            import base64
            BLACK_JPEG_B64 = '/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCAABAAEDASIAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAv/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/8QAFQEBAQAAAAAAAAAAAAAAAAAAAAX/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxEAPwA/gA=='
            BLACK_JPEG = base64.b64decode(BLACK_JPEG_B64)

            logger.info("–ó–∞–ø—É—â–µ–Ω MJPEG –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä")

            while True:
                try:
                    frame_data = None

                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä –æ—Ç –∫–∞–º–µ—Ä—ã
                    if camera and camera.status.is_connected:
                        frame_data = camera.get_frame_jpeg()

                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–¥—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                    if not frame_data:
                        frame_data = BLACK_JPEG

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–¥—Ä –≤ MJPEG —Ñ–æ—Ä–º–∞—Ç–µ
                    yield (b'--frame\r\n'
                           b'Content-Type: image/jpeg\r\n'
                           b'Content-Length: ' +
                           str(len(frame_data)).encode() + b'\r\n'
                           b'\r\n' + frame_data + b'\r\n')

                    # –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º FPS
                    if camera and hasattr(camera.config, 'stream_fps'):
                        fps = max(camera.config.stream_fps, 5)
                    else:
                        fps = 10

                    time.sleep(1.0 / fps)

                except GeneratorExit:
                    logger.info("MJPEG –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ MJPEG –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ: {e}")
                    # –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
                    try:
                        yield (b'--frame\r\n'
                               b'Content-Type: image/jpeg\r\n'
                               b'Content-Length: ' +
                               str(len(BLACK_JPEG)).encode() + b'\r\n'
                               b'\r\n' + BLACK_JPEG + b'\r\n')
                    except:
                        break
                    time.sleep(1.0)

        response = Response(
            generate(),
            mimetype='multipart/x-mixed-replace; boundary=frame',
            headers={
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': '0',
                'Connection': 'close',
                'Access-Control-Allow-Origin': '*'
            }
        )
        return response

    @bp.route("/camera/frame", methods=["GET"])
    def get_frame():
        """–ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –∫–∞–¥—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64"""
        if not camera:
            return err("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 404)

        frame_b64 = camera.get_frame_base64()

        if frame_b64:
            return ok({
                "frame": frame_b64,
                "format": "base64_jpeg",
                "timestamp": time.time()
            })
        else:
            return err("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤")

    def _collect_files(dir_path: str | Path, exts: tuple[str, ...]) -> list[dict]:
        base = Path(dir_path)
        base.mkdir(parents=True, exist_ok=True)

        items = []
        for f in base.iterdir():
            if f.is_file() and f.suffix.lower() in exts:
                stat = f.stat()
                created = int(stat.st_mtime)
                # –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ /static
                rel = f.resolve().relative_to(STATIC_ROOT)
                url = f"/static/{rel.as_posix()}"
                items.append({
                    "filename": f.name,
                    "path": str(f.resolve()),     # –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    "url": url,                   # ‚Üê —Ñ—Ä–æ–Ω—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ
                    "size": stat.st_size,
                    "created": created,
                    "created_str": datetime.fromtimestamp(created).strftime("%Y-%m-%d %H:%M:%S"),
                })
        items.sort(key=lambda x: x["created"], reverse=True)
        return items

    @bp.route("/files/photos", methods=["GET"])
    def files_photos():
        try:
            files = _collect_files(PHOTOS_DIR, (".jpg", ".jpeg", ".png"))
            return ok({"files": files})
        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ: {e}", 500)

    @bp.route("/files/videos", methods=["GET"])
    def files_videos():
        try:
            files = _collect_files(
                VIDEOS_DIR, (".mp4", ".avi", ".mov", ".mkv"))
            return ok({"files": files})
        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ: {e}", 500)

    @bp.route("/files/delete", methods=["POST"])
    def files_delete():
        data = request.get_json() or {}
        filepath = data.get("filepath")
        if not filepath:
            return err("–ù–µ —É–∫–∞–∑–∞–Ω filepath", 400)

        try:
            target = Path(filepath).resolve()
            photos_root = Path(CAMERA_SAVE_PATH).resolve()
            videos_root = Path(CAMERA_VIDEO_PATH).resolve()

            # –∑–∞—â–∏—Ç–∞: —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–∞—à–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            if not (str(target).startswith(str(photos_root)) or str(target).startswith(str(videos_root))):
                return err("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å", 400)

            if target.exists() and target.is_file():
                target.unlink()
                return ok({"deleted": str(target.name)})
            else:
                return err("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", 404)
        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}", 500)

    # ==================== –°–¢–ê–¢–£–° –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ====================

    @bp.route("/status", methods=["GET"])
    def status():
        robot_status = robot.get_status()

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–º–µ—Ä—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if camera:
            robot_status["camera"] = camera.get_status()
        else:
            robot_status["camera"] = {"available": False, "connected": False}

        return ok(robot_status)

    @bp.route("/health", methods=["GET"])
    def health():
        status = robot.get_status()

        status.update({
            "i2c_connected": robot.bus is not None,
            "controller_active": True,
            "camera_available": camera is not None,
            "camera_connected": camera.status.is_connected if camera else False,
            "api_version": "2.1"
        })
        return ok(status)

    # ==================== –î–û–ë–ê–í–õ–Ø–ï–ú AI –ú–ê–†–®–†–£–¢–´ ====================

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ AI API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    add_ai_routes(bp, ai_robot)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º API blueprint
    app.register_blueprint(bp, url_prefix="/api")

    # ==================== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ====================

    @app.errorhandler(404)
    def not_found(error):
        if request.path.startswith("/api/"):
            return err("endpoint not found", 404)
        return render_template("index.html")

    @app.errorhandler(500)
    def internal_error(error):
        logger.error("Internal server error: %s", error)
        if request.path.startswith("/api/"):
            return err("internal server error", 500)
        return render_template("index.html")

    # ==================== GRACEFUL SHUTDOWN ====================

    def _graceful_shutdown(*_):
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ —Å–∏–≥–Ω–∞–ª—É...")
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AI —Å–∏—Å—Ç–µ–º—ã
            if ai_robot:
                ai_robot.stop_ai()

            if heading:
                heading.stop()

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–æ–±–æ—Ç
            if hasattr(ai_robot, 'robot'):
                ai_robot.robot.shutdown()
            else:
                robot.shutdown()

            if camera:
                camera.stop()

        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: %s", e)
        finally:
            raise SystemExit(0)

    signal.signal(signal.SIGINT, _graceful_shutdown)
    signal.signal(signal.SIGTERM, _graceful_shutdown)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑–≤–Ω–µ
    app.robot = ai_robot.robot if ai_robot else robot
    app.ai_robot = ai_robot
    app.camera = camera

    logger.info("ü§ñüß† Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AI –∏ –∫–∞–º–µ—Ä—ã")
    return app
