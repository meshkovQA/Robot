import json
import logging
import time
from datetime import datetime
from pathlib import Path
from flask import Blueprint, request, jsonify

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
try:
    from robot.ai_orchestrator import AIOrchestrater
    AI_AVAILABLE = True
    logging.info("‚úÖ AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError as e:
    AI_AVAILABLE = False
    logging.warning(f"‚ö†Ô∏è AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    AIOrchestrater = None


def create_ai_blueprint(robot_controller=None, camera=None, ai_detector=None):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ Blueprint –¥–ª—è AI —Ñ—É–Ω–∫—Ü–∏–π —Ä–æ–±–æ—Ç–∞

    Args:
        robot_controller: –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–æ–±–æ—Ç–∞
        camera: –û–±—ä–µ–∫—Ç –∫–∞–º–µ—Ä—ã 
        ai_detector: SimpleAIDetector –¥–ª—è YOLO

    Returns:
        Blueprint: Flask blueprint —Å AI endpoints
    """
    bp = Blueprint('ai_api', __name__, url_prefix='/api/ai')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    ai_orchestrator = None
    if AI_AVAILABLE:
        try:
            ai_orchestrator = AIOrchestrater(
                camera=camera,
                robot_controller=robot_controller,
                ai_detector=ai_detector
            )
            logging.info("üß† AI –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è API")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            ai_orchestrator = None

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    def ok(data, message=None):
        """–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        response = {"success": True, "data": data}
        if message:
            response["message"] = message
        return jsonify(response)

    def err(error_message, status_code=400):
        """–û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π"""
        return jsonify({
            "success": False,
            "error": error_message,
            "timestamp": datetime.now().isoformat()
        }), status_code

    def require_ai():
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI"""
        def decorator(func):
            def wrapper(*args, **kwargs):
                if not AI_AVAILABLE:
                    return err("AI –º–æ–¥—É–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã", 503)
                if not ai_orchestrator:
                    return err("AI —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", 503)
                return func(*args, **kwargs)
            wrapper.__name__ = func.__name__
            return wrapper
        return decorator

    # ==================== –û–°–ù–û–í–ù–´–ï AI ENDPOINTS ====================

    @bp.route('/status', methods=['GET'])
    def ai_status():
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI —Å–∏—Å—Ç–µ–º—ã"""
        try:
            base_status = {
                "ai_available": AI_AVAILABLE,
                "ai_initialized": ai_orchestrator is not None,
                "timestamp": datetime.now().isoformat()
            }

            if ai_orchestrator:
                ai_status_data = ai_orchestrator.get_status()
                base_status.update(ai_status_data)
            else:
                base_status.update({
                    "reason": "AI —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
                    "components": {
                        "speech": False,
                        "vision": False,
                        "audio_hardware": False
                    }
                })

            return ok(base_status)

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ AI: {e}", 500)

    @bp.route('/smart_chat', methods=['POST'])
    @require_ai()
    def smart_chat():
        """
        –£–º–Ω—ã–π —á–∞—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–π

        Body:
        {
            "text": "–ß—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å?",
            "include_context": false
        }
        """
        try:
            data = request.get_json() or {}
            text_message = data.get('text')

            if not text_message:
                return err("–ü–æ–ª–µ 'text' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —É–º–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
            result = ai_orchestrator.smart_process_request(text=text_message)

            if result.get("success"):
                return ok(result)
            else:
                return err(result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ AI"))

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —á–∞—Ç–∞: {e}")
            return err(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}", 500)

    @bp.route('/voice_chat', methods=['POST'])
    @require_ai()
    def voice_chat():
        """
        –ü–æ–ª–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç: –º–∏–∫—Ä–æ—Ñ–æ–Ω ‚Üí AI ‚Üí –¥–∏–Ω–∞–º–∏–∫–∏

        Body:
        {
            "duration": 5,
            "use_voice_detection": false
        }
        """
        try:
            data = request.get_json() or {}
            duration = data.get('duration', 5)
            use_voice_detection = data.get('use_voice_detection', False)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if not isinstance(duration, (int, float)) or duration < 1 or duration > 30:
                return err("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 30 —Å–µ–∫—É–Ω–¥")

            logging.info(f"üé§ –ù–∞—á–∏–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç ({duration}—Å)")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Ü–∏–∫–ª
            if use_voice_detection:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –∑–∞–ø–∏—Å—å —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –≥–æ–ª–æ—Å–∞
                if hasattr(ai_orchestrator, 'speech') and ai_orchestrator.speech:
                    result = ai_orchestrator.speech.full_voice_interaction(
                        recording_duration=duration,
                        use_voice_detection=True
                    )
                else:
                    return err("Speech Handler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                # –û–±—ã—á–Ω–∞—è –∑–∞–ø–∏—Å—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                result = ai_orchestrator.voice_chat(
                    recording_duration=duration)

            if result.get("success"):
                return ok(result)
            else:
                return err(result.get("error", "–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞"))

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞: {e}")
            return err(f"–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}", 500)

    @bp.route('/describe', methods=['GET'])
    @require_ai()
    def describe_scene():
        """–û–ø–∏—Å–∞—Ç—å —á—Ç–æ –≤–∏–¥–∏—Ç —Ä–æ–±–æ—Ç —á–µ—Ä–µ–∑ –∫–∞–º–µ—Ä—É"""
        try:
            result = ai_orchestrator.describe_scene()

            if result.get("success"):
                return ok(result)
            else:
                return err(result.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–∏—Å–∞—Ç—å —Å—Ü–µ–Ω—É"))

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω—ã: {e}")
            return err(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", 500)

    @bp.route('/scene_summary', methods=['GET'])
    @require_ai()
    def scene_summary():
        """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –æ —Ç–æ–º —á—Ç–æ –≤–∏–¥–∏—Ç —Ä–æ–±–æ—Ç"""
        try:
            if not (ai_orchestrator.vision):
                return err("Vision —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")

            result = ai_orchestrator.vision.get_scene_summary()

            if result.get("success"):
                return ok(result)
            else:
                return err(result.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É"))

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}", 500)

    # ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï ====================

    @bp.route('/config', methods=['GET'])
    @require_ai()
    def get_config():
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI"""
        try:
            config = ai_orchestrator.config

            # –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            safe_config = config.copy()
            if 'openai_api_key' in safe_config:
                key = safe_config['openai_api_key']
                safe_config['openai_api_key'] = f"{key[:8]}***" if key else None

            return ok(safe_config)

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", 500)

    @bp.route('/config', methods=['POST'])
    @require_ai()
    def update_config():
        """
        –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI

        Body:
        {
            "speech_enabled": true,
            "vision_enabled": true,
            "voice": "alloy",
            "temperature": 0.7
        }
        """
        try:
            data = request.get_json() or {}

            if not data:
                return err("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            result = ai_orchestrator.update_config(data)

            if result.get("success"):
                return ok(result, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                return err(result.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"))

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", 500)

    # ==================== –ê–£–î–ò–û –°–ò–°–¢–ï–ú–ê ====================

    @bp.route('/audio/devices', methods=['GET'])
    @require_ai()
    def audio_devices():
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            if not (ai_orchestrator.speech and ai_orchestrator.speech.audio_manager):
                return err("–ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            devices = ai_orchestrator.speech.audio_manager.get_audio_devices_info()

            if devices.get("error"):
                return err(devices["error"])
            else:
                return ok(devices)

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}", 500)

    @bp.route('/audio/test', methods=['POST'])
    @require_ai()
    def audio_test():
        """–¢–µ—Å—Ç –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if not (ai_orchestrator.speech and ai_orchestrator.speech.audio_manager):
                return err("–ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            test_results = ai_orchestrator.speech.audio_manager.test_audio_system()
            return ok(test_results)

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ: {e}", 500)

    @bp.route('/audio/record', methods=['POST'])
    @require_ai()
    def record_audio():
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞

        Body:
        {
            "duration": 5,
            "transcribe": true
        }
        """
        try:
            if not (ai_orchestrator.speech and ai_orchestrator.speech.audio_manager):
                return err("–ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            data = request.get_json() or {}
            duration = data.get('duration', 5)
            transcribe = data.get('transcribe', False)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ
            audio_file = ai_orchestrator.speech.audio_manager.record_audio(
                duration)

            if not audio_file:
                return err("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ")

            result = {
                "audio_file": audio_file,
                "duration": duration,
                "file_size": Path(audio_file).stat().st_size
            }

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
            if transcribe:
                text = ai_orchestrator.speech.transcribe_audio(audio_file)
                result["transcribed_text"] = text

            return ok(result)

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: {e}", 500)

    @bp.route('/audio/speak', methods=['POST'])
    @require_ai()
    def speak_text():
        """
        –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ

        Body:
        {
            "text": "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç",
            "voice": "alloy",
            "play": true
        }
        """
        try:
            if not ai_orchestrator.speech:
                return err("Speech —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            data = request.get_json() or {}
            text = data.get('text')
            voice = data.get('voice')
            play = data.get('play', True)

            if not text:
                return err("–ü–æ–ª–µ 'text' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            audio_file = ai_orchestrator.speech.text_to_speech(text, voice)

            if not audio_file:
                return err("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª")

            result = {
                "audio_file": audio_file,
                "text": text,
                "voice": voice or ai_orchestrator.speech.tts_voice,
                "file_size": Path(audio_file).stat().st_size
            }

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
            if play and ai_orchestrator.speech.audio_manager:
                play_success = ai_orchestrator.speech.audio_manager.play_audio(
                    audio_file)
                result["played"] = play_success

            return ok(result)

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}", 500)

    @bp.route('/voices', methods=['GET'])
    @require_ai()
    def get_voices():
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è TTS"""
        try:
            if not ai_orchestrator.speech:
                return err("Speech —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            voices = ai_orchestrator.speech.get_available_voices()
            return ok(voices)

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {e}", 500)

    # ==================== –ò–°–¢–û–†–ò–Ø –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================

    @bp.route('/conversations', methods=['GET'])
    @require_ai()
    def get_conversations():
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            history = ai_orchestrator.get_conversation_history()
            return ok(history)

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}", 500)

    @bp.route('/conversations/stats', methods=['GET'])
    @require_ai()
    def conversation_stats():
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            if not ai_orchestrator.speech:
                return err("Speech —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            stats = ai_orchestrator.speech.get_conversation_stats()
            return ok(stats)

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", 500)

    @bp.route('/conversations/clear', methods=['POST'])
    @require_ai()
    def clear_conversations():
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            result = ai_orchestrator.clear_conversation_history()

            if result.get("success"):
                return ok(result, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –æ—á–∏—â–µ–Ω–∞")
            else:
                return err(result.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"))

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}", 500)

    @bp.route('/conversations/export', methods=['POST'])
    @require_ai()
    def export_conversations():
        """
        –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤

        Body:
        {
            "format": "json"  // "json" –∏–ª–∏ "txt"
        }
        """
        try:
            if not ai_orchestrator.speech:
                return err("Speech —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            data = request.get_json() or {}
            format_type = data.get('format', 'json')

            result = ai_orchestrator.speech.export_conversations(format_type)

            if result.get("success"):
                return ok(result)
            else:
                return err(result.get("error", "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"))

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", 500)

    # ==================== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ====================

    @bp.route('/test/full', methods=['POST'])
    @require_ai()
    def full_system_test():
        """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç AI —Å–∏—Å—Ç–µ–º—ã"""
        try:
            results = {
                "speech_test": None,
                "vision_test": None,
                "overall_success": False,
                "timestamp": datetime.now().isoformat()
            }

            # –¢–µ—Å—Ç —Ä–µ—á–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            if ai_orchestrator.speech:
                try:
                    speech_results = ai_orchestrator.speech.test_speech_system()
                    results["speech_test"] = speech_results
                except Exception as e:
                    results["speech_test"] = {"error": str(e)}

            # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∑—Ä–µ–Ω–∏—è
            if ai_orchestrator.vision:
                try:
                    vision_results = ai_orchestrator.vision.test_vision_system()
                    results["vision_test"] = vision_results
                except Exception as e:
                    results["vision_test"] = {"error": str(e)}

            # –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            speech_ok = results["speech_test"] and results["speech_test"].get(
                "overall_success", False)
            vision_ok = results["vision_test"] and results["vision_test"].get(
                "overall_success", False)

            # –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            results["overall_success"] = speech_ok or vision_ok
            results["systems_working"] = {
                "speech": speech_ok,
                "vision": vision_ok
            }

            return ok(results)

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", 500)

    @bp.route('/test/quick', methods=['GET'])
    @require_ai()
    def quick_test():
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            test_results = {
                "ai_orchestrator": ai_orchestrator is not None,
                "speech_handler": ai_orchestrator.speech is not None if ai_orchestrator else False,
                "vision_analyzer": ai_orchestrator.vision is not None if ai_orchestrator else False,
                "audio_manager": (
                    ai_orchestrator.speech.audio_manager is not None
                    if ai_orchestrator and ai_orchestrator.speech else False
                ),
                "camera_connected": camera is not None,
                "ai_detector_connected": ai_detector is not None,
                "timestamp": datetime.now().isoformat()
            }

            # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            working_components = sum(
                test_results[key] for key in test_results if isinstance(test_results[key], bool))
            total_components = 6

            test_results["score"] = f"{working_components}/{total_components}"
            # –ú–∏–Ω–∏–º—É–º –ø–æ–ª–æ–≤–∏–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            test_results["success"] = working_components >= 3

            return ok(test_results)

        except Exception as e:
            return err(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}", 500)

    # ==================== –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï ENDPOINTS ====================

    @bp.route('/info', methods=['GET'])
    def ai_info():
        """–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ AI —Å–∏—Å—Ç–µ–º–µ"""
        return ok({
            "ai_system": "Robot AI Assistant",
            "version": "1.0.0",
            "components": {
                "speech": "OpenAI Whisper + GPT + TTS",
                "vision": "YOLO8 + GPT-4V",
                "orchestrator": "Smart Intent Router"
            },
            "capabilities": [
                "–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
                "–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ü–µ–Ω—ã",
                "–£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏",
                "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–∞—Ç—á–∏–∫–∞–º–∏ —Ä–æ–±–æ—Ç–∞"
            ],
            "ai_available": AI_AVAILABLE,
            "timestamp": datetime.now().isoformat()
        })

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º blueprint
    return bp
