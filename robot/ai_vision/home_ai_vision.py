# robot/ai_vision/home_ai_vision.py
"""
Home AI Vision - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ —Ä–æ–±–æ—Ç–∞.
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –¥–æ–º–∞—à–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã –∏ —Å–∏—Ç—É–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–û–õ–¨–ö–û
robot/ai_vision/home_mapping.py –±–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π.
"""

from __future__ import annotations
from typing import List, Dict, Optional
import time
import logging
import numpy as np
import cv2

from robot.ai_vision.ai_vision import (
    AIVisionProcessor, DetectedObject, VisionState
)

# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –∏–∑ —Ç–≤–æ–µ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
try:
    from robot.ai_vision.home_mapping import (
        get_home_object_name,
        is_important_for_home,
        map_to_russian,
        RUSSIAN_NAMES,           # –º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        guess_room_by_object_id  # –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–ª—è room_context (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    )
    MAPPING_AVAILABLE = True
except Exception as e:
    # –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –¥–æ–º–∞—à–Ω–µ–π –ª–æ–≥–∏–∫–∏
    MAPPING_AVAILABLE = False

logger = logging.getLogger(__name__)


class HomeAIVision(AIVisionProcessor):
    """–î–æ–º–∞—à–Ω–µ–µ AI-–∑—Ä–µ–Ω–∏–µ, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã/–¥–æ–º–∞."""

    def __init__(self, camera=None):
        super().__init__(camera)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞
        self.home_mode = MAPPING_AVAILABLE
        # EN –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –æ–≤–µ—Ä–ª–µ—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ (–±–µ–∑ ????)
        self.use_russian_names = False

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.home_object_history: Dict[str, List[Dict]] = {}
        self.room_context: str = "unknown"
        self.pet_detected = False
        self.owner_present = False

        logger.info("üè† HomeAIVision initialized (mapping=%s)",
                    MAPPING_AVAILABLE)

    # ---- –ó–ê–ì–†–£–ó–ö–ê –î–ï–¢–ï–ö–¢–û–†–û–í (—Ä–æ–¥–∏—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é) ----
    def _init_detectors(self):
        super()._init_detectors()
        if not MAPPING_AVAILABLE:
            logger.warning(
                "Home mapping not available ‚Äî using generic detectors only")
            self.home_mode = False

    # ---- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï: –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–õ–¨–ö–û home_mapping ----
    def _is_home_relevant(self, coco_class_id: int) -> bool:
        """–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –¥–æ–º–∞ ‚Äî —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ home_mapping."""
        if not MAPPING_AVAILABLE:
            return False
        return is_important_for_home(coco_class_id)

    def _get_home_object_name(self, coco_class_id: int) -> Optional[str]:
        """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ EN-–∏–º—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ‚Äî —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ home_mapping."""
        if not MAPPING_AVAILABLE:
            return None
        return get_home_object_name(coco_class_id, "")

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —Å –º—É–ª—å—Ç–∏-–º–æ–¥–µ–ª—å—é, NMS –∏ ¬´–¥–æ–º–∞—à–Ω–∏–º¬ª —Ñ–∏–ª—å—Ç—Ä–æ–º
    def _detect_with_yolo(self, frame) -> List[DetectedObject]:
        """
        –ú—É–ª—å—Ç–∏-–º–æ–¥–µ–ª—å–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è:
        ‚Äì –ø—Ä–æ–≥–æ–Ω –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö YOLO-—Å–µ—Ç–µ–π, —Å–∫–ª–µ–π–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–π
        ‚Äì NMS
        ‚Äì —Ñ–∏–ª—å—Ç—Ä "–¥–æ–º–∞—à–Ω–µ–π" —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω mapping)
        ‚Äì –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º—ë–Ω —á–µ—Ä–µ–∑ home_mapping (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        """
        if not getattr(self, "yolo_nets", None) or not self.yolo_nets:
            self._load_multimodel_detectors()

        if not self.yolo_nets:
            return []

        h, w = frame.shape[:2]
        blob = cv2.dnn.blobFromImage(
            frame,
            scalefactor=1 / 255.0,
            size=self.yolo_input_size,
            swapRB=True,
            crop=False
        )

        boxes, confidences, class_ids = [], [], []

        for model_name, net in self.yolo_nets:
            try:
                net.setInput(blob)
                out_names = net.getUnconnectedOutLayersNames()
                layer_outputs = net.forward(out_names)
            except Exception as e:
                logger.warning(f"{model_name}: –æ—à–∏–±–∫–∞ forward: {e}")
                continue

            for output in layer_outputs:
                for det in output:
                    scores = det[5:]
                    cid = int(np.argmax(scores))
                    cls_conf = float(scores[cid])
                    obj_conf = float(det[4]) if det.shape[0] >= 5 else 1.0
                    conf = cls_conf * obj_conf

                    if conf < self.yolo_conf_th:
                        continue

                    # –µ—Å–ª–∏ mapping –µ—Å—Ç—å ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–æ–º–∞—à–Ω–µ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                    if MAPPING_AVAILABLE and not is_important_for_home(cid):
                        continue

                    bx = int(det[0] * w)
                    by = int(det[1] * h)
                    bw = int(det[2] * w)
                    bh = int(det[3] * h)
                    x = int(bx - bw / 2)
                    y = int(by - bh / 2)

                    boxes.append([x, y, bw, bh])
                    confidences.append(conf)
                    class_ids.append(cid)

        if not boxes:
            return []

        idxs = cv2.dnn.NMSBoxes(
            boxes, confidences, self.yolo_conf_th, self.yolo_nms_th)
        if isinstance(idxs, tuple) or isinstance(idxs, list):
            idxs = np.array(idxs).reshape(-1) if len(idxs) else np.array([])
        elif hasattr(idxs, "flatten"):
            idxs = idxs.flatten()
        else:
            idxs = np.array([])

        results: List[DetectedObject] = []
        now_ts = time.time()

        for i in idxs:
            cid = class_ids[i]

            # –∏–º—è –∫–ª–∞—Å—Å–∞: –∏–∑ home_mapping, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω; –∏–Ω–∞—á–µ ‚Äî –∏–∑ self.yolo_classes
            if MAPPING_AVAILABLE:
                name_en = get_home_object_name(cid, "") or (
                    self.yolo_classes[cid] if cid < len(
                        self.yolo_classes) else f"class_{cid}"
                )
            else:
                name_en = self.yolo_classes[cid] if cid < len(
                    self.yolo_classes) else f"class_{cid}"

            x, y, bw, bh = boxes[i]
            cx = x + bw // 2
            cy = y + bh // 2

            obj = DetectedObject(
                class_name=name_en,
                confidence=float(confidences[i]),
                bbox=(x, y, bw, bh),
                center=(cx, cy),
                area=float(bw * bh),
                timestamp=now_ts
            )
            results.append(obj)

            # –æ–±–Ω–æ–≤–∏–º –¥–æ–º–∞—à–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–±–µ–∑–æ–ø–∞—Å–Ω–æ: –µ—Å–ª–∏ mapping –Ω–µ—Ç, —á–∞—Å—Ç—å —à–∞–≥–æ–≤ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—Å—è)
            self._update_home_context(name_en, cid, float(confidences[i]))

        return results

    def _load_multimodel_detectors(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ YOLO-–º–æ–¥–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –Ω–∞ –¥–∏—Å–∫–µ.
        –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π self.yolo_net –∏–∑ super()._init_detectors(),
        –ø–ª—é—Å –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å yolov3-tiny –∫–∞–∫ –≤—Ç–æ—Ä—É—é –º–æ–¥–µ–ª—å.
        """
        from pathlib import Path

        self.yolo_nets = []
        self.yolo_input_size = (416, 416)
        self.yolo_conf_th = 0.35   # —á—É—Ç—å –Ω–∏–∂–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ—Ä–æ–≥–∞ ‚Äî –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º NMS
        self.yolo_nms_th = 0.45

        models_dir = Path("models/yolo")
        coco_path = models_dir / "coco.names"

        # –∫–ª–∞—Å—Å—ã COCO (–µ—Å–ª–∏ –≤ –±–∞–∑–æ–≤–æ–º –Ω–µ –ø–æ–¥—Ö–≤–∞—Ç–∏–ª–∏—Å—å)
        if not getattr(self, "yolo_classes", None):
            if coco_path.exists():
                with open(coco_path, "r", encoding="utf-8") as f:
                    self.yolo_classes = [ln.strip() for ln in f if ln.strip()]
            else:
                self.yolo_classes = []

        # 1) —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π super()._init_yolo() ‚Äî –¥–æ–±–∞–≤–∏–º –∫–∞–∫ –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å
        if getattr(self, "yolo_net", None) is not None:
            self.yolo_nets.append(("yolov4-tiny", self.yolo_net))

        # 2) –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å yolov3-tiny (–µ—Å–ª–∏ –µ—Å—Ç—å)
        v3w = models_dir / "yolov3-tiny.weights"
        v3c = models_dir / "yolov3-tiny.cfg"
        try:
            if v3w.exists() and v3c.exists():
                net_v3 = cv2.dnn.readNet(str(v3w), str(v3c))
                self.yolo_nets.append(("yolov3-tiny", net_v3))
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å yolov3-tiny: {e}")

        if not self.yolo_nets:
            logger.info(
                "YOLO-–º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –¥–µ—Ç–µ–∫—Ü–∏—è –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π (Haar –∏ –ø—Ä.).")
        else:
            logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω—ã YOLO-–º–æ–¥–µ–ª–∏: " +
                        ", ".join(name for name, _ in self.yolo_nets))

    # ---- –ö–û–ù–¢–ï–ö–°–¢ –î–û–ú–ê ----
    def _update_home_context(self, name_en: str, coco_class_id: int, confidence: float):
        """–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏: –ø–∏—Ç–æ–º—Ü—ã, —á–µ–ª–æ–≤–µ–∫, –∫–æ–º–Ω–∞—Ç–∞ –∏ –∫—Ä–∞—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é."""
        # –ø–∏—Ç–æ–º—Ü—ã
        if name_en in ("cat", "dog"):
            self.pet_detected = True

        # –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ —á–µ–ª–æ–≤–µ–∫–∞
        if name_en == "person" and confidence > 0.7:
            self.owner_present = True

        # –¥–æ–≥–∞–¥–∫–∞ –ø–æ –∫–æ–º–Ω–∞—Ç–µ (–µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ —É—Ç–∏–ª–∏—Ç—É)
        if MAPPING_AVAILABLE:
            room = guess_room_by_object_id(coco_class_id)
            if room:
                self.room_context = room

        # –∏—Å—Ç–æ—Ä–∏—è
        self.home_object_history.setdefault(name_en, []).append({
            "timestamp": time.time(),
            "confidence": confidence
        })
        if len(self.home_object_history[name_en]) > 100:
            self.home_object_history[name_en] = self.home_object_history[name_en][-100:]

    # ---- –¢–ï–ö–°–¢ –û–ü–ò–°–ê–ù–ò–Ø –°–¶–ï–ù–´ ----
    def _generate_scene_description(self) -> str:
        parts: List[str] = []

        # –ª—é–¥–∏ –ø–æ –∫–∞—Å–∫–∞–¥—É –ª–∏—Ü (–±—ã—Å—Ç—Ä–æ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ)
        faces_cnt = len(self.state.faces)
        if faces_cnt > 0:
            if self.use_russian_names:
                parts.append("—á–µ–ª–æ–≤–µ–∫" if faces_cnt ==
                             1 else f"{faces_cnt} —á–µ–ª–æ–≤–µ–∫–∞")
            else:
                parts.append("person" if faces_cnt ==
                             1 else f"{faces_cnt} persons")

        # –¥–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ
        pets = [
            o for o in self.state.objects if o.class_name in ("cat", "dog")]
        for p in pets:
            parts.append(map_to_russian(p.class_name)
                         if self.use_russian_names else p.class_name)

        # –≤–∞–∂–Ω—ã–µ –ø—Ä–æ—á–∏–µ –æ–±—ä–µ–∫—Ç—ã (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —Å–ø–∏—Å–æ–∫)
        important = [o for o in self.state.objects if o.class_name not in (
            "cat", "dog", "person") and o.confidence > 0.6]
        if important:
            counts: Dict[str, int] = {}
            for o in important:
                key = map_to_russian(
                    o.class_name) if self.use_russian_names else o.class_name
                counts[key] = counts.get(key, 0) + 1
            for name, cnt in counts.items():
                parts.append(name if cnt == 1 else f"{cnt} {name}")

        # –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–Ω–∞—Ç—ã
        prefix = ""
        if self.room_context and self.room_context != "unknown":
            room_map_ru = {
                "kitchen": "–∫—É—Ö–Ω—è",
                "bedroom": "—Å–ø–∞–ª—å–Ω—è",
                "living_room": "–≥–æ—Å—Ç–∏–Ω–∞—è",
                "bathroom": "–≤–∞–Ω–Ω–∞—è",
                "office": "–∫–∞–±–∏–Ω–µ—Ç"
            }
            if self.use_russian_names:
                prefix = f"[{room_map_ru.get(self.room_context, self.room_context)}] "
            else:
                prefix = f"[{self.room_context}] "

        # –¥–≤–∏–∂–µ–Ω–∏–µ
        if self.state.motion_detected:
            parts.append("–¥–≤–∏–∂–µ–Ω–∏–µ" if self.use_russian_names else "movement")

        if not parts:
            return prefix + ("–ø—É—Å—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞" if self.use_russian_names else "empty room")

        return prefix + ("–í–∏–∂—É: " if self.use_russian_names else "I see: ") + ", ".join(parts)

    # ---- –ü–£–ë–õ–ò–ß–ù–´–ï –£–¢–ò–õ–ò–¢–´ ----
    def is_pet_present(self) -> bool:
        with self._lock:
            return any(o.class_name in ("cat", "dog") for o in self.state.objects)

    def get_pets_info(self) -> List[Dict]:
        with self._lock:
            info = []
            for o in self.state.objects:
                if o.class_name in ("cat", "dog"):
                    info.append({
                        "type": o.class_name,
                        "confidence": o.confidence,
                        "position": o.center,
                        "size": "large" if o.area > 5000 else "medium" if o.area > 1000 else "small"
                    })
            return info

    def is_person_sitting(self) -> bool:
        with self._lock:
            people = [o for o in self.state.objects if o.class_name == "person"]
            furn = [o for o in self.state.objects if o.class_name in (
                "chair", "sofa")]
            for p in people:
                for f in furn:
                    dx = p.center[0] - f.center[0]
                    dy = p.center[1] - f.center[1]
                    if (dx*dx + dy*dy) ** 0.5 < 100:
                        return True
            return False

    def get_room_context(self) -> str:
        return self.room_context

    def get_home_objects_stats(self) -> Dict:
        stats: Dict[str, Dict] = {}
        now = time.time()
        for name, hist in self.home_object_history.items():
            recent = [h for h in hist if now - h["timestamp"] < 300]
            if recent:
                avg = sum(h["confidence"] for h in recent) / len(recent)
                stats[name] = {
                    "detections_count": len(recent),
                    "avg_confidence": round(avg, 2),
                    "last_seen": max(h["timestamp"] for h in recent)
                }
        return stats

    def is_safe_for_movement(self) -> Dict[str, bool]:
        with self._lock:
            pets_clear = not any(o.class_name in ("cat", "dog")
                                 for o in self.state.objects)
            person_not_in_path = True
            furniture_clear = True

            # —á–µ–ª–æ–≤–µ–∫ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ
            for o in self.state.objects:
                if o.class_name == "person":
                    if 200 <= o.center[0] <= 440:
                        person_not_in_path = False
                        break

            # –º–µ–±–µ–ª—å –ø–æ —Ü–µ–Ω—Ç—Ä—É (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
            for o in self.state.objects:
                if o.class_name in ("chair", "table"):
                    if 200 <= o.center[0] <= 440:
                        furniture_clear = False
                        break

            overall = pets_clear and person_not_in_path and furniture_clear
            return {
                "pets_clear": pets_clear,
                "person_not_in_path": person_not_in_path,
                "furniture_clear": furniture_clear,
                "overall_safe": overall
            }

    def get_navigation_hints(self) -> List[str]:
        hints: List[str] = []

        if self.is_pet_present():
            for pet in self.get_pets_info():
                if pet["type"] == "cat":
                    hints.append(
                        "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ: –∫–æ—Ç –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ ‚Äî –¥–≤–∏–≥–∞–π—Ç–µ—Å—å –º–µ–¥–ª–µ–Ω–Ω–æ")
                elif pet["type"] == "dog":
                    hints.append(
                        "–í–Ω–∏–º–∞–Ω–∏–µ: —Å–æ–±–∞–∫–∞ —Ä—è–¥–æ–º ‚Äî –≤–æ–∑–º–æ–∂–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ")

        if self.room_context == "kitchen":
            hints.append("–ö—É—Ö–Ω—è: –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π –∏ –∂–∏–¥–∫–æ—Å—Ç—è–º–∏ –Ω–∞ –ø–æ–ª—É")
        elif self.room_context == "bedroom":
            hints.append("–°–ø–∞–ª—å–Ω—è: –¥–≤–∏–≥–∞–π—Ç–µ—Å—å —Ç–∏—Ö–æ, –≤–æ–∑–º–æ–∂–Ω–æ –∫—Ç–æ-—Ç–æ —Å–ø–∏—Ç")
        elif self.room_context == "living_room":
            hints.append("–ì–æ—Å—Ç–∏–Ω–∞—è: –º–Ω–æ–≥–æ –º–µ–±–µ–ª–∏ ‚Äî –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç")

        if self.owner_present:
            hints.append("–†—è–¥–æ–º —á–µ–ª–æ–≤–µ–∫ ‚Äî –¥–∞–π—Ç–µ –¥–æ—Ä–æ–≥—É")

        return hints
