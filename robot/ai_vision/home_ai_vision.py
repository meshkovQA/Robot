# robot/home_ai_vision.py
"""
Home AI Vision - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ —Ä–æ–±–æ—Ç–∞
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Å–∏—Ç—É–∞—Ü–∏–π
"""

from __future__ import annotations
from typing import List, Dict, Optional
import time
import logging
import numpy as np
import cv2
from robot.ai_vision.ai_vision import AIVisionProcessor, DetectedObject, VisionState
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–∞–ø–ø–∏–Ω–≥—É
sys.path.insert(0, str(Path(__file__).parent.parent / "models" / "yolo"))

try:
    from robot.home_mapping import (
        HOME_OBJECT_MAPPING,
        SIMPLIFIED_NAMES,
        RUSSIAN_NAMES,
        get_home_object_name,
        is_important_for_home
    )
    MAPPING_AVAILABLE = True
except ImportError:
    MAPPING_AVAILABLE = False


logger = logging.getLogger(__name__)


class HomeAIVision(AIVisionProcessor):
    """–î–æ–º–∞—à–Ω–µ–µ AI –∑—Ä–µ–Ω–∏–µ, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–ª—è –¥–æ–º–∞"""

    def __init__(self, camera=None):
        super().__init__(camera)

        # –î–æ–º–∞—à–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.home_mode = True
        self.use_russian_names = True

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        self.home_object_history = {}
        self.room_context = "unknown"

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–º–∞
        self.pet_detected = False
        self.owner_present = False

        logger.info("üè† –î–æ–º–∞—à–Ω–µ–µ AI –∑—Ä–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

    def _init_detectors(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        super()._init_detectors()

        if not MAPPING_AVAILABLE:
            logger.warning(
                "–ú–∞–ø–ø–∏–Ω–≥ –¥–æ–º–∞—à–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π COCO")
            self.home_mode = False

    def _detect_with_yolo(self, frame) -> List[DetectedObject]:
        """–î–µ—Ç–µ–∫—Ü–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥–æ–º–∞—à–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
        if not self.yolo_net:
            return []

        try:
            height, width = frame.shape[:2]

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–ª–æ–±–∞ –¥–ª—è YOLO
            blob = cv2.dnn.blobFromImage(
                frame, 1/255.0, (416, 416),
                swapRB=True, crop=False
            )
            self.yolo_net.setInput(blob)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–π
            layer_outputs = self.yolo_net.forward(
                self.yolo_net.getUnconnectedOutLayersNames()
            )

            home_objects = []

            for output in layer_outputs:
                for detection in output:
                    scores = detection[5:]
                    class_id = int(np.argmax(scores))
                    confidence = float(scores[class_id])

                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –¥–ª—è –¥–æ–º–∞ –æ–±—ä–µ–∫—Ç—ã
                    # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –¥–æ–º–∞
                    if confidence > 0.4 and self._is_home_relevant(class_id):
                        center_x = int(detection[0] * width)
                        center_y = int(detection[1] * height)
                        w = int(detection[2] * width)
                        h = int(detection[3] * height)

                        x = int(center_x - w/2)
                        y = int(center_y - h/2)

                        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
                        home_name = self._get_home_object_name(class_id)

                        if home_name:
                            obj = DetectedObject(
                                class_name=home_name,
                                confidence=confidence,
                                bbox=(x, y, w, h),
                                center=(center_x, center_y),
                                area=w * h,
                                timestamp=time.time()
                            )
                            home_objects.append(obj)

                            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–º–∞—à–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                            self._update_home_context(home_name, confidence)

            return home_objects

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–º–∞—à–Ω–µ–π YOLO –¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
            return []

    def _is_home_relevant(self, coco_class_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –¥–æ–º–∞"""
        if not MAPPING_AVAILABLE:
            # –ë–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É
            HOME_CLASSES = [0, 15, 16, 39, 41, 46, 56, 57,
                            58, 59, 60, 61, 62, 63, 67, 72, 73, 74]
            return coco_class_id in HOME_CLASSES

        return is_important_for_home(coco_class_id)

    def _get_home_object_name(self, coco_class_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–º–∞—à–Ω–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
        if not MAPPING_AVAILABLE:
            # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞
            basic_mapping = {
                0: "person", 15: "cat", 16: "dog", 39: "bottle",
                41: "cup", 46: "bowl", 56: "chair", 57: "sofa",
                59: "bed", 62: "tv", 63: "laptop", 67: "phone"
            }
            return basic_mapping.get(coco_class_id)

        return get_home_object_name(coco_class_id, "")

    def _update_home_context(self, object_name: str, confidence: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö
        if object_name in ["cat", "dog"]:
            self.pet_detected = True

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ —á–µ–ª–æ–≤–µ–∫–∞
        if object_name == "person" and confidence > 0.7:
            self.owner_present = True

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
        room_indicators = {
            "kitchen": ["microwave", "fridge", "sink", "oven", "toaster"],
            "bedroom": ["bed"],
            "living_room": ["sofa", "tv", "remote"],
            "bathroom": ["toilet", "sink"],
            "office": ["laptop", "keyboard", "mouse"]
        }

        for room, indicators in room_indicators.items():
            if object_name in indicators:
                self.room_context = room
                break

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—ä–µ–∫—Ç–æ–≤
        if object_name not in self.home_object_history:
            self.home_object_history[object_name] = []
        self.home_object_history[object_name].append({
            "timestamp": time.time(),
            "confidence": confidence
        })

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 –∑–∞–ø–∏—Å—è–º–∏
        if len(self.home_object_history[object_name]) > 100:
            self.home_object_history[object_name] = self.home_object_history[object_name][-100:]

    def _generate_scene_description(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–π —Å—Ü–µ–Ω—ã"""
        description_parts = []

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        name_map = RUSSIAN_NAMES if (
            self.use_russian_names and MAPPING_AVAILABLE) else {}

        # –õ—é–¥–∏ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        people_count = len([f for f in self.state.faces])
        if people_count > 0:
            if self.use_russian_names:
                if people_count == 1:
                    description_parts.append("—á–µ–ª–æ–≤–µ–∫")
                else:
                    description_parts.append(f"{people_count} —á–µ–ª–æ–≤–µ–∫–∞")
            else:
                description_parts.append(
                    f"{people_count} person{'s' if people_count > 1 else ''}")

        # –î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ
        pets = [obj for obj in self.state.objects if obj.class_name in ["cat", "dog"]]
        if pets:
            for pet in pets:
                pet_name = name_map.get(pet.class_name, pet.class_name)
                description_parts.append(pet_name)

        # –ú–µ–±–µ–ª—å –∏ –≤–∞–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        important_objects = [obj for obj in self.state.objects
                             if obj.class_name not in ["cat", "dog", "person"]
                             and obj.confidence > 0.6]

        if important_objects:
            object_counts = {}
            for obj in important_objects:
                display_name = name_map.get(obj.class_name, obj.class_name)
                object_counts[display_name] = object_counts.get(
                    display_name, 0) + 1

            for obj_name, count in object_counts.items():
                if count == 1:
                    description_parts.append(obj_name)
                else:
                    description_parts.append(f"{count} {obj_name}")

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–Ω–∞—Ç—ã
        room_prefix = ""
        if self.room_context != "unknown":
            room_names = {
                "kitchen": "–∫—É—Ö–Ω—è",
                "bedroom": "—Å–ø–∞–ª—å–Ω—è",
                "living_room": "–≥–æ—Å—Ç–∏–Ω–∞—è",
                "bathroom": "–≤–∞–Ω–Ω–∞—è",
                "office": "–∫–∞–±–∏–Ω–µ—Ç"
            }
            if self.use_russian_names and self.room_context in room_names:
                room_prefix = f"[{room_names[self.room_context]}] "
            else:
                room_prefix = f"[{self.room_context}] "

        # –î–≤–∏–∂–µ–Ω–∏–µ
        if self.state.motion_detected:
            motion_text = "–¥–≤–∏–∂–µ–Ω–∏–µ" if self.use_russian_names else "movement"
            description_parts.append(motion_text)

        if not description_parts:
            empty_text = "–ø—É—Å—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞" if self.use_russian_names else "empty room"
            return room_prefix + empty_text

        see_text = "–í–∏–∂—É: " if self.use_russian_names else "I see: "
        return room_prefix + see_text + ", ".join(description_parts)

    # ==================== –î–û–ú–ê–®–ù–ò–ï –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

    def is_pet_present(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        with self._lock:
            pets = [
                obj for obj in self.state.objects if obj.class_name in ["cat", "dog"]]
            return len(pets) > 0

    def get_pets_info(self) -> List[Dict]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        with self._lock:
            pets_info = []
            for obj in self.state.objects:
                if obj.class_name in ["cat", "dog"]:
                    pet_info = {
                        "type": obj.class_name,
                        "confidence": obj.confidence,
                        "position": obj.center,
                        "size": "large" if obj.area > 5000 else "medium" if obj.area > 1000 else "small"
                    }
                    pets_info.append(pet_info)
            return pets_info

    def is_person_sitting(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–¥–∏—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ (–ø–æ –Ω–∞–ª–∏—á–∏—é —Å—Ç—É–ª–∞/–¥–∏–≤–∞–Ω–∞ —Ä—è–¥–æ–º)"""
        with self._lock:
            people = [
                obj for obj in self.state.objects if obj.class_name == "person"]
            furniture = [
                obj for obj in self.state.objects if obj.class_name in ["chair", "sofa"]]

            for person in people:
                for chair in furniture:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –∫ –º–µ–±–µ–ª–∏
                    distance = ((person.center[0] - chair.center[0]) ** 2 +
                                (person.center[1] - chair.center[1]) ** 2) ** 0.5
                    if distance < 100:  # –ß–µ–ª–æ–≤–µ–∫ —Ä—è–¥–æ–º —Å –º–µ–±–µ–ª—å—é
                        return True
            return False

    def get_room_context(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–Ω–∞—Ç—ã"""
        return self.room_context

    def get_home_objects_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
        stats = {}
        current_time = time.time()

        for obj_name, history in self.home_object_history.items():
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            recent_detections = [
                h for h in history
                if current_time - h["timestamp"] < 300  # 5 –º–∏–Ω—É—Ç
            ]

            if recent_detections:
                avg_confidence = sum(
                    h["confidence"] for h in recent_detections) / len(recent_detections)
                stats[obj_name] = {
                    "detections_count": len(recent_detections),
                    "avg_confidence": round(avg_confidence, 2),
                    "last_seen": max(h["timestamp"] for h in recent_detections)
                }

        return stats

    def is_safe_for_movement(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –¥–æ–º–∞—à–Ω–µ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        safety = {
            "pets_clear": not self.is_pet_present(),
            "person_not_in_path": not self.is_person_in_front(),
            "furniture_clear": True,  # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
            "overall_safe": True
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–±–µ–ª—å –Ω–∞ –ø—É—Ç–∏
        furniture_ahead = []
        for obj in self.state.objects:
            # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞
            if obj.class_name in ["chair", "table"] and obj.center[0] > 200 and obj.center[0] < 440:
                furniture_ahead.append(obj)

        safety["furniture_clear"] = len(furniture_ahead) == 0

        # –û–±—â–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        safety["overall_safe"] = all([
            safety["pets_clear"],
            safety["person_not_in_path"],
            safety["furniture_clear"]
        ])

        return safety

    def get_navigation_hints(self) -> List[str]:
        """–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –¥–æ–º–µ"""
        hints = []

        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –¥–æ–º–∞—à–Ω–∏–º –∂–∏–≤–æ—Ç–Ω—ã–º
        if self.is_pet_present():
            pets = self.get_pets_info()
            for pet in pets:
                if pet["type"] == "cat":
                    hints.append(
                        "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ: –∫–æ—Ç –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ - –¥–≤–∏–≥–∞–π—Ç–µ—Å—å –º–µ–¥–ª–µ–Ω–Ω–æ")
                elif pet["type"] == "dog":
                    hints.append(
                        "–í–Ω–∏–º–∞–Ω–∏–µ: —Å–æ–±–∞–∫–∞ —Ä—è–¥–æ–º - –≤–æ–∑–º–æ–∂–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ")

        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–æ–º–Ω–∞—Ç–µ
        if self.room_context == "kitchen":
            hints.append(
                "–ö—É—Ö–Ω—è: –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π –∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∂–∏–¥–∫–æ—Å—Ç—è–º–∏ –Ω–∞ –ø–æ–ª—É")
        elif self.room_context == "bedroom":
            hints.append("–°–ø–∞–ª—å–Ω—è: –¥–≤–∏–≥–∞–π—Ç–µ—Å—å —Ç–∏—Ö–æ, –≤–æ–∑–º–æ–∂–Ω–æ –∫—Ç–æ-—Ç–æ —Å–ø–∏—Ç")
        elif self.room_context == "living_room":
            hints.append(
                "–ì–æ—Å—Ç–∏–Ω–∞—è: –º–Ω–æ–≥–æ –º–µ–±–µ–ª–∏ - –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ")

        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –ª—é–¥—è–º
        if self.owner_present:
            if self.is_person_sitting():
                hints.append("–ß–µ–ª–æ–≤–µ–∫ —Å–∏–¥–∏—Ç - –º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è, –Ω–æ –Ω–µ –º–µ—à–∞–π—Ç–µ")
            else:
                hints.append("–ß–µ–ª–æ–≤–µ–∫ —Å—Ç–æ–∏—Ç - –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥–∞")

        return hints
