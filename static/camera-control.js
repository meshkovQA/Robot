// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–í–û–†–û–¢–ê–ú–ò –ö–ê–ú–ï–†–´ ====================

let cameraAngles = {
    pan: 90,    // —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    tilt: 90    // —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
};

let cameraLimits = {
    pan: { min: 0, max: 180, default: 90 },
    tilt: { min: 50, max: 150, default: 90 }
};

const CAMERA_STEP = 10; // —à–∞–≥ –ø–æ–≤–æ—Ä–æ—Ç–∞

function showNotification(message, type) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é showAlert –∏–∑ script.js
    if (typeof showAlert === 'function') {
        showAlert(message, type);
    } else {
        console.log(`[${type}] ${message}`);
    }
}

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

function initCameraControl() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —É–≥–ª—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    fetchCameraPosition();
    fetchCameraLimits();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä—ã
    updateAngleSliders();
}

// ==================== API –ó–ê–ü–†–û–°–´ ====================

async function fetchCameraPosition() {
    try {
        const response = await fetch('/api/camera/position');
        const data = await response.json();

        if (data.success) {
            cameraAngles.pan = data.data.camera.pan_angle;
            cameraAngles.tilt = data.data.camera.tilt_angle;
            updateAngleDisplay();
            updateAngleSliders();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã:', error);
    }
}

async function fetchCameraLimits() {
    try {
        const response = await fetch('/api/camera/limits');
        const data = await response.json();

        if (data.success) {
            cameraLimits = data.data.limits;

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤
            const panSlider = document.getElementById('pan-slider');
            const tiltSlider = document.getElementById('tilt-slider');

            if (panSlider) {
                panSlider.min = cameraLimits.pan.min;
                panSlider.max = cameraLimits.pan.max;
            }

            if (tiltSlider) {
                tiltSlider.min = cameraLimits.tilt.min;
                tiltSlider.max = cameraLimits.tilt.max;
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∫–∞–º–µ—Ä—ã:', error);
    }
}

async function sendCameraCommand(endpoint, data = {}) {
    try {
        showNotification('üéØ –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞—é –∫–∞–º–µ—Ä—É...', 'info');

        const response = await fetch(`/api/camera/${endpoint}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();

        if (result.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–ª—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if (result.data.camera) {
                cameraAngles.pan = result.data.camera.pan_angle;
                cameraAngles.tilt = result.data.camera.tilt_angle;
                updateAngleDisplay();
                updateAngleSliders();
            }

            showNotification('‚úÖ –ö–∞–º–µ—Ä–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∞', 'success');
            return true;
        } else {
            showNotification(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`, 'error');
            return false;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∫–∞–º–µ—Ä—ã:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
        return false;
    }
}

// ==================== –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø ====================

async function cameraPanLeft() {
    await sendCameraCommand('pan/left', { step: CAMERA_STEP });
}

async function cameraPanRight() {
    await sendCameraCommand('pan/right', { step: CAMERA_STEP });
}

async function cameraTiltUp() {
    await sendCameraCommand('tilt/up', { step: CAMERA_STEP });
}

async function cameraTiltDown() {
    await sendCameraCommand('tilt/down', { step: CAMERA_STEP });
}

async function cameraCenter() {
    await sendCameraCommand('center');
}

// ==================== –°–õ–ê–ô–î–ï–†–´ ====================

async function setCameraPan(angle) {
    const numAngle = parseInt(angle);
    await sendCameraCommand('pan', { angle: numAngle });
}

async function setCameraTilt(angle) {
    const numAngle = parseInt(angle);
    await sendCameraCommand('tilt', { angle: numAngle });
}

// ==================== –û–ë–ù–û–í–õ–ï–ù–ò–ï UI ====================

function updateAngleDisplay() {
    const panElement = document.getElementById('pan-angle');
    const tiltElement = document.getElementById('tilt-angle');

    if (panElement) {
        panElement.textContent = `${cameraAngles.pan}¬∞`;
    }

    if (tiltElement) {
        tiltElement.textContent = `${cameraAngles.tilt}¬∞`;
    }
}

function updateAngleSliders() {
    const panSlider = document.getElementById('pan-slider');
    const tiltSlider = document.getElementById('tilt-slider');

    if (panSlider && panSlider.value != cameraAngles.pan) {
        panSlider.value = cameraAngles.pan;
    }

    if (tiltSlider && tiltSlider.value != cameraAngles.tilt) {
        tiltSlider.value = cameraAngles.tilt;
    }
}

// ==================== –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï ====================

function updateCameraAnglesInStatus(statusData) {
    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ script.js –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    if (statusData.camera && statusData.camera.pan_angle !== undefined) {
        cameraAngles.pan = statusData.camera.pan_angle;
        cameraAngles.tilt = statusData.camera.tilt_angle;
        updateAngleDisplay();
        updateAngleSliders();
    }
}

// ==================== –≠–ö–°–ü–û–†–¢ –î–õ–Ø –î–†–£–ì–ò–• –ú–û–î–£–õ–ï–ô ====================
window.cameraControl = {
    init: initCameraControl,
    updateAnglesFromStatus: updateCameraAnglesInStatus,
    panLeft: cameraPanLeft,
    panRight: cameraPanRight,
    tiltUp: cameraTiltUp,
    tiltDown: cameraTiltDown,
    center: cameraCenter,
    setPan: setCameraPan,
    setTilt: setCameraTilt
};

console.log('üìπ –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π –∑–∞–≥—Ä—É–∂–µ–Ω');