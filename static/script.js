// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let lastUpdateTime = 0;
let obstacleDetected = false;
let connectionActive = false;
let robotMoving = false;
let currentDirection = 0;

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM)
let speedSlider, speedValue;

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–µ–º
function moveForward() {
    console.log('moveForward called');
    const speed = speedSlider ? parseInt(speedSlider.value) : 150;
    sendCommand('/api/move/forward', 'POST', { speed: speed })
        .then(data => {
            console.log('Move forward response:', data);
            if (data.success) {
                showAlert(`–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ (${speed})`, 'success');
                updateMovementState(true, '–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥');
            }
        });
}

function moveBackward() {
    console.log('moveBackward called');
    const speed = speedSlider ? parseInt(speedSlider.value) : 150;
    sendCommand('/api/move/backward', 'POST', { speed: speed })
        .then(data => {
            if (data.success) {
                showAlert(`–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥ (${speed})`, 'success');
                updateMovementState(true, '–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥');
            }
        });
}

function tankTurnLeft() {
    console.log('tankTurnLeft called');
    const speed = speedSlider ? parseInt(speedSlider.value) : 150;
    sendCommand('/api/turn/left', 'POST', { speed: speed })
        .then(data => {
            if (data.success) {
                showAlert('–ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ', 'success');
                updateMovementState(false, '–ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ');
            }
        });
}

function tankTurnRight() {
    console.log('tankTurnRight called');
    const speed = speedSlider ? parseInt(speedSlider.value) : 150;
    sendCommand('/api/turn/right', 'POST', { speed: speed })
        .then(data => {
            if (data.success) {
                showAlert('–ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ', 'success');
                updateMovementState(false, '–ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ');
            }
        });
}

function stopRobot() {
    console.log('stopRobot called');
    sendCommand('/api/stop', 'POST')
        .then(data => {
            if (data.success) {
                showAlert('–û—Å—Ç–∞–Ω–æ–≤–∫–∞', 'warning');
                updateMovementState(false, '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
        });
}

function emergencyStop() {
    console.log('emergencyStop called');
    sendCommand('/api/emergency_stop', 'POST')
        .then(data => {
            if (data.success) {
                showAlert('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê', 'danger');
                updateMovementState(false, '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞');
            }
        });
}

function updateSpeed(newSpeed) {
    sendCommand('/api/speed', 'POST', { speed: newSpeed })
        .then(data => {
            if (data.success && data.is_moving) {
                showAlert(`–°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞: ${newSpeed}`, 'success');
            }
        });
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥
async function sendCommand(url, method, data = null) {
    console.log('Sending command:', url, method, data);
    try {
        const options = {
            method: method,
            headers: {
                'Content-Type': 'application/json',
            }
        };

        if (data) {
            options.body = JSON.stringify(data);
        }

        const response = await fetch(url, options);
        const result = await response.json();
        console.log('Command response:', result);

        if (!result.success) {
            showAlert(`–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${result.error}`, 'danger');
        }

        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
        showAlert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'danger');
        return { success: false };
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –≤ UI
function updateMovementState(moving, state) {
    robotMoving = moving;
    const statusDisplay = document.getElementById('movement-status-display');
    const robotState = document.getElementById('robot-state');
    const speedInfo = document.getElementById('speed-info');
    const movementDirection = document.getElementById('movement-direction');

    if (robotState) robotState.textContent = state;
    if (movementDirection) movementDirection.textContent = state;

    if (statusDisplay) {
        if (moving) {
            statusDisplay.className = 'movement-status moving';
            if (speedInfo) speedInfo.textContent = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏';
        } else {
            statusDisplay.className = 'movement-status stopped';
            if (speedInfo) speedInfo.textContent = '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ';
        }
    }
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showAlert(message, type = 'success') {
    console.log('Alert:', message, type);
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const existingAlerts = document.querySelectorAll('.alert');
    existingAlerts.forEach(alert => alert.remove());

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const alert = document.createElement('div');
    alert.className = `alert ${type}`;
    alert.textContent = message;

    document.body.appendChild(alert);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        alert.remove();
    }, 3000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
function updateSensorData() {
    fetch('/api/status')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const status = data.data;

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                const currentSpeedEl = document.getElementById('current-speed');
                if (currentSpeedEl) currentSpeedEl.textContent = status.current_speed;

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                const lastUpdateEl = document.getElementById('last-update');
                if (lastUpdateEl) {
                    const now = new Date();
                    lastUpdateEl.textContent = `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${now.toLocaleTimeString()}`;
                }

                lastUpdateTime = Date.now();
                connectionActive = true;
            } else {
                connectionActive = false;
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
            connectionActive = false;
        });
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
document.addEventListener('keydown', function (event) {
    console.log('Key pressed:', event.key);
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ input —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    if (event.target.tagName === 'INPUT') return;

    switch (event.key.toLowerCase()) {
        case 'w':
        case 'arrowup':
            event.preventDefault();
            moveForward();
            break;
        case 's':
        case 'arrowdown':
            event.preventDefault();
            moveBackward();
            break;
        case 'a':
            event.preventDefault();
            tankTurnLeft();
            break;
        case 'd':
            event.preventDefault();
            tankTurnRight();
            break;
        case ' ':
            event.preventDefault();
            stopRobot();
            break;
        case 'escape':
            event.preventDefault();
            emergencyStop();
            break;
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function () {
    console.log('ü§ñ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    speedSlider = document.getElementById('speed-slider');
    speedValue = document.getElementById('speed-value');

    if (speedSlider && speedValue) {
        console.log('Slider elements found, adding event listener');
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–∑—É–Ω–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        speedSlider.addEventListener('input', function () {
            const speed = parseInt(this.value);
            speedValue.textContent = speed;
            const currentSpeedEl = document.getElementById('current-speed');
            if (currentSpeedEl) currentSpeedEl.textContent = speed;
            updateSpeed(speed);
        });
    } else {
        console.error('Slider elements not found!');
    }

    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    setInterval(updateSensorData, 2000);

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    updateSensorData();

    showAlert('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: W/S - –¥–≤–∏–∂–µ–Ω–∏–µ, A/D - –ø–æ–≤–æ—Ä–æ—Ç—ã, –ü—Ä–æ–±–µ–ª - —Å—Ç–æ–ø, –ö–Ω–æ–ø–∫–∏ - –º—ã—à—å—é', 'success');
    console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
});

// –°–¥–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –¥–ª—è onclick
window.moveForward = moveForward;
window.moveBackward = moveBackward;
window.tankTurnLeft = tankTurnLeft;
window.tankTurnRight = tankTurnRight;
window.stopRobot = stopRobot;
window.emergencyStop = emergencyStop;

console.log('ü§ñ JavaScript —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω');