// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let lastUpdateTime = 0;
let obstacleDetected = false;
let connectionActive = false;
let robotMoving = false;
let currentDirection = 0;

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const speedSlider = document.getElementById('speed-slider');
const speedValue = document.getElementById('speed-value');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–∑—É–Ω–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
speedSlider.addEventListener('input', function () {
    const speed = parseInt(this.value);
    speedValue.textContent = speed;
    document.getElementById('current-speed').textContent = speed;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–æ–±–æ—Ç –¥–≤–∏–∂–µ—Ç—Å—è
    updateSpeed(speed);
});

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–µ–º
function moveForward() {
    const speed = parseInt(speedSlider.value);
    sendCommand('/api/move/forward', 'POST', { speed: speed })
        .then(data => {
            if (data.success) {
                showAlert(`–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ (${speed})`, 'success');
                updateMovementState(true, '–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥');
            }
        });
}

function moveBackward() {
    const speed = parseInt(speedSlider.value);
    sendCommand('/api/move/backward', 'POST', { speed: speed })
        .then(data => {
            if (data.success) {
                showAlert(`–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥ (${speed})`, 'success');
                updateMovementState(true, '–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥');
            }
        });
}

function tankTurnLeft() {
    const speed = parseInt(speedSlider.value);
    sendCommand('/api/turn/left', 'POST', { speed: speed })
        .then(data => {
            if (data.success) {
                showAlert('–ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ', 'success');
                updateMovementState(false, '–ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ');
            }
        });
}

function tankTurnRight() {
    const speed = parseInt(speedSlider.value);
    sendCommand('/api/turn/right', 'POST', { speed: speed })
        .then(data => {
            if (data.success) {
                showAlert('–ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ', 'success');
                updateMovementState(false, '–ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ');
            }
        });
}

function stopRobot() {
    sendCommand('/api/stop', 'POST')
        .then(data => {
            if (data.success) {
                showAlert('–û—Å—Ç–∞–Ω–æ–≤–∫–∞', 'warning');
                updateMovementState(false, '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
        });
}

function emergencyStop() {
    sendCommand('/api/emergency_stop', 'POST')
        .then(data => {
            if (data.success) {
                showAlert('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê', 'danger');
                updateMovementState(false, '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞');
            }
        });
}

function updateSpeed(newSpeed) {
    sendCommand('/api/speed', 'POST', { speed: newSpeed })
        .then(data => {
            if (data.success && data.is_moving) {
                showAlert(`–°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞: ${newSpeed}`, 'success');
            }
        });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –≤ UI
function updateMovementState(moving, state) {
    robotMoving = moving;
    const statusDisplay = document.getElementById('movement-status-display');
    const robotState = document.getElementById('robot-state');
    const speedInfo = document.getElementById('speed-info');
    const movementDirection = document.getElementById('movement-direction');

    robotState.textContent = state;
    movementDirection.textContent = state;

    if (moving) {
        statusDisplay.className = 'movement-status moving';
        speedInfo.textContent = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏';
    } else {
        statusDisplay.className = 'movement-status stopped';
        speedInfo.textContent = '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ';
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥
async function sendCommand(url, method, data = null) {
    try {
        const options = {
            method: method,
            headers: {
                'Content-Type': 'application/json',
            }
        };

        if (data) {
            options.body = JSON.stringify(data);
        }

        const response = await fetch(url, options);
        const result = await response.json();

        if (!result.success) {
            showAlert(`–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${result.error}`, 'danger');
        }

        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
        showAlert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'danger');
        return { success: false };
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
function updateSensorData() {
    fetch('/api/status')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const status = data.data;

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                updateConnectionStatus(true);
                updateMovementStatusIndicator(status.is_moving);
                updateObstacleStatus(status.obstacles.front || status.obstacles.rear);

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                document.getElementById('current-speed').textContent = status.current_speed;

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
                const directionText = getDirectionText(status.movement_direction, status.is_moving);
                updateMovementState(status.is_moving, directionText);

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                updateSensorDisplay('front', status.front_distance);
                updateSensorDisplay('rear', status.rear_distance);

                // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è—Ö
                updateObstacleWarnings(status.obstacles, status.sensor_error);

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                const now = new Date();
                document.getElementById('last-update').textContent =
                    `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${now.toLocaleTimeString()}`;

                lastUpdateTime = Date.now();
                obstacleDetected = status.obstacles.front || status.obstacles.rear;
                connectionActive = true;
            } else {
                updateConnectionStatus(false);
                connectionActive = false;
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
            updateConnectionStatus(false);
            connectionActive = false;
        });
}

function getDirectionText(direction, isMoving) {
    if (!isMoving) return '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';

    switch (direction) {
        case 1: return '–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥';
        case 2: return '–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥';
        case 3: return '–ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ';
        case 4: return '–ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ';
        default: return '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞
function updateSensorDisplay(sensor, distance) {
    const valueElement = document.getElementById(`${sensor}-distance`);
    const cardElement = document.getElementById(`${sensor}-sensor`);

    // –°–±—Ä–æ—Å –∫–ª–∞—Å—Å–æ–≤
    valueElement.className = 'sensor-value';
    cardElement.className = 'sensor-card';

    if (distance === 999) {
        valueElement.textContent = 'ERR';
        valueElement.classList.add('error');
    } else {
        valueElement.textContent = distance;

        if (distance < 10) {
            valueElement.classList.add('danger');
            cardElement.classList.add('danger');
        } else if (distance < 20) {
            valueElement.classList.add('warning');
            cardElement.classList.add('warning');
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function updateConnectionStatus(connected) {
    const indicator = document.getElementById('connection-status');
    indicator.className = 'status-indicator' + (connected ? ' active' : '');
}

function updateMovementStatusIndicator(moving) {
    const indicator = document.getElementById('movement-status');
    indicator.className = 'status-indicator' + (moving ? ' active' : '');
}

function updateObstacleStatus(obstacles) {
    const indicator = document.getElementById('obstacle-status');
    if (obstacles) {
        indicator.className = 'status-indicator warning';
    } else {
        indicator.className = 'status-indicator';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è—Ö
function updateObstacleWarnings(obstacles, sensorError) {
    const warningsContainer = document.getElementById('obstacle-warnings');
    warningsContainer.innerHTML = '';

    if (sensorError) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'obstacle-warning danger';
        errorDiv.textContent = '‚ö†Ô∏è –û–®–ò–ë–ö–ê –î–ê–¢–ß–ò–ö–û–í! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.';
        warningsContainer.appendChild(errorDiv);
        return;
    }

    if (obstacles.front) {
        const frontWarning = document.createElement('div');
        frontWarning.className = 'obstacle-warning danger';
        frontWarning.textContent = 'üö´ –ü–†–ï–ü–Ø–¢–°–¢–í–ò–ï –°–ü–ï–†–ï–î–ò! –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.';
        warningsContainer.appendChild(frontWarning);
    }

    if (obstacles.rear) {
        const rearWarning = document.createElement('div');
        rearWarning.className = 'obstacle-warning danger';
        rearWarning.textContent = 'üö´ –ü–†–ï–ü–Ø–¢–°–¢–í–ò–ï –°–ó–ê–î–ò! –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.';
        warningsContainer.appendChild(rearWarning);
    }
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showAlert(message, type = 'success') {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const existingAlerts = document.querySelectorAll('.alert');
    existingAlerts.forEach(alert => alert.remove());

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const alert = document.createElement('div');
    alert.className = `alert ${type}`;
    alert.textContent = message;

    document.body.appendChild(alert);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        alert.remove();
    }, 3000);
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
document.addEventListener('keydown', function (event) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ input —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    if (event.target.tagName === 'INPUT') return;

    switch (event.key.toLowerCase()) {
        case 'w':
        case 'arrowup':
            event.preventDefault();
            moveForward();
            break;
        case 's':
        case 'arrowdown':
            event.preventDefault();
            moveBackward();
            break;
        case 'a':
            event.preventDefault();
            tankTurnLeft();
            break;
        case 'd':
            event.preventDefault();
            tankTurnRight();
            break;
        case ' ':
            event.preventDefault();
            stopRobot();
            break;
        case 'escape':
            event.preventDefault();
            emergencyStop();
            break;
    }
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
window.addEventListener('beforeunload', function (event) {
    if (robotMoving) {
        event.preventDefault();
        event.returnValue = '–†–æ–±–æ—Ç –≤—Å–µ –µ—â–µ –¥–≤–∏–∂–µ—Ç—Å—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?';
        return event.returnValue;
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞
document.addEventListener('visibilitychange', function () {
    if (document.hidden && robotMoving) {
        console.log('–û–∫–Ω–æ –ø–æ—Ç–µ—Ä—è–ª–æ —Ñ–æ–∫—É—Å - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞');
        stopRobot();
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function () {
    console.log('ü§ñ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω');

    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 500–º—Å
    setInterval(updateSensorData, 500);

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    updateSensorData();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    setInterval(() => {
        if (Date.now() - lastUpdateTime > 3000 && connectionActive) {
            updateConnectionStatus(false);
            showAlert('–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ä–æ–±–æ—Ç–æ–º', 'danger');
            connectionActive = false;
        }
    }, 1000);

    showAlert('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: W/S - –¥–≤–∏–∂–µ–Ω–∏–µ, A/D - –ø–æ–≤–æ—Ä–æ—Ç—ã, –ü—Ä–æ–±–µ–ª - —Å—Ç–æ–ø', 'success');
});