//script.js

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let lastUpdateTime = 0;
let obstacleDetected = false;
let connectionActive = false;
let robotMoving = false;
let currentDirection = 0;

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const speedSlider = document.getElementById('speed-slider');
const speedValue = document.getElementById('speed-value');

const SPEED_CONVERSION = {
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –¢–†–ï–ë–£–Æ–¢ –ö–ê–õ–ò–ë–†–û–í–ö–ò
    MIN_MPS: 0.05,      // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –º/—Å
    MAX_MPS: 0.5,       // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –º/—Å
    MIN_PWM: 50,        // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π PWM
    MAX_PWM: 255        // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π PWM
};

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º/—Å –≤ PWM
function mpsToEwm(mps) {
    const ratio = (mps - SPEED_CONVERSION.MIN_MPS) / (SPEED_CONVERSION.MAX_MPS - SPEED_CONVERSION.MIN_MPS);
    const pwm = SPEED_CONVERSION.MIN_PWM + ratio * (SPEED_CONVERSION.MAX_PWM - SPEED_CONVERSION.MIN_PWM);
    return Math.round(Math.max(SPEED_CONVERSION.MIN_PWM, Math.min(SPEED_CONVERSION.MAX_PWM, pwm)));
}

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ PWM –≤ –º/—Å
function pwmToMps(pwm) {
    const ratio = (pwm - SPEED_CONVERSION.MIN_PWM) / (SPEED_CONVERSION.MAX_PWM - SPEED_CONVERSION.MIN_PWM);
    const mps = SPEED_CONVERSION.MIN_MPS + ratio * (SPEED_CONVERSION.MAX_MPS - SPEED_CONVERSION.MIN_MPS);
    return Math.max(SPEED_CONVERSION.MIN_MPS, Math.min(SPEED_CONVERSION.MAX_MPS, mps));
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–∑—É–Ω–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
speedSlider.addEventListener('input', function () {
    const mpsValue = parseFloat(this.value);
    speedValue.textContent = mpsValue.toFixed(2) + ' –º/—Å';

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ PWM –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥
    const pwmValue = mpsToEwm(mpsValue);
    console.log(`Speed: ${mpsValue.toFixed(2)} –º/—Å ‚Üí PWM: ${pwmValue}`);
});

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–µ–º
function moveForward() {
    const mpsSpeed = parseFloat(speedSlider.value);
    const pwmSpeed = mpsToEwm(mpsSpeed);

    sendCommand('/api/move/forward', 'POST', { speed: pwmSpeed })
        .then(data => {
            if (data.success) {
                showAlert(`–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ (${mpsSpeed.toFixed(2)} –º/—Å)`, 'success');
                updateMovementState(true, '–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥');
            }
        });
}

function moveBackward() {
    const mpsSpeed = parseFloat(speedSlider.value);
    const pwmSpeed = mpsToEwm(mpsSpeed);

    sendCommand('/api/move/backward', 'POST', { speed: pwmSpeed })
        .then(data => {
            if (data.success) {
                showAlert(`–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥ (${mpsSpeed.toFixed(2)} –º/—Å)`, 'success');
                updateMovementState(true, '–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥');
            }
        });
}

function tankTurnLeft() {
    const mpsSpeed = parseFloat(speedSlider.value);
    const pwmSpeed = mpsToEwm(mpsSpeed);

    sendCommand('/api/turn/left', 'POST', { speed: pwmSpeed })
        .then(data => {
            if (data.success) {
                showAlert(`–ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ (${mpsSpeed.toFixed(2)} –º/—Å)`, 'success');
                updateMovementState(false, '–ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ');
            }
        });
}

function tankTurnRight() {
    const mpsSpeed = parseFloat(speedSlider.value);
    const pwmSpeed = mpsToEwm(mpsSpeed);

    sendCommand('/api/turn/right', 'POST', { speed: pwmSpeed })
        .then(data => {
            if (data.success) {
                showAlert(`–ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ (${mpsSpeed.toFixed(2)} –º/—Å)`, 'success');
                updateMovementState(false, '–ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ');
            }
        });
}

function stopRobot() {
    sendCommand('/api/stop', 'POST')
        .then(data => {
            if (data.success) {
                showAlert('–û—Å—Ç–∞–Ω–æ–≤–∫–∞', 'warning');
                updateMovementState(false, '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
        });
}

function emergencyStop() {
    sendCommand('/api/emergency_stop', 'POST')
        .then(data => {
            if (data.success) {
                showAlert('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê', 'danger');
                updateMovementState(false, '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞');
            }
        });
}

function updateSpeed(newMpsSpeed) {
    const pwmSpeed = mpsToEwm(newMpsSpeed);
    sendCommand('/api/speed', 'POST', { speed: pwmSpeed })
        .then(data => {
            if (data.success && data.is_moving) {
                showAlert(`–°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞: ${newMpsSpeed.toFixed(2)} –º/—Å`, 'success');
            }
        });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –≤ UI
function updateMovementState(moving, state) {
    robotMoving = moving;
    const statusDisplay = document.getElementById('movement-status-display');
    const robotState = document.getElementById('robot-state');
    const speedInfo = document.getElementById('speed-info');

    robotState.textContent = state;


    if (moving) {
        statusDisplay.className = 'movement-status moving';
        speedInfo.textContent = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏';
    } else {
        statusDisplay.className = 'movement-status stopped';
        speedInfo.textContent = '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ';
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥
async function sendCommand(url, method, data = null) {
    try {
        const options = {
            method: method,
            headers: {
                'Content-Type': 'application/json',
            }
        };

        if (data) {
            options.body = JSON.stringify(data);
        }

        const response = await fetch(url, options);
        const result = await response.json();

        if (!result.success) {
            showAlert(`–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${result.error}`, 'danger');
        }

        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
        showAlert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'danger');
        return { success: false };
    }
}

function getDirectionText(direction, isMoving) {
    if (!isMoving) return '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';

    switch (direction) {
        case 1: return '–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥';
        case 2: return '–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥';
        case 3: return '–ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ';
        case 4: return '–ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ';
        default: return '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞
function updateSensorDisplay(sensor, distance) {
    const valueElement = document.getElementById(`${sensor}-distance`);
    const cardElement = document.getElementById(`${sensor}-sensor`);

    if (!valueElement || !cardElement) return;

    // —Å–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ "—Å–∏–≥–Ω–∞–ª—å–Ω—ã—Ö" –∫–ª–∞—Å—Å–æ–≤
    valueElement.classList.remove('text-danger', 'text-warning');
    cardElement.classList.remove('border-danger', 'border-warning');

    if (distance === 999) {
        valueElement.textContent = 'ERR';
        valueElement.classList.add('text-danger');
        cardElement.classList.add('border-danger');
        return;
    }

    valueElement.textContent = distance;

    if (distance < 10) {
        valueElement.classList.add('text-danger');
        cardElement.classList.add('border-danger');
    } else if (distance < 20) {
        valueElement.classList.add('text-warning');
        cardElement.classList.add('border-warning');
    }
}

function updateEnvDisplay(temp, hum) {
    const tEl = document.getElementById('temperature-value');
    const hEl = document.getElementById('humidity-value');
    const tCard = document.getElementById('temp-sensor');
    const hCard = document.getElementById('hum-sensor');

    if (!tEl || !hEl || !tCard || !hCard) return;

    // —Å–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    [tEl, hEl].forEach(el => el.classList.remove('text-danger', 'text-warning'));
    [tCard, hCard].forEach(el => el.classList.remove('border-danger', 'border-warning'));

    // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    if (temp == null) {
        tEl.textContent = 'ERR';
        tEl.classList.add('text-danger');
        tCard.classList.add('border-danger');
    } else {
        tEl.textContent = temp.toFixed(1);
        if (temp >= 35) { tEl.classList.add('text-danger'); tCard.classList.add('border-danger'); }
        else if (temp >= 30) { tEl.classList.add('text-warning'); tCard.classList.add('border-warning'); }
    }

    // –í–ª–∞–∂–Ω–æ—Å—Ç—å
    if (hum == null) {
        hEl.textContent = 'ERR';
        hEl.classList.add('text-danger');
        hCard.classList.add('border-danger');
    } else {
        hEl.textContent = hum.toFixed(1);
        if (hum <= 20) { hEl.classList.add('text-warning'); hCard.classList.add('border-warning'); }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function updateConnectionStatus(connected) {
    const el = document.getElementById('connection-status');
    if (!el) return;
    el.classList.toggle('active', !!connected);
}

function updateMovementStatusIndicator(moving) {
    const el = document.getElementById('movement-status');
    if (!el) return;
    el.classList.toggle('active', !!moving);
}

function updateObstacleStatus(obstacles) {
    const el = document.getElementById('obstacle-status');
    if (!el) return;
    // –æ–∂–∏–¥–∞–ª–∏ boolean ‚Äî —Ç–µ–ø–µ—Ä—å –ø–æ–¥–∞—ë–º boolean (anyObstacle)
    el.classList.toggle('warning', !!obstacles);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è—Ö
function updateObstacleWarnings(obstacles) {
    const warningsContainer = document.getElementById('obstacle-warnings');
    warningsContainer.innerHTML = '';

    const warnings = [];

    if (obstacles.center_front) {
        warnings.push('üö´ –ü–†–ï–ü–Ø–¢–°–¢–í–ò–ï –ü–û –¶–ï–ù–¢–†–£ –°–ü–ï–†–ï–î–ò');
    }
    if (obstacles.left_front) {
        warnings.push('üö´ –ü–†–ï–ü–Ø–¢–°–¢–í–ò–ï –°–õ–ï–í–ê –°–ü–ï–†–ï–î–ò');
    }
    if (obstacles.right_front) {
        warnings.push('üö´ –ü–†–ï–ü–Ø–¢–°–¢–í–ò–ï –°–ü–†–ê–í–ê –°–ü–ï–†–ï–î–ò');
    }
    if (obstacles.left_rear) {
        warnings.push('üö´ –ü–†–ï–ü–Ø–¢–°–¢–í–ò–ï –°–õ–ï–í–ê –°–ó–ê–î–ò');
    }
    if (obstacles.right_rear) {
        warnings.push('üö´ –ü–†–ï–ü–Ø–¢–°–¢–í–ò–ï –°–ü–†–ê–í–ê –°–ó–ê–î–ò');
    }

    warnings.forEach(warning => {
        const warningDiv = document.createElement('div');
        warningDiv.className = 'alert alert-danger py-1 mb-1';
        warningDiv.textContent = warning;
        warningsContainer.appendChild(warningDiv);
    });

    if (warnings.length === 0) {
        const clearDiv = document.createElement('div');
        clearDiv.className = 'alert alert-success py-1 mb-0';
        clearDiv.textContent = '‚úÖ –ü—É—Ç—å —Å–≤–æ–±–æ–¥–µ–Ω';
        warningsContainer.appendChild(clearDiv);
    }
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showAlert(message, type = 'success') {
    const wrap = document.getElementById('alert-container');

    // –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã
    wrap.innerHTML = '';

    // —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    const div = document.createElement('div');
    div.className = `alert alert-${type} shadow`;
    div.role = 'alert';
    div.textContent = message;

    wrap.appendChild(div);

    // –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
    setTimeout(() => {
        if (div.parentNode) div.remove();
    }, 3000);
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
document.addEventListener('keydown', function (event) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ input —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    if (event.target.tagName === 'INPUT') return;

    const photoModal = document.getElementById('photo-modal');
    if (photoModal && photoModal.style.display === 'block') return;

    switch (event.key.toLowerCase()) {
        case 'w':
        case 'arrowup':
            event.preventDefault();
            moveForward();
            break;
        case 's':
        case 'arrowdown':
            event.preventDefault();
            moveBackward();
            break;
        case 'a':
            event.preventDefault();
            tankTurnLeft();
            break;
        case 'd':
            event.preventDefault();
            tankTurnRight();
            break;
        case ' ':
            event.preventDefault();
            stopRobot();
            break;
        case 'escape':
            event.preventDefault();
            emergencyStop();
            break;
    }
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
window.addEventListener('beforeunload', function (event) {
    if (robotMoving) {
        event.preventDefault();
        event.returnValue = '–†–æ–±–æ—Ç –≤—Å–µ –µ—â–µ –¥–≤–∏–∂–µ—Ç—Å—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?';
        return event.returnValue;
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞
document.addEventListener('visibilitychange', function () {
    if (document.hidden && robotMoving) {
        console.log('–û–∫–Ω–æ –ø–æ—Ç–µ—Ä—è–ª–æ —Ñ–æ–∫—É—Å - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞');
        stopRobot();
    }
});


// === –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –≠–ù–ö–û–î–ï–†–û–í –ò –†–û–ë–û–†–£–ö–ò ===

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–Ω–∫–æ–¥–µ—Ä–æ–≤
function updateEncoderDisplay(encoders) {
    if (!encoders) return;

    // –°–∫–æ—Ä–æ—Å—Ç–∏ –∫–æ–ª–µ—Å
    updateElement('left-wheel-speed', (encoders.left_wheel_speed || 0).toFixed(3));
    updateElement('right-wheel-speed', (encoders.right_wheel_speed || 0).toFixed(3));

    // –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
    updateElement('linear-velocity', (encoders.average_speed || 0).toFixed(3));

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≥–ª–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
    const wheelbase = 0.2; // –º–µ—Ç—Ä—ã, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–ª–µ—Å–∞–º–∏
    const angularVel = ((encoders.right_wheel_speed || 0) - (encoders.left_wheel_speed || 0)) / wheelbase;
    updateElement('angular-velocity', angularVel.toFixed(3));

    // –¶–≤–µ—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
    updateEncoderColors(encoders);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–±–æ—Ä—É–∫–∏  
function updateArmDisplay(arm) {
    if (!arm || !arm.current_angles) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–ª—ã —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–≤
    for (let i = 0; i < 5; i++) {
        if (arm.current_angles[i] !== undefined) {
            updateElement(`servo-${i}-angle`, `${arm.current_angles[i]}¬∞`);
            updateElement(`arm-servo-${i}-display`, `${arm.current_angles[i]}¬∞`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
            const slider = document.getElementById(`servo-${i}-slider`);
            if (slider && !slider.matches(':focus')) {
                slider.value = arm.current_angles[i];
            }
        }
    }

    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Ä–æ–±–æ—Ä—É–∫–∏
    const statusIndicator = document.getElementById('arm-status-indicator');
    if (statusIndicator) {
        statusIndicator.className = arm.available ? 'status-indicator status-active' : 'status-indicator status-inactive';
    }

    updateElement('arm-last-update', new Date().toLocaleTimeString());
}

// –¶–≤–µ—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ —ç–Ω–∫–æ–¥–µ—Ä–æ–≤
function updateEncoderColors(encoders) {
    const leftSpeed = Math.abs(encoders.left_wheel_speed || 0);
    const rightSpeed = Math.abs(encoders.right_wheel_speed || 0);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
    updateElementColor('left-wheel-sensor', getSpeedColor(leftSpeed));
    updateElementColor('right-wheel-sensor', getSpeedColor(rightSpeed));
    updateElementColor('linear-velocity-sensor', getSpeedColor(Math.abs(encoders.average_speed || 0)));

    // –£–≥–ª–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (—Ä–∞–∑–Ω–æ—Å—Ç—å —Å–∫–æ—Ä–æ—Å—Ç–µ–π –∫–æ–ª–µ—Å)
    const speedDiff = Math.abs(encoders.speed_difference || 0);
    updateElementColor('angular-velocity-sensor', getTurnColor(speedDiff));
}

// –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
function getSpeedColor(speed) {
    if (speed > 0.15) return 'text-success';      // –±—ã—Å—Ç—Ä–æ (–∑–µ–ª–µ–Ω—ã–π)
    if (speed > 0.05) return 'text-warning';     // —Å—Ä–µ–¥–Ω–µ (–∂–µ–ª—Ç—ã–π)  
    if (speed > 0.01) return 'text-info';        // –º–µ–¥–ª–µ–Ω–Ω–æ (—Å–∏–Ω–∏–π)
    return 'text-muted';                         // –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Å–µ—Ä—ã–π)
}

// –¶–≤–µ—Ç –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞
function getTurnColor(speedDiff) {
    if (speedDiff > 0.1) return 'text-danger';   // —Å–∏–ª—å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç (–∫—Ä–∞—Å–Ω—ã–π)
    if (speedDiff > 0.05) return 'text-warning'; // —Å—Ä–µ–¥–Ω–∏–π –ø–æ–≤–æ—Ä–æ—Ç (–∂–µ–ª—Ç—ã–π)
    return 'text-success';                       // –ø—Ä—è–º–æ (–∑–µ–ª–µ–Ω—ã–π)
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
function updateElementColor(elementId, colorClass) {
    const element = document.getElementById(elementId);
    if (element) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã, –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        const baseClasses = element.className.replace(/text-\w+/g, '').trim();
        element.className = `${baseClasses} ${colorClass}`.trim();
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function updateElement(elementId, value) {
    const element = document.getElementById(elementId);
    if (element) {
        element.textContent = value;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
function updateSensorDisplayNew(sensors) {
    if (!sensors) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ 5 –¥–∞—Ç—á–∏–∫–æ–≤
    updateSensorDisplay('left-front', sensors.left_front);
    updateSensorDisplay('right-front', sensors.right_front);
    updateSensorDisplay('left-rear', sensors.left_rear);
    updateSensorDisplay('center-front', sensors.front_center);  // –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    updateSensorDisplay('right-rear', sensors.rear_right);     // –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    updateSensorColorsNew(sensors);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–∞—Ç—á–∏–∫–æ–≤ (–¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
function updateSensorColorsNew(sensors) {
    const sensorElements = [
        { id: 'left-front-sensor', value: sensors.left_front, threshold: 20 },
        { id: 'right-front-sensor', value: sensors.right_front, threshold: 20 },
        { id: 'left-rear-sensor', value: sensors.left_rear, threshold: 25 },
        { id: 'center-front-sensor', value: sensors.front_center, threshold: 15 },
        { id: 'right-rear-sensor', value: sensors.rear_right, threshold: 25 }
    ];

    sensorElements.forEach(({ id, value, threshold }) => {
        const element = document.getElementById(id);
        if (element && value !== undefined) {
            let colorClass;
            if (value === 999) {
                colorClass = 'text-muted';      // –æ—à–∏–±–∫–∞ –¥–∞—Ç—á–∏–∫–∞
            } else if (value < threshold) {
                colorClass = 'text-danger';     // –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –±–ª–∏–∑–∫–æ
            } else if (value < threshold * 2) {
                colorClass = 'text-warning';    // –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            } else {
                colorClass = 'text-success';    // —Å–≤–æ–±–æ–¥–Ω–æ
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
            const valueElement = element.querySelector('.fw-bold') || element.querySelector('#' + id.replace('-sensor', '-distance'));
            if (valueElement) {
                valueElement.className = valueElement.className.replace(/text-\w+/g, '').trim() + ` ${colorClass}`;
            }
        }
    });
}


// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–Ω–æ–≥–æ ¬´—Å—Ä–µ–∑–∞¬ª —Å—Ç–∞—Ç—É—Å–∞
function applyRobotStatus(status) {
    if (!status) return;

    updateConnectionStatus(true);
    updateMovementStatusIndicator(status.is_moving || (status.motion && status.motion.is_moving));

    // === –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–û–ô –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• ===

    // –î–≤–∏–∂–µ–Ω–∏–µ (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    const motion = status.motion || status;
    const isMoving = motion.is_moving || status.is_moving;
    const direction = motion.direction || status.movement_direction;

    const directionText = getDirectionText(direction, isMoving);
    updateMovementState(isMoving, directionText);

    // === –î–ê–¢–ß–ò–ö–ò –†–ê–°–°–¢–û–Ø–ù–ò–Ø (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞) ===
    if (status.distance_sensors) {
        updateSensorDisplayNew(status.distance_sensors);
    } else {
        // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        updateSensorDisplay('center-front', status.center_front_distance);
        updateSensorDisplay('left-front', status.left_front_distance);
        updateSensorDisplay('right-front', status.right_front_distance);
        updateSensorDisplay('right-rear', status.right_rear_distance);
        updateSensorDisplay('left-rear', status.left_rear_distance);
    }

    // === –ö–õ–ò–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï ===
    if (status.environment) {
        updateEnvDisplay(status.environment.temperature, status.environment.humidity);
    } else {
        // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        updateEnvDisplay(status.temperature, status.humidity);
    }

    // === –ù–û–í–´–ï –î–ê–ù–ù–´–ï: –≠–ù–ö–û–î–ï–†–´ ===
    if (status.encoders) {
        updateEncoderDisplay(status.encoders);
    }

    // === –ù–û–í–´–ï –î–ê–ù–ù–´–ï: –†–û–ë–û–†–£–ö–ê ===
    if (status.arm) {
        updateArmDisplay(status.arm);
    }

    // === –ü–†–ï–ü–Ø–¢–°–¢–í–ò–Ø ===
    const obstacles = status.obstacles || {};
    updateObstacleWarnings(obstacles);
    const anyObstacle = Object.values(obstacles).some(Boolean);
    updateObstacleStatus(anyObstacle);

    // === –û–°–¢–ê–õ–¨–ù–û–ï (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===

    // IMU (–∑–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–æ–¥—É–ª—è)
    if (window.imuControl && typeof window.imuControl.updateIMUData === 'function') {
        window.imuControl.updateIMUData(status);
    }

    // –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const el = document.getElementById('last-update');
    if (el) el.textContent = new Date().toLocaleTimeString();

    // —É–≥–ª—ã –∫–∞–º–µ—Ä—ã
    if (window.cameraControl && typeof window.cameraControl.updateAnglesFromStatus === 'function') {
        window.cameraControl.updateAnglesFromStatus(status);
    }

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ω–æ–≤—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —ç–Ω–∫–æ–¥–µ—Ä–æ–≤/—Ä–æ–±–æ—Ä—É–∫–∏
    if (typeof window.handleEncoderArmData === 'function') {
        window.handleEncoderArmData({ robot: status });
    }

    lastUpdateTime = Date.now();
    connectionActive = true;
}

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ SSE (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ ai-detector.js, –Ω–æ –ª–æ–≥–∏—á–Ω–µ–µ –¥–µ—Ä–∂–∞—Ç—å –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ)
function startTelemetrySSE_All() {
    const es = new EventSource('/api/events');
    es.onmessage = (ev) => {
        const msg = JSON.parse(ev.data || '{}');
        if (msg.robot) applyRobotStatus(msg.robot);
        if (msg.camera) updateCameraStatus(msg.camera);
        if (msg.ai) {
            const aiFpsEl = document.getElementById('ai-processing-fps');
            if (aiFpsEl && typeof msg.ai.fps === 'number') {
                aiFpsEl.textContent = `AI: ${msg.ai.fps.toFixed(1)} FPS`;
            }

            const total = document.getElementById('ai-objects-count');
            if (total && typeof msg.ai.count === 'number') {
                total.textContent = msg.ai.count;
            }

            setAIDetectorStatus((msg.ai.count ?? 0) > 0);
            if (msg.ai.last_ts) setAiLastUpdate(msg.ai.last_ts * 1000);

            // üí° –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º UI –∏–∑ SSE
            if (Array.isArray(msg.ai.detections)) {
                updateDetectionDisplay(msg.ai.detections);
                updateDetectionStats(msg.ai.detections);
                updateSimpleDetection(msg.ai.detections);
            }
        }
    };
    es.onerror = () => {
        updateConnectionStatus(false);
        // –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ; –±—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function () {
    console.log('ü§ñ UI –∑–∞–≥—Ä—É–∂–µ–Ω');

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ SSE, –±–µ–∑ —á–∞—Å—Ç–æ–≥–æ fetch('/api/status')
    startTelemetrySSE_All();

    if (typeof initVelocitySlider === 'function') {
        initVelocitySlider();
    }
    if (typeof initArmSliders === 'function') {
        initArmSliders();
    }

    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–Ω–∫–æ–¥–µ—Ä–∞–º–∏ –∏ —Ä–æ–±–æ—Ä—É–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    showAlert('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: W/S ‚Äì –≤–ø–µ—Ä—ë–¥/–Ω–∞–∑–∞–¥, A/D ‚Äì –ø–æ–≤–æ—Ä–æ—Ç—ã, –ü—Ä–æ–±–µ–ª ‚Äì —Å—Ç–æ–ø', 'success');
});