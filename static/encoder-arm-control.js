// encoder-arm-control.js ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–Ω–∫–æ–¥–µ—Ä–∞–º–∏ –∏ —Ä–æ–±–æ—Ä—É–∫–æ–π, –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ UI
// –ò—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –ø–æ –¥–∞–Ω–Ω—ã–º ‚Äî SSE –∏–∑ /api/events (—Å–∫–∞—Ä–º–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑ script.js —á–µ—Ä–µ–∑ window.handleEncoderArmData).

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ====================

function updateElement(id, value) {
    const el = document.getElementById(id);
    if (el) el.textContent = value;
}

// ==================== –≠–ù–ö–û–î–ï–†–´ ====================

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± —ç–Ω–∫–æ–¥–µ—Ä–∞—Ö –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –∏—Ö –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ script.js
function updateEncoderData(payload) {
    if (!payload || !payload.encoders) return;
    if (typeof window.updateEncoderDisplay === 'function') {
        window.updateEncoderDisplay(payload.encoders); // –µ–¥–∏–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –≤ script.js
    }
}

// (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Ä–∞–∑–æ–≤–∞—è –ø–æ–¥–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ –ø—Ä–∏—Ö–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ SSE
async function loadEncoderData() {
    try {
        const resp = await fetch('/api/encoders/status');
        const result = await resp.json();
        if (result?.success) {
            updateEncoderData(result.data);
        }
    } catch (e) {
        console.debug('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–Ω–∫–æ–¥–µ—Ä–æ–≤:', e.message);
    }
}

// ==================== –†–û–ë–û–†–£–ö–ê ====================

let currentArmAngles = [90, 90, 90, 90, 90];

// –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Ä—É–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ script.js (updateArmDisplay)
function updateArmStatus(armData) {
    if (!armData || !Array.isArray(armData.current_angles)) return;

    currentArmAngles = armData.current_angles.slice();

    if (typeof window.updateArmDisplay === 'function') {
        window.updateArmDisplay(armData);
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–ª–∞–π–¥–µ—Ä—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Ö —Å–µ–π—á–∞—Å –Ω–µ –¥–≤–∏–≥–∞–µ—Ç
    for (let i = 0; i < 5; i++) {
        const slider = document.getElementById(`servo-${i}-slider`);
        if (slider && !slider.matches(':focus')) {
            slider.value = currentArmAngles[i];
        }
    }
}

async function updateServoAngle(servoId, angle) {
    try {
        const resp = await fetch('/api/arm/servo', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ servo_id: Number(servoId), angle: Number(angle) })
        });
        const result = await resp.json();
        if (result?.success) {
            currentArmAngles[servoId] = result.actual_angle;
            updateArmStatus({ current_angles: currentArmAngles });
        } else {
            if (typeof showAlert === 'function') showAlert(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞ ${servoId}`, 'warning');
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–º:', e);
        if (typeof showAlert === 'function') showAlert('–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Ä–æ–±–æ—Ç–æ–º', 'danger');
    }
}

async function moveServoRelative(servoId, delta) {
    try {
        const resp = await fetch('/api/arm/servo/relative', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ servo_id: Number(servoId), delta: Number(delta) })
        });
        const result = await resp.json();
        if (result?.success && Array.isArray(result.current_angles)) {
            updateArmStatus({ current_angles: result.current_angles });
            if (typeof showAlert === 'function') showAlert(`–°–µ—Ä–≤–æ ${servoId}: ${delta > 0 ? '+' : ''}${delta}¬∞`, 'info');
        } else {
            if (typeof showAlert === 'function') showAlert(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞ ${servoId}`, 'warning');
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞:', e);
        if (typeof showAlert === 'function') showAlert('–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Ä–æ–±–æ—Ç–æ–º', 'danger');
    }
}

async function resetArm() {
    try {
        const resp = await fetch('/api/arm/reset', { method: 'POST', headers: { 'Content-Type': 'application/json' } });
        const result = await resp.json();
        if (result?.success && Array.isArray(result.current_angles)) {
            updateArmStatus({ current_angles: result.current_angles });
            if (typeof showAlert === 'function') showAlert('–†–æ–±–æ—Ä—É–∫–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏', 'success');
        } else {
            if (typeof showAlert === 'function') showAlert('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–æ–±–æ—Ä—É–∫–∏', 'danger');
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–æ–±–æ—Ä—É–∫–∏:', e);
        if (typeof showAlert === 'function') showAlert('–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Ä–æ–±–æ—Ç–æ–º', 'danger');
    }
}

async function openGripper() {
    try {
        const resp = await fetch('/api/arm/gripper/open', { method: 'POST', headers: { 'Content-Type': 'application/json' } });
        const result = await resp.json();
        if (result?.success && Array.isArray(result.current_angles)) {
            updateArmStatus({ current_angles: result.current_angles });
            if (typeof showAlert === 'function') showAlert('–ó–∞—Ö–≤–∞—Ç –æ—Ç–∫—Ä—ã—Ç', 'success');
        } else {
            if (typeof showAlert === 'function') showAlert('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞—Ö–≤–∞—Ç–∞', 'warning');
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞—Ö–≤–∞—Ç–∞:', e);
        if (typeof showAlert === 'function') showAlert('–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Ä–æ–±–æ—Ç–æ–º', 'danger');
    }
}

async function closeGripper() {
    try {
        const resp = await fetch('/api/arm/gripper/close', { method: 'POST', headers: { 'Content-Type': 'application/json' } });
        const result = await resp.json();
        if (result?.success && Array.isArray(result.current_angles)) {
            updateArmStatus({ current_angles: result.current_angles });
            if (typeof showAlert === 'function') showAlert('–ó–∞—Ö–≤–∞—Ç –∑–∞–∫—Ä—ã—Ç', 'warning');
        } else {
            if (typeof showAlert === 'function') showAlert('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—Ö–≤–∞—Ç–∞', 'warning');
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—Ö–≤–∞—Ç–∞:', e);
        if (typeof showAlert === 'function') showAlert('–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Ä–æ–±–æ—Ç–æ–º', 'danger');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ —Ä–æ–±–æ—Ä—É–∫–∏ (–¥–µ–ª–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–≤—å—é –∏ —à–ª–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ —Å–æ–±—ã—Ç–∏—é change)
function initArmSliders() {
    for (let i = 0; i < 5; i++) {
        const slider = document.getElementById(`servo-${i}-slider`);
        if (!slider) continue;

        slider.addEventListener('input', (e) => {
            const angle = Number(e.target.value);
            updateElement(`servo-${i}-angle`, `${angle}¬∞`);
            updateElement(`arm-servo-${i}-display`, `${angle}¬∞`);
        });

        slider.addEventListener('change', (e) => {
            const angle = Number(e.target.value);
            updateServoAngle(i, angle);
        });
    }
}

// (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Ä–∞–∑–æ–≤–∞—è –ø–æ–¥–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä—É–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ –ø–µ—Ä–≤–æ–≥–æ SSE
async function loadArmStatus() {
    try {
        const resp = await fetch('/api/arm/status');
        const result = await resp.json();
        if (result?.success && result.data) {
            updateArmStatus(result.data);
        }
    } catch (e) {
        console.debug('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–æ–±–æ—Ä—É–∫–∏:', e.message);
    }
}

// ==================== –ú–û–°–¢ –î–õ–Ø SSE –ò–ó script.js ====================

function handleEncoderArmSSEData(data) {
    // –¢–µ—Ä–ø–∏–º —Ñ–æ—Ä–º–∞—Ç: –ª–∏–±–æ { robot: {...} }, –ª–∏–±–æ —Å—Ä–∞–∑—É {...}
    const robot = data?.robot || data;
    if (!robot) return;

    if (robot.encoders) updateEncoderData({ encoders: robot.encoders });
    if (robot.arm) updateArmStatus(robot.arm);
}

if (typeof window !== 'undefined') {
    window.handleEncoderArmData = handleEncoderArmSSEData;
}

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

document.addEventListener('DOMContentLoaded', () => {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è encoder-arm-control...');
    initArmSliders();

    // –†–∞–∑–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (fallback –¥–æ –ø–µ—Ä–≤–æ–≥–æ SSE). –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–µ —Å—Ç–∞–≤–∏–º, —á—Ç–æ–±—ã –Ω–µ –≥–æ–Ω—è—Ç—å —Å SSE.
    loadEncoderData();
    loadArmStatus();

    console.log('‚úÖ encoder-arm-control –≥–æ—Ç–æ–≤ (—Ä–µ–Ω–¥–µ—Ä ‚Äî —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ script.js, –¥–∞–Ω–Ω—ã–µ ‚Äî –∏–∑ SSE).');
});