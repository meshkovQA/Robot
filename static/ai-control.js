// static/ai-control.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Ä–æ–±–æ—Ç–∞

// ==================== AI –°–û–°–¢–û–Ø–ù–ò–ï ====================

let aiActive = false;
let aiStreamActive = false;
let followPersonMode = false;
let avoidPeopleMode = true;
let smartNavigationMode = false;

// ==================== AI –£–ü–†–ê–í–õ–ï–ù–ò–ï ====================

async function toggleAI() {
    //–ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ AI —Å–∏—Å—Ç–µ–º—ã
    const btn = document.getElementById('ai-toggle-btn');

    if (!aiActive) {
        // –ó–∞–ø—É—Å–∫–∞–µ–º AI
        try {
            showAlert('üß† –ó–∞–ø—É—Å–∫ AI —Å–∏—Å—Ç–µ–º—ã...', 'info');

            const response = await fetch('/api/ai/start', { method: 'POST' });
            const data = await response.json();

            if (data.success) {
                aiActive = true;
                btn.textContent = '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AI';
                btn.className = 'btn btn-sm btn-danger ms-auto';
                showAlert('üß† AI —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                setTimeout(updateAIData, 1000);
            } else {
                showAlert(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AI: ${data.error}`, 'danger');
            }
        } catch (error) {
            console.error('AI start error:', error);
            showAlert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å AI —Å–∏—Å—Ç–µ–º–æ–π', 'danger');
        }
    } else {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AI
        try {
            showAlert('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI —Å–∏—Å—Ç–µ–º—ã...', 'warning');

            const response = await fetch('/api/ai/stop', { method: 'POST' });
            const data = await response.json();

            if (data.success) {
                aiActive = false;
                btn.textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å AI';
                btn.className = 'btn btn-sm btn-outline-primary ms-auto';
                showAlert('üõë AI —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', 'warning');

                // –û—á–∏—â–∞–µ–º AI –¥–∞–Ω–Ω—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                clearAIDisplay();
            }
        } catch (error) {
            console.error('AI stop error:', error);
            showAlert('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AI —Å–∏—Å—Ç–µ–º—ã', 'danger');
        }
    }
}

// ==================== AI –†–ï–ñ–ò–ú–´ ====================

async function toggleFollowPerson(enable) {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —á–µ–ª–æ–≤–µ–∫–æ–º
    try {
        const response = await fetch('/api/ai/follow_person', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ enable })
        });

        const data = await response.json();
        if (data.success) {
            followPersonMode = enable;
            const message = enable ?
                'üë§ –†–µ–∂–∏–º —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —á–µ–ª–æ–≤–µ–∫–æ–º –≤–∫–ª—é—á–µ–Ω' :
                'üë§ –†–µ–∂–∏–º —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —á–µ–ª–æ–≤–µ–∫–æ–º –≤—ã–∫–ª—é—á–µ–Ω';
            showAlert(message, 'info');

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            updateFollowPersonIndicator(enable);
        } else {
            showAlert(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: ${data.error}`, 'danger');
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ–∫–±–æ–∫—Å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            document.getElementById('follow-person-mode').checked = !enable;
        }
    } catch (error) {
        console.error('Follow person toggle error:', error);
        showAlert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', 'danger');
        document.getElementById('follow-person-mode').checked = !enable;
    }
}

async function toggleAvoidPeople(enable) {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∏–∑–±–µ–∂–∞–Ω–∏—è –ª—é–¥–µ–π
    try {
        const response = await fetch('/api/ai/avoid_people', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ enable })
        });

        const data = await response.json();
        if (data.success) {
            avoidPeopleMode = enable;
            const message = enable ?
                'üö∂ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ª—é–¥–µ–π –≤–∫–ª—é—á–µ–Ω–æ' :
                'üö∂ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ª—é–¥–µ–π –≤—ã–∫–ª—é—á–µ–Ω–æ';
            showAlert(message, 'info');
        } else {
            showAlert(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: ${data.error}`, 'danger');
            document.getElementById('avoid-people-mode').checked = !enable;
        }
    } catch (error) {
        console.error('Avoid people toggle error:', error);
        showAlert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∏–∑–±–µ–∂–∞–Ω–∏—è', 'danger');
        document.getElementById('avoid-people-mode').checked = !enable;
    }
}

async function toggleSmartNavigation(enable) {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —É–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    try {
        const response = await fetch('/api/ai/smart_navigation', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ enable })
        });

        const data = await response.json();
        if (data.success) {
            smartNavigationMode = enable;
            const message = enable ?
                'üß≠ –£–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞' :
                'üß≠ –£–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞';
            showAlert(message, 'info');
        } else {
            showAlert(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${data.error}`, 'danger');
            document.getElementById('smart-navigation-mode').checked = !enable;
        }
    } catch (error) {
        console.error('Smart navigation toggle error:', error);
        showAlert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', 'danger');
        document.getElementById('smart-navigation-mode').checked = !enable;
    }
}

// ==================== AI –î–í–ò–ñ–ï–ù–ò–ï ====================

async function aiSmartMoveForward() {
    // –£–º–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ —Å AI –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    if (!aiActive) {
        showAlert('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ AI —Å–∏—Å—Ç–µ–º—É', 'warning');
        return;
    }

    const speed = parseInt(document.getElementById('speed-slider').value);

    try {
        showAlert(`üß† –í—ã–ø–æ–ª–Ω—è—é —É–º–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ (${speed})...`, 'info');

        const response = await fetch('/api/ai/smart_move/forward', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ speed })
        });

        const data = await response.json();
        if (data.success) {
            showAlert(`üß† –£–º–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (${speed})`, 'success');
            updateMovementState(true, 'AI –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥');
        } else {
            showAlert(data.message || 'üö´ AI –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–≤–∏–∂–µ–Ω–∏–µ', 'warning');
        }
    } catch (error) {
        console.error('AI smart move error:', error);
        showAlert('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–º–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è', 'danger');
    }
}

async function aiNavigateTo() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ü–µ–ª–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
    if (!aiActive) {
        showAlert('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ AI —Å–∏—Å—Ç–µ–º—É', 'warning');
        return;
    }

    const target = document.getElementById('ai-navigation-target').value.trim();

    if (!target) {
        showAlert('üí≠ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫—É—Ö–Ω—è, –¥–∏–≤–∞–Ω)', 'warning');
        document.getElementById('ai-navigation-target').focus();
        return;
    }

    try {
        showAlert(`üéØ –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫: ${target}`, 'info');

        const response = await fetch('/api/ai/navigate_to', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ description: target })
        });

        const data = await response.json();
        if (data.success) {
            showAlert(`üéØ –ù–∞—á–∏–Ω–∞—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫: ${target}`, 'success');
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            document.getElementById('ai-navigation-target').value = '';
        } else {
            showAlert(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${data.error}`, 'danger');
        }
    } catch (error) {
        console.error('AI navigation error:', error);
        showAlert('–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', 'danger');
    }
}

// ==================== AI –í–ò–î–ï–û–ü–û–¢–û–ö ====================

function toggleAIStream() {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –æ–±—ã—á–Ω—ã–º –∏ AI –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–º
    const normalStream = document.getElementById('camera-stream');
    const aiStream = document.getElementById('ai-stream');
    const btn = document.getElementById('ai-stream-btn');

    if (!aiStream) {
        console.error('AI stream element not found');
        showAlert('‚ùå AI –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'danger');
        return;
    }

    if (!aiStreamActive) {
        // –í–∫–ª—é—á–∞–µ–º AI –ø–æ—Ç–æ–∫
        normalStream.style.display = 'none';
        aiStream.style.display = 'block';
        btn.textContent = 'üìπ –û–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ';
        btn.className = 'btn btn-sm btn-info';
        aiStreamActive = true;
        showAlert('üîÆ AI –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã', 'info');
    } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É –ø–æ—Ç–æ–∫—É
        normalStream.style.display = 'block';
        aiStream.style.display = 'none';
        btn.textContent = 'üîÆ AI –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏';
        btn.className = 'btn btn-sm btn-outline-info';
        aiStreamActive = false;
        showAlert('üìπ –û–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'info');
    }
}

async function getAIFrame() {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑ AI –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–¥—Ä–∞
    if (!aiActive) {
        showAlert('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ AI —Å–∏—Å—Ç–µ–º—É', 'warning');
        return;
    }

    try {
        showAlert('üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ AI –∫–∞–¥—Ä–∞...', 'info');

        const response = await fetch('/api/ai/annotated_frame');
        const data = await response.json();

        if (data.success && data.frame) {
            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å AI –∫–∞–¥—Ä–æ–º
            showAIFrameModal(data.frame);
            showAlert('üñºÔ∏è AI –∫–∞–¥—Ä –ø–æ–ª—É—á–µ–Ω', 'success');
        } else {
            showAlert(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –∫–∞–¥—Ä–∞: ${data.error || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`, 'danger');
        }
    } catch (error) {
        console.error('Get AI frame error:', error);
        showAlert('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –∫–∞–¥—Ä–∞', 'danger');
    }
}

function showAIFrameModal(frameBase64) {
    // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å AI –∫–∞–¥—Ä–æ–º
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–æ–¥–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingModal = document.getElementById('ai-frame-modal');
    if (existingModal) {
        existingModal.remove();
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–æ–¥–∞–ª
    const modal = document.createElement('div');
    modal.id = 'ai-frame-modal';
    modal.className = 'modal fade';
    modal.innerHTML = `
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">üîÆ AI –ê–Ω–∞–ª–∏–∑ –∫–∞–¥—Ä–∞</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body text-center p-2">
                    <img src="data:image/jpeg;base64,${frameBase64}" 
                         class="img-fluid rounded shadow" 
                         alt="AI –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–¥—Ä"
                         style="max-height: 70vh;">
                </div>
                <div class="modal-footer">
                    <small class="text-muted">AI –æ–±—Ä–∞–±–æ—Ç–∫–∞: –æ–±—ä–µ–∫—Ç—ã, –ª–∏—Ü–∞, –¥–≤–∏–∂–µ–Ω–∏–µ</small>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();

    // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
    modal.addEventListener('hidden.bs.modal', () => {
        modal.remove();
    });
}

// ==================== –û–ë–ù–û–í–õ–ï–ù–ò–ï AI –î–ê–ù–ù–´–• ====================

async function updateAIData() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö AI –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    if (!aiActive) {
        return; // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ AI –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å AI —Å–∏—Å—Ç–µ–º—ã
        const aiStatusResponse = await fetch('/api/ai/status');
        if (aiStatusResponse.ok) {
            const aiStatusData = await aiStatusResponse.json();
            if (aiStatusData.success) {
                updateAIStatus(aiStatusData.data);
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        const objectsResponse = await fetch('/api/ai/detected_objects');
        if (objectsResponse.ok) {
            const objectsData = await objectsResponse.json();
            if (objectsData.success) {
                updateAIDetection(objectsData.data);
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
        const sceneResponse = await fetch('/api/ai/scene_description');
        if (sceneResponse.ok) {
            const sceneData = await sceneResponse.json();
            if (sceneData.success) {
                updateSceneDescription(sceneData.scene_description);
            }
        }

    } catch (error) {
        console.error('AI data update error:', error);
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    }
}

function updateAIStatus(aiData) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è AI
    // AI Vision —Å—Ç–∞—Ç—É—Å
    const aiVisionStatus = document.getElementById('ai-vision-status');
    if (aiVisionStatus) {
        aiVisionStatus.classList.toggle('active', aiData.ai_vision_active || false);
    }

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    const objectsCount = document.getElementById('ai-objects-count');
    if (objectsCount) {
        objectsCount.textContent = aiData.detected_objects || 0;
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–Ω–∞—Ç—ã
    const roomContext = document.getElementById('ai-room-context');
    if (roomContext && aiData.room_context) {
        roomContext.textContent = aiData.room_context;
    }

    // FPS –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI
    const aiFps = document.getElementById('ai-fps');
    if (aiFps && aiData.processing_fps !== undefined) {
        aiFps.textContent = aiData.processing_fps.toFixed(1);
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤
    const followCheckbox = document.getElementById('follow-person-mode');
    const avoidCheckbox = document.getElementById('avoid-people-mode');
    const smartNavCheckbox = document.getElementById('smart-navigation-mode');

    if (followCheckbox) followCheckbox.checked = aiData.follow_person_mode || false;
    if (avoidCheckbox) avoidCheckbox.checked = aiData.auto_avoid_people !== false;
    if (smartNavCheckbox) smartNavCheckbox.checked = aiData.smart_navigation || false;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    followPersonMode = aiData.follow_person_mode || false;
    avoidPeopleMode = aiData.auto_avoid_people !== false;
    smartNavigationMode = aiData.smart_navigation || false;
}

function updateAIDetection(detectionData) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
    // –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã
    const objectsContainer = document.getElementById('detected-objects');
    if (objectsContainer) {
        if (detectionData.objects && detectionData.objects.length > 0) {
            const objectCounts = detectionData.object_counts || {};
            const badges = Object.entries(objectCounts).map(([name, count]) => {
                const displayCount = count > 1 ? ` (${count})` : '';
                return `<span class="badge text-bg-primary">${name}${displayCount}</span>`;
            }).join(' ');
            objectsContainer.innerHTML = badges;
        } else {
            objectsContainer.innerHTML = '<span class="badge text-bg-secondary">–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤</span>';
        }
    }

    // –ü–æ–¥—Å—á–µ—Ç –ª—é–¥–µ–π –∏ –ø–∏—Ç–æ–º—Ü–µ–≤
    const peopleCount = (detectionData.faces || []).length;
    const pets = (detectionData.objects || []).filter(obj => ['cat', 'dog', '–∫–æ—Ç', '—Å–æ–±–∞–∫–∞'].includes(obj.class_name));
    const petsCount = pets.length;

    const peopleCountEl = document.getElementById('people-count');
    const petsCountEl = document.getElementById('pets-count');

    if (peopleCountEl) peopleCountEl.textContent = peopleCount;
    if (petsCountEl) petsCountEl.textContent = petsCount;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—É—Ç–∏
    updatePathSafety({
        pets_clear: petsCount === 0,
        person_not_in_path: !detectionData.person_in_front,
        furniture_clear: true, // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é –º–µ–±–µ–ª–∏ –Ω–∞ –ø—É—Ç–∏
        motion_detected: detectionData.motion_detected || false
    });
}

function updateSceneDescription(description) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω—ã
    const sceneElement = document.getElementById('ai-scene-description');
    if (sceneElement) {
        sceneElement.textContent = description || 'AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω—É...';
    }
}

function updatePathSafety(safety) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è
    const petsBadge = document.getElementById('path-safety-pets');
    const peopleBadge = document.getElementById('path-safety-people');
    const furnitureBadge = document.getElementById('path-safety-furniture');

    if (petsBadge) {
        petsBadge.className = `badge ${safety.pets_clear ? 'text-bg-success' : 'text-bg-warning'}`;
        petsBadge.textContent = `üêï –ü–∏—Ç–æ–º—Ü—ã: ${safety.pets_clear ? '–û–ö' : '‚ö†Ô∏è'}`;
    }

    if (peopleBadge) {
        peopleBadge.className = `badge ${safety.person_not_in_path ? 'text-bg-success' : 'text-bg-danger'}`;
        peopleBadge.textContent = `üë§ –õ—é–¥–∏: ${safety.person_not_in_path ? '–û–ö' : '‚ùå'}`;
    }

    if (furnitureBadge) {
        furnitureBadge.className = `badge ${safety.furniture_clear ? 'text-bg-success' : 'text-bg-warning'}`;
        furnitureBadge.textContent = `ü™ë –ú–µ–±–µ–ª—å: ${safety.furniture_clear ? '–û–ö' : '‚ö†Ô∏è'}`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    updateNavigationHints(safety);
}

function updateNavigationHints(safety) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const hintsContainer = document.getElementById('navigation-hints');
    if (!hintsContainer) return;

    const hints = [];

    if (!safety.pets_clear) {
        hints.push('üêï –ü–∏—Ç–æ–º—Ü—ã –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ - –¥–≤–∏–≥–∞–π—Ç–µ—Å—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ');
    }

    if (!safety.person_not_in_path) {
        hints.push('üë§ –ß–µ–ª–æ–≤–µ–∫ –Ω–∞ –ø—É—Ç–∏ - –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥–∞');
    }

    if (!safety.furniture_clear) {
        hints.push('ü™ë –ú–µ–±–µ–ª—å –º–æ–∂–µ—Ç –º–µ—à–∞—Ç—å - –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –æ–±—ä–µ–∑–¥');
    }

    if (safety.motion_detected) {
        hints.push('üèÉ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ - –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å');
    }

    if (hints.length === 0) {
        hintsContainer.innerHTML = '<div class="text-success">‚úÖ –ü—É—Ç—å —Å–≤–æ–±–æ–¥–µ–Ω, –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è</div>';
    } else {
        hintsContainer.innerHTML = hints.map(hint =>
            `<div class="text-warning small">üí° ${hint}</div>`
        ).join('');
    }
}

function updateFollowPersonIndicator(enabled) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —á–µ–ª–æ–≤–µ–∫–æ–º
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    const indicator = document.querySelector('.follow-person-indicator');
    if (indicator) {
        indicator.classList.toggle('active', enabled);
    }
}

async function refreshAIDetection() {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ AI –¥–∞–Ω–Ω—ã—Ö
    showAlert('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ AI –¥–∞–Ω–Ω—ã—Ö...', 'info');
    await updateAIData();
    showAlert('‚úÖ AI –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
}

function clearAIDisplay() {
    // –û—á–∏—Å—Ç–∫–∞ AI –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ AI
    // –û—á–∏—â–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
    const objectsContainer = document.getElementById('detected-objects');
    if (objectsContainer) {
        objectsContainer.innerHTML = '<span class="badge text-bg-secondary">AI –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω</span>';
    }

    // –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    const peopleCount = document.getElementById('people-count');
    const petsCount = document.getElementById('pets-count');
    if (peopleCount) peopleCount.textContent = '0';
    if (petsCount) petsCount.textContent = '0';

    // –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
    const sceneDescription = document.getElementById('ai-scene-description');
    if (sceneDescription) {
        sceneDescription.textContent = 'AI –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω';
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    updatePathSafety({
        pets_clear: true,
        person_not_in_path: true,
        furniture_clear: true,
        motion_detected: false
    });
}

// ==================== –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò –î–õ–Ø AI ====================

function setupAIHotkeys() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –¥–ª—è AI —Ñ—É–Ω–∫—Ü–∏–π
    document.addEventListener('keydown', function (event) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
        if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
            return;
        }

        const key = event.key.toLowerCase();

        switch (key) {
            case 'i':
                event.preventDefault();
                toggleAI();
                break;

            case 'f':
                event.preventDefault();
                const followCheckbox = document.getElementById('follow-person-mode');
                if (followCheckbox) {
                    followCheckbox.click();
                }
                break;

            case 'v':
                event.preventDefault();
                toggleAIStream();
                break;

            case 'g':
                event.preventDefault();
                getAIFrame();
                break;

            case 'n': // Navigate
                event.preventDefault();
                const navInput = document.getElementById('ai-navigation-target');
                if (navInput) {
                    navInput.focus();
                }
                break;

            case 'm': // Smart move
                event.preventDefault();
                aiSmartMoveForward();
                break;
        }
    });
}

// ==================== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –û–°–ù–û–í–ù–û–ô –°–ò–°–¢–ï–ú–û–ô ====================

function initializeAI() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–∏—Å—Ç–µ–º—ã
    console.log('üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    setupAIHotkeys();

    // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º—Å—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const originalUpdateSensorData = window.updateSensorData;
    if (originalUpdateSensorData) {
        window.updateSensorData = function () {
            // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            originalUpdateSensorData();

            // –î–æ–±–∞–≤–ª—è–µ–º AI –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updateAIData();
        };

        console.log('‚úÖ AI –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º
    setTimeout(() => {
        if (typeof showAlert === 'function') {
            showAlert('üß† AI –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: I-–≤–∫–ª/–≤—ã–∫–ª, F-—Å–ª–µ–¥–æ–≤–∞—Ç—å, V-AI –≤–∏–¥–µ–æ, G-–∫–∞–¥—Ä, N-–Ω–∞–≤–∏–≥–∞—Ü–∏—è, M-—É–º–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ', 'info');
        }
    }, 8000);

    console.log('‚úÖ AI —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
}

// ==================== –≠–ö–°–ü–û–†–¢ –î–õ–Ø –î–†–£–ì–ò–• –ú–û–î–£–õ–ï–ô ====================

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.aiControl = {
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI
    toggleAI,

    // –†–µ–∂–∏–º—ã
    toggleFollowPerson,
    toggleAvoidPeople,
    toggleSmartNavigation,

    // –î–≤–∏–∂–µ–Ω–∏–µ
    aiSmartMoveForward,
    aiNavigateTo,

    // –í–∏–¥–µ–æ
    toggleAIStream,
    getAIFrame,

    // –î–∞–Ω–Ω—ã–µ
    updateAIData,
    refreshAIDetection,

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isAIActive: () => aiActive,
    getCurrentModes: () => ({
        followPerson: followPersonMode,
        avoidPeople: avoidPeopleMode,
        smartNavigation: smartNavigationMode
    })
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeAI);
} else {
    initializeAI();
}

console.log('üß† AI Control –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');