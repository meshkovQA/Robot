// camera.js - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–∞–º–µ—Ä—ã

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã
let cameraConnected = false;
let isRecording = false;
let recordingStartTime = 0;
let recordingTimer = null;
let currentFileTab = 'photos';
let streamVersion = 0;

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–∞–º–µ—Ä—ã
const cameraStatus = document.getElementById('camera-status');
const recordingIndicator = document.getElementById('recording-indicator');
const recordingTime = document.getElementById('recording-time');
const recordBtn = document.getElementById('record-btn');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∏–º–∞
let streamRetryCount = 0;
const maxStreamRetries = 3;
let streamRetryTimeout = null;

// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ú–ï–†–û–ô ====================

function takePhoto() {
    if (!cameraConnected) {
        showAlert('–ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞', 'danger');
        return;
    }

    const filename = `photo_${new Date().toISOString().replace(/[:.]/g, '-')}.jpg`;

    sendCommand('/api/camera/photo', 'POST', { filename: filename })
        .then(data => {
            if (data.success) {
                showAlert(`üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${data.data.filename}`, 'success');
                refreshFiles();
            } else {
                showAlert(`–û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ: ${data.error}`, 'danger');
            }
        })
        .catch(error => {
            showAlert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ', 'danger');
            console.error('Photo error:', error);
        });
}

function toggleRecording() {
    if (!cameraConnected) {
        showAlert('–ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞', 'danger');
        return;
    }

    if (isRecording) {
        stopRecording();
    } else {
        startRecording();
    }
}

function startRecording() {
    const filename = `video_${new Date().toISOString().replace(/[:.]/g, '-')}.mp4`;

    sendCommand('/api/camera/recording/start', 'POST', { filename: filename })
        .then(data => {
            if (data.success) {
                isRecording = true;
                recordingStartTime = Date.now();

                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                recordBtn.textContent = '‚èπÔ∏è –°—Ç–æ–ø';
                recordBtn.className = 'camera-btn btn-stop-record';
                recordingIndicator.style.display = 'block';

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–ø–∏—Å–∏
                recordingTimer = setInterval(updateRecordingTime, 1000);

                showAlert(`üé• –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞: ${data.data.filename}`, 'success');
            } else {
                showAlert(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: ${data.error}`, 'danger');
            }
        })
        .catch(error => {
            showAlert('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏', 'danger');
            console.error('Recording start error:', error);
        });
}

function stopRecording() {
    sendCommand('/api/camera/recording/stop', 'POST')
        .then(data => {
            if (data.success) {
                isRecording = false;

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                if (recordingTimer) {
                    clearInterval(recordingTimer);
                    recordingTimer = null;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                recordBtn.textContent = 'üé• –ó–∞–ø–∏—Å—å';
                recordBtn.className = 'camera-btn btn-record';
                recordingIndicator.style.display = 'none';
                recordingTime.textContent = '00:00';

                showAlert(`‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${data.data.filename}`, 'success');
                refreshFiles();
            } else {
                showAlert(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: ${data.error}`, 'danger');
            }
        })
        .catch(error => {
            showAlert('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏', 'danger');
            console.error('Recording stop error:', error);
        });
}

function updateRecordingTime() {
    if (!isRecording) return;

    const elapsed = Math.floor((Date.now() - recordingStartTime) / 1000);
    const minutes = Math.floor(elapsed / 60).toString().padStart(2, '0');
    const seconds = (elapsed % 60).toString().padStart(2, '0');
    recordingTime.textContent = `${minutes}:${seconds}`;
}

function refreshCamera() {
    showAlert('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã...', 'warning');

    sendCommand('/api/camera/restart', 'POST')
        .then(data => {
            if (data.success) {
                showAlert('‚úÖ –ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞', 'success');

                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                streamRetryCount = 0;

                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∏–º
                setTimeout(() => {
                    initializeVideoStream();
                }, 2000);
            } else {
                showAlert(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: ${data.error}`, 'danger');
            }
        })
        .catch(error => {
            showAlert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã', 'danger');
            console.error('Camera restart error:', error);
        });
}

// ==================== –£–ü–†–û–©–ï–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ò–î–ï–û–ü–û–¢–û–ö–û–ú ====================

function initializeVideoStream() {
    let cameraStream = document.getElementById('camera-stream');
    if (!cameraStream) { console.error('–≠–ª–µ–º–µ–Ω—Ç camera-stream –Ω–µ –Ω–∞–π–¥–µ–Ω'); return; }

    // –≤—ã–∫–ª—é—á–∞–µ–º AI, –µ—Å–ª–∏ –±—ã–ª –≤–∫–ª—é—á—ë–Ω
    const aiStream = document.getElementById('ai-stream');
    if (aiStream && aiStream.style.display !== 'none') {
        hardStopImgStream(aiStream).style.display = 'none';
    }

    // –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–∏–º–∞
    streamVersion++;
    streamRetryCount = 0;                   // —Å–±—Ä–æ—Å —Ä–µ—Ç—Ä–∞–µ–≤
    if (streamRetryTimeout) { clearTimeout(streamRetryTimeout); streamRetryTimeout = null; }

    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞...');
    const streamUrl = `/camera/stream?_t=${Date.now()}`;

    cameraStream = hardStopImgStream(cameraStream); // –∫–ª–æ–Ω–∏—Ä—É–µ–º —É–∑–µ–ª (—Å—Ç–∞—Ä—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ –∏—Å—á–µ–∑–∞—é—Ç)
    cameraStream = wireStreamEvents(cameraStream);  // –Ω–∞–≤–µ—à–∏–≤–∞–µ–º —Ä–æ–≤–Ω–æ 1 set onload/onerror
    cameraStream.style.display = 'block';
    cameraStream.src = streamUrl;

    console.log('–°—Ç—Ä–∏–º URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', streamUrl);
}


function handleStreamError() {
    const img = document.getElementById('camera-stream');

    // –µ—Å–ª–∏ —É–∂–µ –∂–¥—ë–º —Ä–µ—Ç—Ä–∞–π ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
    if (streamRetryTimeout) return;

    const attempt = streamRetryCount + 1;
    console.warn(`–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxStreamRetries})`);

    cameraConnected = false;
    updateCameraStatusIndicator(false);

    // –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (img) img.src = '';

    if (streamRetryCount >= maxStreamRetries) {
        console.error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω–æ');
        showAlert('–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞–∂–º–∏—Ç–µ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"', 'danger');
        if (img) img.src = '/static/no-camera.svg';
        return;
    }

    streamRetryCount++;
    const delay = 5000;
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${delay}ms`);
    streamRetryTimeout = setTimeout(() => {
        streamRetryTimeout = null;
        initializeVideoStream();
    }, delay);
}

function wireStreamEvents(img) {
    if (!img) return img;
    // —É–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    img.onload = null;
    img.onerror = null;

    const myVersion = streamVersion; // ¬´–ø—Ä–∏–∫–∞–ª—ã–≤–∞–µ–º¬ª –≤–µ—Ä—Å–∏—é –∫ —ç—Ç–æ–º—É —É–∑–ª—É

    img.onload = () => {
        // –∏–≥–Ω–æ—Ä–∏–º, –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ —É–∑–ª–∞/–≤–µ—Ä—Å–∏–∏
        if (myVersion !== streamVersion) return;
        handleStreamLoad();
    };
    img.onerror = () => {
        if (myVersion !== streamVersion) return;
        handleStreamError();
    };
    return img;
}

function handleStreamLoad() {
    console.log('‚úÖ –í–∏–¥–µ–æ–ø–æ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
    streamRetryCount = 0;
    if (streamRetryTimeout) { clearTimeout(streamRetryTimeout); streamRetryTimeout = null; }
    cameraConnected = true;
    updateCameraStatusIndicator(true);
}

function hardStopImgStream(imgEl) {
    if (!imgEl) return null;
    try {
        imgEl.src = '';
        imgEl.removeAttribute('src');
    } catch (e) { }

    const clone = imgEl.cloneNode(false);
    // –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∏–º ‚Äî —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—ë–º —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    imgEl.replaceWith(clone);
    if (clone.id === 'camera-stream') wireStreamEvents(clone);
    return clone;
}


function toggleAIStream() {
    let normalStream = document.getElementById('camera-stream');
    let aiStream = document.getElementById('ai-stream');
    const btn = document.getElementById('ai-stream-btn');
    if (!aiStream) return showAlert('‚ùå AI –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'danger');

    const aiIsOff = normalStream.style.display !== 'none';

    if (aiIsOff) {
        normalStream = hardStopImgStream(normalStream);
        normalStream.style.display = 'none';

        aiStream = hardStopImgStream(aiStream);
        aiStream.style.display = 'block';
        aiStream.src = `/api/ai/stream?fps=12&scale=0.75&quality=70&_t=${Date.now()}`;

        btn.textContent = 'üìπ –û–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ';
        btn.className = 'btn btn-sm btn-info';
        showAlert('üîÆ AI –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã', 'info');
    } else {
        aiStream = hardStopImgStream(aiStream);
        aiStream.style.display = 'none';

        normalStream = hardStopImgStream(normalStream);
        normalStream = wireStreamEvents(normalStream); // <‚Äî –í–ê–ñ–ù–û
        normalStream.style.display = 'block';
        normalStream.src = `/camera/stream?_t=${Date.now()}`;

        btn.textContent = 'üîÆ AI –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏';
        btn.className = 'btn btn-sm btn-outline-info';
        showAlert('üìπ –û–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'info');
    }
}

// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–ê–ú–ò ====================

function showFileTab(tabName, event) {
    currentFileTab = tabName;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    if (event && event.target) {
        event.target.classList.add('active');
    } else {
        // Fallback –µ—Å–ª–∏ event –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        document.querySelector(`.tab-btn[onclick*="${tabName}"]`)?.classList.add('active');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Å–ø–∏—Å–æ–∫
    document.getElementById('photos-list').style.display = tabName === 'photos' ? 'block' : 'none';
    document.getElementById('videos-list').style.display = tabName === 'videos' ? 'block' : 'none';

    refreshFiles();
}

function refreshFiles() {
    if (currentFileTab === 'photos') {
        loadPhotosList();
    } else {
        loadVideosList();
    }
}

function loadPhotosList() {
    const photosList = document.getElementById('photos-list');
    photosList.innerHTML = '<div class="file-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';

    sendCommand('/api/files/photos', 'GET')
        .then(data => {
            if (data.success) {
                displayFileList(data.data.files, 'photos-list', 'photo');
            } else {
                photosList.innerHTML = `<div class="file-error">–û—à–∏–±–∫–∞: ${data.error}</div>`;
            }
        })
        .catch(error => {
            console.error('Photo list error:', error);
            photosList.innerHTML = '<div class="file-error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ</div>';
        });
}

function loadVideosList() {
    const videosList = document.getElementById('videos-list');
    videosList.innerHTML = '<div class="file-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';

    sendCommand('/api/files/videos', 'GET')
        .then(data => {
            if (data.success) {
                displayFileList(data.data.files, 'videos-list', 'video');
            } else {
                videosList.innerHTML = `<div class="file-error">–û—à–∏–±–∫–∞: ${data.error}</div>`;
            }
        })
        .catch(error => {
            console.error('Video list error:', error);
            videosList.innerHTML = '<div class="file-error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ</div>';
        });
}

function displayFileList(files, containerId, fileType) {
    const container = document.getElementById(containerId);
    if (files.length === 0) {
        container.innerHTML = `<div class="file-empty">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö ${fileType === 'photo' ? '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π' : '–≤–∏–¥–µ–æ'}</div>`;
        return;
    }

    let html = '';
    files.forEach(file => {
        const sizeStr = formatFileSize(file.size);
        const icon = fileType === 'photo' ? 'üì∏' : 'üé•';

        html += `
      <div class="file-item">
        <div class="file-info">
          <div class="file-name">${icon} ${file.filename}</div>
          <div class="file-details">${file.created_str} ‚Ä¢ ${sizeStr}</div>
        </div>
        <div class="file-actions">
          ${fileType === 'photo'
                ? `<button class="file-action-btn" onclick="viewPhoto('${file.url}', '${file.filename}', '${file.created_str}', '${sizeStr}')">üëÅÔ∏è</button>`
                : `<button class="file-action-btn" onclick="downloadFile('${file.url}', '${file.filename}')">‚¨áÔ∏è</button>`
            }
          <button class="file-action-btn btn-danger" onclick="deleteFile('${file.path}', '${file.filename}')">üóëÔ∏è</button>
        </div>
      </div>`;
    });

    container.innerHTML = html;
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 –ë';

    const k = 1024;
    const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
}

function viewPhoto(url, filename, created, size) {
    const photoUrl = `${url}?_t=${Date.now()}`;
    document.getElementById('modal-photo').src = photoUrl;
    document.getElementById('modal-photo-name').textContent = filename;
    document.getElementById('modal-photo-details').textContent = `–°–æ–∑–¥–∞–Ω–æ: ${created} ‚Ä¢ –†–∞–∑–º–µ—Ä: ${size}`;
    document.getElementById('photo-modal').style.display = 'block';
}

function downloadFile(url, filename) {
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    showAlert(`‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${filename}`, 'success');
}

function closePhotoModal() {
    document.getElementById('photo-modal').style.display = 'none';
}

function deleteFile(filepath, filename) {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "${filename}"?`)) {
        return;
    }

    sendCommand('/api/files/delete', 'POST', { filepath: filepath })
        .then(data => {
            if (data.success) {
                showAlert(`üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${filename}`, 'warning');
                refreshFiles();
            } else {
                showAlert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${data.error}`, 'danger');
            }
        })
        .catch(error => {
            showAlert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞', 'danger');
            console.error('Delete error:', error);
        });
}

function clearOldFiles() {
    const fileType = currentFileTab === 'photos' ? '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π' : '–≤–∏–¥–µ–æ';

    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ ${fileType}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }

    const endpoint = currentFileTab === 'photos' ? '/api/files/photos' : '/api/files/videos';

    sendCommand(endpoint, 'GET')
        .then(data => {
            if (data.success) {
                const files = data.data.files;
                const weekAgo = Date.now() / 1000 - (7 * 24 * 60 * 60);
                const oldFiles = files.filter(file => file.created < weekAgo);

                if (oldFiles.length === 0) {
                    showAlert('–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π', 'warning');
                    return;
                }

                let deleted = 0;
                oldFiles.forEach(file => {
                    sendCommand('/api/files/delete', 'POST', { filepath: file.path })
                        .then(deleteData => {
                            if (deleteData.success) {
                                deleted++;
                                if (deleted === oldFiles.length) {
                                    showAlert(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deleted} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤`, 'warning');
                                    refreshFiles();
                                }
                            }
                        });
                });
            } else {
                showAlert(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: ${data.error}`, 'danger');
            }
        })
        .catch(error => {
            showAlert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤', 'danger');
            console.error('Clear files error:', error);
        });
}

// ==================== –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ö–ê–ú–ï–†–´ ====================

function updateCameraStatus(cameraData) {
    const overlayFpsEl = document.getElementById('camera-fps');          // –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    const overlayResEl = document.getElementById('camera-resolution');   // –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    const summaryFpsEl = document.getElementById('current-camera-fps');  // –µ—Å—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µ ¬´–î–∞—Ç—á–∏–∫–∏¬ª
    const statusDot = document.getElementById('camera-status');

    // helper: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –µ—Å—Ç—å
    const setText = (el, text) => { if (el) el.textContent = text; };

    if (!cameraData) {
        setText(overlayFpsEl, '-- FPS');
        setText(overlayResEl, '--x--');
        setText(summaryFpsEl, '--');
        if (statusDot) statusDot.classList.remove('active');
        cameraConnected = false;
        return;
    }

    // -------- –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º connected ----------
    const connected = !!(
        cameraData.connected ||
        cameraData.is_connected ||
        cameraData.available
    );
    cameraConnected = connected;
    if (statusDot) statusDot.classList.toggle('active', connected);

    // -------- –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º FPS –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç ----------
    let fps =
        cameraData.fps ??
        cameraData.stream_fps ??
        cameraData.stats?.fps ??
        cameraData.stream?.fps ??
        null;

    if (typeof fps === 'string') {
        const n = Number(fps);
        fps = Number.isFinite(n) ? n : null;
    }
    const fpsStr = fps == null ? '--' : (fps % 1 === 0 ? String(fps) : fps.toFixed(1));

    setText(overlayFpsEl, `${fpsStr} FPS`);
    setText(summaryFpsEl, fpsStr);

    // -------- –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ ----------
    let w, h;

    // –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª–µ–π
    w = cameraData.width ?? cameraData.stream_width ?? cameraData.config?.width ?? cameraData.resolution?.width;
    h = cameraData.height ?? cameraData.stream_height ?? cameraData.config?.height ?? cameraData.resolution?.height;

    // –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "1280x720"
    const resStr = cameraData.config?.resolution || cameraData.resolution;
    if ((!w || !h) && typeof resStr === 'string') {
        const m = resStr.match(/(\d+)\s*[xX√ó]\s*(\d+)/);
        if (m) { w = Number(m[1]); h = Number(m[2]); }
    }

    setText(overlayResEl, (w && h) ? `${w}x${h}` : '--x--');

    // -------- —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ----------
    const recording = !!cameraData.recording;
    if (recording !== isRecording) {
        isRecording = recording;

        if (isRecording) {
            recordBtn.textContent = '‚èπÔ∏è –°—Ç–æ–ø';
            recordBtn.className = 'camera-btn btn-stop-record';
            recordingIndicator.style.display = 'block';

            const already = Number(cameraData.recording_duration) || 0;
            recordingStartTime = Date.now() - already * 1000;
            if (!recordingTimer) recordingTimer = setInterval(updateRecordingTime, 1000);
        } else {
            recordBtn.textContent = 'üé• –ó–∞–ø–∏—Å—å';
            recordBtn.className = 'camera-btn btn-record';
            recordingIndicator.style.display = 'none';
            if (recordingTimer) { clearInterval(recordingTimer); recordingTimer = null; }
            recordingTime.textContent = '00:00';
        }
    }

    if (isRecording && cameraData.recording_duration != null) {
        const duration = Math.floor(Number(cameraData.recording_duration));
        const mm = String(Math.floor(duration / 60)).padStart(2, '0');
        const ss = String(duration % 60).padStart(2, '0');
        recordingTime.textContent = `${mm}:${ss}`;
    }
}

function updateCameraStatusIndicator(connected) {
    if (!cameraStatus) return;
    cameraStatus.className = connected ? 'status-indicator active' : 'status-indicator';
}

// ==================== –ö–õ–ê–í–ò–ê–¢–£–†–ù–´–ï –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò ====================

document.addEventListener('keydown', function (event) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ input —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    if (event.target.tagName === 'INPUT') return;

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –∫–∞–º–µ—Ä—ã
    switch (event.key.toLowerCase()) {
        case 'p':
            event.preventDefault();
            takePhoto();
            break;
        case 'r':
            event.preventDefault();
            toggleRecording();
            break;
        case 'f':
            event.preventDefault();
            refreshFiles();
            break;
    }
});

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

document.addEventListener('DOMContentLoaded', function () {
    console.log('üé• –ú–æ–¥—É–ª—å –∫–∞–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω');


    const el = document.getElementById('camera-stream');
    if (!el) { console.error('–≠–ª–µ–º–µ–Ω—Ç camera-stream –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM'); return; }

    wireStreamEvents(el);              // <‚Äî –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö addEventListener –Ω–∞ —Å—Ç–∞—Ä—ã–π —É–∑–µ–ª
    setTimeout(() => initializeVideoStream(), 2000);
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
    setTimeout(() => {
        showAlert('–ö–∞–º–µ—Ä–∞: P - —Ñ–æ—Ç–æ, R - –∑–∞–ø–∏—Å—å, F - –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã', 'success');
    }, 5000);
});

// ==================== –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û ====================

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ Escape
document.addEventListener('keydown', function (event) {
    if (event.key === 'Escape') {
        const modal = document.getElementById('photo-modal');
        if (modal && modal.style.display === 'block') {
            event.preventDefault();
            event.stopPropagation(); // –Ω–µ –æ—Ç–¥–∞—ë–º –Ω–∞–≤–µ—Ä—Ö (–≤ script.js)
            closePhotoModal();
        }
    }
});

window.addEventListener('beforeunload', () => {
    const cam = document.getElementById('camera-stream');
    const ai = document.getElementById('ai-stream');
    if (cam) hardStopImgStream(cam);
    if (ai) hardStopImgStream(ai);
});

document.addEventListener('visibilitychange', function () {
    if (document.hidden) {
        // –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∫–ª–∞–¥–∫–∏ –ª—É—á—à–µ —Ä–∞–∑–æ—Ä–≤–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–Ω–Ω–µ–∫—Ç—ã
        const cam = document.getElementById('camera-stream');
        const ai = document.getElementById('ai-stream');
        if (cam) hardStopImgStream(cam);
        if (ai) hardStopImgStream(ai);
    }
});

console.log('üé• –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');