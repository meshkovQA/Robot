// camera.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π —Ä–æ–±–æ—Ç–∞

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã
let cameraConnected = false;
let isRecording = false;
let recordingStartTime = 0;
let recordingTimer = null;
let currentFileTab = 'photos';

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–∞–º–µ—Ä—ã
const cameraStream = document.getElementById('camera-stream');
const cameraStatus = document.getElementById('camera-status');
const recordingIndicator = document.getElementById('recording-indicator');
const recordingTime = document.getElementById('recording-time');
const recordBtn = document.getElementById('record-btn');

// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ú–ï–†–û–ô ====================

function takePhoto() {
    if (!cameraConnected) {
        showAlert('–ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞', 'danger');
        return;
    }

    const filename = `photo_${new Date().toISOString().replace(/[:.]/g, '-')}.jpg`;

    sendCommand('/api/camera/photo', 'POST', { filename: filename })
        .then(data => {
            if (data.success) {
                showAlert(`üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${data.data.filename}`, 'success');
                refreshFiles(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            } else {
                showAlert(`–û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ: ${data.error}`, 'danger');
            }
        })
        .catch(error => {
            showAlert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ', 'danger');
            console.error('Photo error:', error);
        });
}

function toggleRecording() {
    if (!cameraConnected) {
        showAlert('–ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞', 'danger');
        return;
    }

    if (isRecording) {
        stopRecording();
    } else {
        startRecording();
    }
}

function startRecording() {
    const filename = `video_${new Date().toISOString().replace(/[:.]/g, '-')}.mp4`;

    sendCommand('/api/camera/recording/start', 'POST', { filename: filename })
        .then(data => {
            if (data.success) {
                isRecording = true;
                recordingStartTime = Date.now();

                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                recordBtn.textContent = '‚èπÔ∏è –°—Ç–æ–ø';
                recordBtn.className = 'camera-btn btn-stop-record';
                recordingIndicator.style.display = 'block';

                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–ø–∏—Å–∏
                recordingTimer = setInterval(updateRecordingTime, 1000);

                showAlert(`üé• –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞: ${data.data.filename}`, 'success');
            } else {
                showAlert(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: ${data.error}`, 'danger');
            }
        })
        .catch(error => {
            showAlert('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏', 'danger');
            console.error('Recording start error:', error);
        });
}

function stopRecording() {
    sendCommand('/api/camera/recording/stop', 'POST')
        .then(data => {
            if (data.success) {
                isRecording = false;

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                if (recordingTimer) {
                    clearInterval(recordingTimer);
                    recordingTimer = null;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                recordBtn.textContent = 'üé• –ó–∞–ø–∏—Å—å';
                recordBtn.className = 'camera-btn btn-record';
                recordingIndicator.style.display = 'none';
                recordingTime.textContent = '00:00';

                showAlert(`‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${data.data.filename}`, 'success');
                refreshFiles(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            } else {
                showAlert(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: ${data.error}`, 'danger');
            }
        })
        .catch(error => {
            showAlert('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏', 'danger');
            console.error('Recording stop error:', error);
        });
}

function updateRecordingTime() {
    if (!isRecording) return;

    const elapsed = Math.floor((Date.now() - recordingStartTime) / 1000);
    const minutes = Math.floor(elapsed / 60).toString().padStart(2, '0');
    const seconds = (elapsed % 60).toString().padStart(2, '0');
    recordingTime.textContent = `${minutes}:${seconds}`;
}

function refreshCamera() {
    showAlert('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã...', 'warning');

    sendCommand('/api/camera/restart', 'POST')
        .then(data => {
            if (data.success) {
                showAlert('‚úÖ –ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞', 'success');

                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∏–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(() => {
                    const streamUrl = '/camera/stream?' + Date.now();
                    cameraStream.src = streamUrl;
                }, 2000);
            } else {
                showAlert(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: ${data.error}`, 'danger');
            }
        })
        .catch(error => {
            showAlert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã', 'danger');
            console.error('Camera restart error:', error);
        });
}

// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–ê–ú–ò ====================

function showFileTab(tabName) {
    currentFileTab = tabName;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
    document.getElementById('photos-list').style.display = tabName === 'photos' ? 'block' : 'none';
    document.getElementById('videos-list').style.display = tabName === 'videos' ? 'block' : 'none';

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    refreshFiles();
}

function refreshFiles() {
    if (currentFileTab === 'photos') {
        loadPhotosList();
    } else {
        loadVideosList();
    }
}

function loadPhotosList() {
    const photosList = document.getElementById('photos-list');
    photosList.innerHTML = '<div class="file-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';

    fetch('/api/files/photos')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                displayFileList(data.data.files, 'photos-list', 'photo');
            } else {
                photosList.innerHTML = `<div class="file-error">–û—à–∏–±–∫–∞: ${data.error}</div>`;
            }
        })
        .catch(error => {
            console.error('Photo list error:', error);
            photosList.innerHTML = '<div class="file-error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ</div>';
        });
}

function loadVideosList() {
    const videosList = document.getElementById('videos-list');
    videosList.innerHTML = '<div class="file-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';

    fetch('/api/files/videos')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                displayFileList(data.data.files, 'videos-list', 'video');
            } else {
                videosList.innerHTML = `<div class="file-error">–û—à–∏–±–∫–∞: ${data.error}</div>`;
            }
        })
        .catch(error => {
            console.error('Video list error:', error);
            videosList.innerHTML = '<div class="file-error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ</div>';
        });
}

function displayFileList(files, containerId, fileType) {
    const container = document.getElementById(containerId);

    if (files.length === 0) {
        container.innerHTML = `<div class="file-empty">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö ${fileType === 'photo' ? '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π' : '–≤–∏–¥–µ–æ'}</div>`;
        return;
    }

    let html = '';
    files.forEach(file => {
        const sizeStr = formatFileSize(file.size);
        const icon = fileType === 'photo' ? 'üì∏' : 'üé•';

        html += `
            <div class="file-item">
                <div class="file-info">
                    <div class="file-name">${icon} ${file.filename}</div>
                    <div class="file-details">${file.created_str} ‚Ä¢ ${sizeStr}</div>
                </div>
                <div class="file-actions">
                    ${fileType === 'photo' ?
                `<button class="file-action-btn" onclick="viewPhoto('${file.path}', '${file.filename}', '${file.created_str}', '${sizeStr}')">üëÅÔ∏è</button>`
                :
                `<button class="file-action-btn" onclick="downloadFile('${file.path}', '${file.filename}')">‚¨áÔ∏è</button>`
            }
                    <button class="file-action-btn btn-danger" onclick="deleteFile('${file.path}', '${file.filename}')">üóëÔ∏è</button>
                </div>
            </div>`;
    });

    container.innerHTML = html;
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 –ë';

    const k = 1024;
    const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
}

function viewPhoto(filepath, filename, created, size) {
    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä
    const photoUrl = `/static/photos/${filename}`;

    document.getElementById('modal-photo').src = photoUrl;
    document.getElementById('modal-photo-name').textContent = filename;
    document.getElementById('modal-photo-details').textContent = `–°–æ–∑–¥–∞–Ω–æ: ${created} ‚Ä¢ –†–∞–∑–º–µ—Ä: ${size}`;
    document.getElementById('photo-modal').style.display = 'block';
}

function closePhotoModal() {
    document.getElementById('photo-modal').style.display = 'none';
}

function downloadFile(filepath, filename) {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const link = document.createElement('a');
    link.href = `/static/videos/${filename}`;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    showAlert(`‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${filename}`, 'success');
}

function deleteFile(filepath, filename) {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "${filename}"?`)) {
        return;
    }

    sendCommand('/api/files/delete', 'POST', { filepath: filepath })
        .then(data => {
            if (data.success) {
                showAlert(`üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${filename}`, 'warning');
                refreshFiles(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            } else {
                showAlert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${data.error}`, 'danger');
            }
        })
        .catch(error => {
            showAlert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞', 'danger');
            console.error('Delete error:', error);
        });
}

function clearOldFiles() {
    const fileType = currentFileTab === 'photos' ? '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π' : '–≤–∏–¥–µ–æ';

    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ ${fileType}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
    const endpoint = currentFileTab === 'photos' ? '/api/files/photos' : '/api/files/videos';

    fetch(endpoint)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const files = data.data.files;
                const weekAgo = Date.now() / 1000 - (7 * 24 * 60 * 60); // 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
                const oldFiles = files.filter(file => file.created < weekAgo);

                if (oldFiles.length === 0) {
                    showAlert('–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π', 'warning');
                    return;
                }

                // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º
                let deleted = 0;
                oldFiles.forEach(file => {
                    sendCommand('/api/files/delete', 'POST', { filepath: file.path })
                        .then(deleteData => {
                            if (deleteData.success) {
                                deleted++;
                                if (deleted === oldFiles.length) {
                                    showAlert(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deleted} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤`, 'warning');
                                    refreshFiles();
                                }
                            }
                        });
                });
            } else {
                showAlert(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: ${data.error}`, 'danger');
            }
        })
        .catch(error => {
            showAlert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤', 'danger');
            console.error('Clear files error:', error);
        });
}

// ==================== –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ö–ê–ú–ï–†–´ ====================

function updateCameraStatus(cameraData) {
    if (!cameraData) {
        cameraConnected = false;
        updateCameraStatusIndicator(false);
        document.getElementById('camera-fps').textContent = '-- FPS';
        document.getElementById('camera-resolution').textContent = '--x--';
        document.getElementById('current-camera-fps').textContent = '--';
        return;
    }

    cameraConnected = cameraData.connected || false;
    updateCameraStatusIndicator(cameraConnected);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–µ—Ä–µ
    if (cameraData.fps !== undefined) {
        document.getElementById('camera-fps').textContent = `${cameraData.fps} FPS`;
        document.getElementById('current-camera-fps').textContent = cameraData.fps;
    }

    if (cameraData.config && cameraData.config.resolution) {
        document.getElementById('camera-resolution').textContent = cameraData.config.resolution;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    if (cameraData.recording !== isRecording) {
        isRecording = cameraData.recording;

        if (isRecording) {
            recordBtn.textContent = '‚èπÔ∏è –°—Ç–æ–ø';
            recordBtn.className = 'camera-btn btn-stop-record';
            recordingIndicator.style.display = 'block';

            if (!recordingTimer) {
                recordingStartTime = Date.now() - (cameraData.recording_duration * 1000);
                recordingTimer = setInterval(updateRecordingTime, 1000);
            }
        } else {
            recordBtn.textContent = 'üé• –ó–∞–ø–∏—Å—å';
            recordBtn.className = 'camera-btn btn-record';
            recordingIndicator.style.display = 'none';

            if (recordingTimer) {
                clearInterval(recordingTimer);
                recordingTimer = null;
            }
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–ø–∏—Å—å
    if (isRecording && cameraData.recording_duration !== undefined) {
        const duration = Math.floor(cameraData.recording_duration);
        const minutes = Math.floor(duration / 60).toString().padStart(2, '0');
        const seconds = (duration % 60).toString().padStart(2, '0');
        recordingTime.textContent = `${minutes}:${seconds}`;
    }
}

function updateCameraStatusIndicator(connected) {
    if (connected) {
        cameraStatus.className = 'status-indicator active';
    } else {
        cameraStatus.className = 'status-indicator';
    }
}

// ==================== –ö–õ–ê–í–ò–ê–¢–£–†–ù–´–ï –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò ====================

// –†–∞—Å—à–∏—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
document.addEventListener('keydown', function (event) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ input —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    if (event.target.tagName === 'INPUT') return;

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –∫–∞–º–µ—Ä—ã
    switch (event.key.toLowerCase()) {
        case 'p':
            event.preventDefault();
            takePhoto();
            break;
        case 'r':
            event.preventDefault();
            toggleRecording();
            break;
        case 'f':
            event.preventDefault();
            refreshFiles();
            break;
    }
});

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

document.addEventListener('DOMContentLoaded', function () {
    console.log('üé• –ú–æ–¥—É–ª—å –∫–∞–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ—Ç–æ–∫–∞ –∫–∞–º–µ—Ä—ã
    cameraStream.addEventListener('error', function () {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞');
        cameraConnected = false;
        updateCameraStatusIndicator(false);
    });

    cameraStream.addEventListener('load', function () {
        console.log('–í–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω');
        cameraConnected = true;
        updateCameraStatusIndicator(true);
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
    setTimeout(() => {
        refreshFiles();
    }, 1000);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º
    setTimeout(() => {
        showAlert('–ö–∞–º–µ—Ä–∞: P - —Ñ–æ—Ç–æ, R - –∑–∞–ø–∏—Å—å, F - –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã', 'success');
    }, 3000);
});

// ==================== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –û–°–ù–û–í–ù–´–ú –ú–û–î–£–õ–ï–ú ====================

// –†–∞—Å—à–∏—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateSensorData –∏–∑ script.js
const originalUpdateSensorData = window.updateSensorData;
if (originalUpdateSensorData) {
    window.updateSensorData = function () {
        originalUpdateSensorData();

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–º–µ—Ä—ã
        fetch('/api/camera/status')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateCameraStatus(data.data);
                }
            })
            .catch(error => {
                // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–µ—Ä—ã
                // —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            });
    };
}

// ==================== –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û ====================

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ Escape
document.addEventListener('keydown', function (event) {
    if (event.key === 'Escape') {
        closePhotoModal();
    }
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
document.getElementById('modal-photo').addEventListener('click', function (event) {
    event.stopPropagation();
});

// ==================== –£–¢–ò–õ–ò–¢–´ ====================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–º–µ—Ä—ã
function checkCameraAvailability() {
    return fetch('/api/camera/status')
        .then(response => response.json())
        .then(data => data.success && data.data.available)
        .catch(() => false);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä
function getAvailableCameras() {
    return fetch('/api/camera/devices')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                return data.data.available_cameras;
            }
            return [];
        })
        .catch(() => []);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∞ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
let streamReconnectAttempts = 0;
const maxReconnectAttempts = 5;

cameraStream.addEventListener('error', function () {
    if (streamReconnectAttempts < maxReconnectAttempts) {
        streamReconnectAttempts++;
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å—Ç—Ä–∏–º—É: ${streamReconnectAttempts}/${maxReconnectAttempts}`);

        setTimeout(() => {
            const streamUrl = '/camera/stream?' + Date.now();
            cameraStream.src = streamUrl;
        }, 2000 * streamReconnectAttempts); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    }
});

cameraStream.addEventListener('load', function () {
    streamReconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
});

console.log('üé• –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');