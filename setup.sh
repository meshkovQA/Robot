#!/bin/bash
# setup.sh ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–æ–±–æ—Ç–∞ —Å USB –∫–∞–º–µ—Ä–æ–π v2.1

set -euo pipefail

RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'; NC='\033[0m'
info(){ echo -e "${BLUE}[INFO]${NC} $*"; }
ok(){ echo -e "${GREEN}[OK]${NC} $*"; }
warn(){ echo -e "${YELLOW}[WARN]${NC} $*"; }
err(){ echo -e "${RED}[ERR]${NC} $*"; }

# --- –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
if [[ $EUID -eq 0 ]]; then err "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –æ—Ç root. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–¥ –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."; exit 1; fi
command -v sudo >/dev/null || { err "sudo –Ω–µ –Ω–∞–π–¥–µ–Ω"; exit 1; }

# --- –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π/—Ä–µ–ø–æ ---
USER_NAME="$USER"
HOME_DIR="$HOME"
PROJECT_DIR="$HOME_DIR/robot_web"
VENV_DIR="$PROJECT_DIR/venv"
LOG_DIR="$PROJECT_DIR/logs"
ENV_FILE="$PROJECT_DIR/.env"
SERVICE_NAME="robot-web.service"

# –í–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (raw):
GITHUB_RAW="https://raw.githubusercontent.com/meshkovQA/Robot/main"

# –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞–º–µ—Ä—ã
declare -A PROJECT_FILES=(
    # Python –º–æ–¥—É–ª–∏
    ["run.py"]="run.py"
    ["robot/__init__.py"]="robot/__init__.py"
    ["robot/config.py"]="robot/config.py"
    ["robot/i2c_bus.py"]="robot/i2c_bus.py"
    ["robot/controller.py"]="robot/controller.py"
    ["robot/camera.py"]="robot/camera.py"
    ["robot/api.py"]="robot/api.py"
    
    # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    ["templates/index.html"]="templates/index.html"
    ["static/style.css"]="static/style.css"
    ["static/script.js"]="static/script.js"
    ["static/camera.js"]="static/camera.js"
    
    # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    ["README.md"]="README.md"
)

echo "=============================================="
info "ü§ñüìπ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–æ–±–æ—Ç–∞ —Å USB –∫–∞–º–µ—Ä–æ–π v2.1"
info "üìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/meshkovQA/Robot"
info "üé• –ù–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ USB –∫–∞–º–µ—Ä—ã + –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å"
echo "=============================================="

# --- –≤–∫–ª—é—á–µ–Ω–∏–µ SSH ---
info "–í–∫–ª—é—á–µ–Ω–∏–µ SSH..."
sudo systemctl enable ssh
sudo systemctl start ssh
ok "SSH –≤–∫–ª—é—á–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"

# --- –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–∞–∫–µ—Ç—ã ---
info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ apt –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
sudo apt update
sudo apt install -y python3 python3-venv python3-pip python3-dev \
                    libffi-dev build-essential git curl i2c-tools \
                    net-tools htop \
                    v4l-utils uvcdynctrl guvcview \
                    libopencv-dev python3-opencv \
                    ffmpeg libavcodec-dev libavformat-dev libswscale-dev \
                    libjpeg-dev libpng-dev libtiff-dev

ok "–ë–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# --- –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ USB –∫–∞–º–µ—Ä ---
info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö USB –∫–∞–º–µ—Ä..."

# –ò—â–µ–º USB –∫–∞–º–µ—Ä—ã
USB_CAMERAS=$(lsusb | grep -i -E "(camera|webcam|uvc)" | wc -l || true)
V4L_DEVICES=$(ls /dev/video* 2>/dev/null | wc -l || echo "0")

if [[ $V4L_DEVICES -gt 0 ]]; then
    ok "–ù–∞–π–¥–µ–Ω–æ USB –∫–∞–º–µ—Ä: $V4L_DEVICES"
    info "–°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤:"
    ls -la /dev/video* 2>/dev/null || true
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–µ—Ä–∞—Ö
    for device in /dev/video*; do
        if [[ -c "$device" ]]; then
            info "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: $device"
            v4l2-ctl --device="$device" --info 2>/dev/null | head -5 || true
        fi
    done
else
    warn "USB –∫–∞–º–µ—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
    warn "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ USB –∫–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    warn "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É, –Ω–æ –∫–∞–º–µ—Ä–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
fi

# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
sudo usermod -a -G video "$USER_NAME" || true
ok "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É video"

# --- –≤–∫–ª—é—á–µ–Ω–∏–µ I2C ---
info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ I2C..."
if ! grep -q "^dtparam=i2c_arm=on" /boot/config.txt 2>/dev/null; then
    echo "dtparam=i2c_arm=on" | sudo tee -a /boot/config.txt >/dev/null
    ok "I2C –≤–∫–ª—é—á—ë–Ω –≤ /boot/config.txt"
fi

if ! grep -q "^i2c-dev" /etc/modules 2>/dev/null; then
    echo "i2c-dev" | sudo tee -a /etc/modules >/dev/null
    ok "–ú–æ–¥—É–ª—å i2c-dev –¥–æ–±–∞–≤–ª–µ–Ω –≤ /etc/modules"
fi

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—ã
sudo usermod -a -G i2c,gpio,spi,video "$USER_NAME" || true

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –≥—Ä—É–ø–ø–µ video
if ! groups "$USER_NAME" | grep -q video; then
    warn "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ video. –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ..."
    sudo usermod -a -G video "$USER_NAME"
    warn "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ"
fi

# --- —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ ---
info "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ $PROJECT_DIR ..."
mkdir -p "$PROJECT_DIR"/{robot,templates,static,logs,photos,videos}

# –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤–µ–±-–¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º
ln -sf "$PROJECT_DIR/photos" "$PROJECT_DIR/static/photos" 2>/dev/null || true
ln -sf "$PROJECT_DIR/videos" "$PROJECT_DIR/static/videos" 2>/dev/null || true

# --- –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ---
if [[ ! -d "$VENV_DIR" ]]; then
    info "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    python3 -m venv "$VENV_DIR"
    ok "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
fi

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º venv
source "$VENV_DIR/bin/activate"

# --- —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pip install --upgrade pip setuptools wheel

# –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
pip install flask>=2.3.0 gunicorn>=20.1.0 

# I2C –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ (–º–æ–∂–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö)
pip install smbus2 || warn "smbus2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏"

# OpenCV –¥–ª—è Python (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ apt)
pip install opencv-python>=4.5.0 || warn "opencv-python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ pip"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
pip install requests python-dotenv numpy

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenCV
python3 -c "import cv2; print(f'‚úÖ OpenCV {cv2.__version__} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')" || warn "OpenCV –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# --- —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞ ---
if [[ ! -f "$ENV_FILE" ]]; then
    info "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env ..."
    cat > "$ENV_FILE" <<'EOF'
# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Robot Web v2.1 —Å –∫–∞–º–µ—Ä–æ–π ===

# API Key –¥–ª—è –∑–∞—â–∏—Ç—ã (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
API_KEY=

# I2C –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
I2C_BUS=1
ARDUINO_ADDRESS=0x08

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ (—Å–º)
SENSOR_FWD_STOP_CM=15
SENSOR_BWD_STOP_CM=10
SENSOR_MAX_VALID=500

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ (0-255)
DEFAULT_SPEED=70
SPEED_MIN=0
SPEED_MAX=255

# === –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–ú–ï–†–´ ===

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
CAMERA_DEVICE_ID=0
CAMERA_WIDTH=640
CAMERA_HEIGHT=480
CAMERA_FPS=30

# –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-100)
CAMERA_QUALITY=80
CAMERA_STREAM_QUALITY=60
CAMERA_STREAM_FPS=15

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (0-100)
CAMERA_BRIGHTNESS=50
CAMERA_CONTRAST=50
CAMERA_SATURATION=50

# –ü—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
CAMERA_SAVE_PATH=$HOME_DIR/robot_web/photos
CAMERA_VIDEO_PATH=$HOME_DIR/robot_web/videos

# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
CAMERA_AUTO_START=true

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (low/medium/high/ultra)
CAMERA_PRESET=medium

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
MAX_PHOTOS=100
MAX_VIDEOS=20
MAX_PHOTO_SIZE=10485760
MAX_VIDEO_SIZE=104857600

# –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ (–¥–Ω–∏)
AUTO_CLEANUP_DAYS=7

# === –†–ê–°–®–ò–†–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

# –î–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
ENABLE_MOTION_DETECTION=false
MOTION_THRESHOLD=30

# –ê–≤—Ç–æ–∑–∞–ø–∏—Å—å
AUTO_RECORD_ON_MOTION=false
AUTO_RECORD_DURATION=30

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–æ–±–æ—Ç–æ–º
RECORD_ON_ROBOT_MOVE=false
PHOTO_ON_OBSTACLE=false
SAVE_FRAME_ON_EMERGENCY=true

# –ù–∞–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –≤–∏–¥–µ–æ
ENABLE_VIDEO_OVERLAY=true
OVERLAY_TIMESTAMP=true
OVERLAY_ROBOT_STATUS=false

# === –°–ò–°–¢–ï–ú–ê ===

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=INFO
CAMERA_LOG_LEVEL=INFO
ENABLE_CAMERA_DEBUG=false

# –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
VIDEO_BUFFER_SIZE=1
CAMERA_THREADS=2
CAMERA_INIT_TIMEOUT=10
CAMERA_CAPTURE_TIMEOUT=5

# Flask –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
FLASK_ENV=production
FLASK_DEBUG=False
EOF
    ok "–°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∫–∞–º–µ—Ä—ã"
else
    warn ".env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ"
fi

# --- —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ ---
download_file() {
    local remote_path="$1"
    local local_path="$2"
    local url="$GITHUB_RAW/$remote_path"
    
    info "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ $remote_path -> $local_path"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    mkdir -p "$(dirname "$PROJECT_DIR/$local_path")"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    if curl -fsSL "$url" -o "$PROJECT_DIR/$local_path"; then
        ok "‚úì $local_path"
    else
        err "‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å $remote_path"
        return 1
    fi
}

# --- –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ ---
info "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ GitHub..."

failed_downloads=()
for remote_path in "${!PROJECT_FILES[@]}"; do
    local_path="${PROJECT_FILES[$remote_path]}"
    if ! download_file "$remote_path" "$local_path"; then
        failed_downloads+=("$remote_path")
    fi
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
critical_files=("run.py" "robot/api.py" "robot/controller.py" "robot/camera.py" "robot/config.py")
missing_critical=()

for file in "${critical_files[@]}"; do
    if [[ ! -f "$PROJECT_DIR/$file" ]]; then
        missing_critical+=("$file")
    fi
done

if [[ ${#missing_critical[@]} -gt 0 ]]; then
    err "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${missing_critical[*]}"
    err "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å—Å—è"
    exit 1
fi

# --- —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞–º–µ—Ä—ã ---
info "–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–∞–º–µ—Ä—ã..."
cat > "$PROJECT_DIR/static/no-camera.png" <<'EOF'
# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
<svg width="640" height="480" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="#f8f9fa"/>
  <text x="50%" y="40%" text-anchor="middle" font-family="Arial" font-size="24" fill="#6c757d">üìπ</text>
  <text x="50%" y="55%" text-anchor="middle" font-family="Arial" font-size="16" fill="#6c757d">–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</text>
  <text x="50%" y="70%" text-anchor="middle" font-family="Arial" font-size="12" fill="#adb5bd">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ USB –∫–∞–º–µ—Ä—ã</text>
</svg>
EOF

# --- —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ---
info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
chmod -R u+rwX "$PROJECT_DIR"
find "$PROJECT_DIR" -type f -name "*.py" -exec chmod +x {} \; 2>/dev/null || true

# –ü—Ä–∞–≤–∞ –¥–ª—è –ø–∞–ø–æ–∫ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
chmod 755 "$PROJECT_DIR"/{photos,videos}
chown -R "$USER_NAME:$USER_NAME" "$PROJECT_DIR"/{photos,videos} 2>/dev/null || true

# --- –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python ---
info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤..."
cd "$PROJECT_DIR"

if python3 -m py_compile run.py robot/*.py; then
    ok "–°–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
else
    err "–û—à–∏–±–∫–∏ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ Python —Ñ–∞–π–ª–æ–≤"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –∫–∞–º–µ—Ä—ã
if python3 -c "from robot.camera import USBCamera; print('‚úÖ –ú–æ–¥—É–ª—å –∫–∞–º–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')"; then
    ok "–ú–æ–¥—É–ª—å –∫–∞–º–µ—Ä—ã —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    warn "–ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥—É–ª–µ–º –∫–∞–º–µ—Ä—ã - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
fi

# --- —Å–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ ---
info "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞..."
SERVICE_FILE="/etc/systemd/system/$SERVICE_NAME"

sudo tee "$SERVICE_FILE" >/dev/null <<EOF
[Unit]
Description=Robot Web Interface v2.1 (Flask + Gunicorn + Camera)
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
User=$USER_NAME
Group=$USER_NAME
WorkingDirectory=$PROJECT_DIR
Environment="PYTHONUNBUFFERED=1"
Environment="PYTHONPATH=$PROJECT_DIR"
EnvironmentFile=$ENV_FILE

# Gunicorn —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –∫–∞–º–µ—Ä—ã
ExecStart=$VENV_DIR/bin/gunicorn \
    --workers 2 \
    --threads 4 \
    --timeout 60 \
    --keep-alive 10 \
    --max-requests 500 \
    --max-requests-jitter 50 \
    --bind 0.0.0.0:5000 \
    --access-logfile $LOG_DIR/access.log \
    --error-logfile $LOG_DIR/error.log \
    --log-level info \
    --worker-class sync \
    run:app

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–±–æ—è—Ö
Restart=always
RestartSec=10
StartLimitInterval=60
StartLimitBurst=3

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
StandardOutput=journal
StandardError=journal
SyslogIdentifier=robot-web

# –î–æ—Å—Ç—É–ø –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
SupplementaryGroups=i2c gpio spi video

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–æ—Å–ª–∞–±–ª–µ–Ω—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ)
NoNewPrivileges=true
PrivateTmp=true

[Install]
WantedBy=multi-user.target
EOF

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd –∏ –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
sudo systemctl daemon-reload
sudo systemctl enable "$SERVICE_NAME"
ok "Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –∏ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"

# --- —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ ---
info "–°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤..."

# –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã
cat > "$PROJECT_DIR/test_camera.sh" <<'EOF'
#!/bin/bash
echo "üé• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ USB –∫–∞–º–µ—Ä—ã..."

echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:"
ls -la /dev/video* 2>/dev/null || echo "–í–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

echo ""
echo "üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–µ—Ä–∞—Ö:"
for device in /dev/video*; do
    if [[ -c "$device" ]]; then
        echo "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: $device"
        v4l2-ctl --device="$device" --info 2>/dev/null | head -5 || echo "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è $device"
        echo "---"
    fi
done

echo ""
echo "üêç –¢–µ—Å—Ç Python OpenCV:"
python3 -c "
import cv2
import sys

print(f'OpenCV –≤–µ—Ä—Å–∏—è: {cv2.__version__}')

# –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É
cap = cv2.VideoCapture(0)
if cap.isOpened():
    ret, frame = cap.read()
    if ret:
        print('‚úÖ –ö–∞–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω –∫–∞–¥—Ä:', frame.shape)
    else:
        print('‚ùå –ö–∞–º–µ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –∫–∞–¥—Ä')
    cap.release()
else:
    print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É')
"

echo ""
echo "ü§ñ –¢–µ—Å—Ç –º–æ–¥—É–ª—è —Ä–æ–±–æ—Ç–∞:"
cd /home/pi/robot_web
python3 -c "
from robot.camera import list_available_cameras, create_camera
try:
    cameras = list_available_cameras()
    print(f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–º–µ—Ä—ã: {cameras}')
    if cameras:
        print('‚úÖ –ú–æ–¥—É–ª—å –∫–∞–º–µ—Ä—ã —Ä–æ–±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç')
    else:
        print('‚ö†Ô∏è –ö–∞–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –º–æ–¥—É–ª—å –Ω–µ –º–æ–∂–µ—Ç –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è –∫–∞–º–µ—Ä—ã: {e}')
"
EOF

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã (start.sh, stop.sh, restart.sh) —Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ —Ä–∞–Ω—å—à–µ...
cat > "$PROJECT_DIR/start.sh" <<EOF
#!/bin/bash
echo "üöÄ –ó–∞–ø—É—Å–∫ Robot Web Interface v2.1..."
sudo systemctl start $SERVICE_NAME
sleep 2
sudo systemctl status $SERVICE_NAME --no-pager -l
EOF

cat > "$PROJECT_DIR/stop.sh" <<EOF
#!/bin/bash
echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Robot Web Interface..."
sudo systemctl stop $SERVICE_NAME
echo "–°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
EOF

cat > "$PROJECT_DIR/restart.sh" <<EOF
#!/bin/bash
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Robot Web Interface v2.1..."
sudo systemctl restart $SERVICE_NAME
sleep 3
sudo systemctl status $SERVICE_NAME --no-pager -l
echo ""
IP=\$(hostname -I | awk '{print \$1}')
echo "üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω: http://\$IP:5000"
echo "üé• –í–∏–¥–µ–æ–ø–æ—Ç–æ–∫: http://\$IP:5000/camera/stream"
EOF

cat > "$PROJECT_DIR/logs.sh" <<EOF
#!/bin/bash
echo "üìÑ –õ–æ–≥–∏ Robot Web Interface (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
echo "================================================"
sudo journalctl -u $SERVICE_NAME -f --no-pager
EOF

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å –∫–∞–º–µ—Ä–æ–π
cat > "$PROJECT_DIR/status.sh" <<'EOF'
#!/bin/bash
SERVICE=robot-web.service
echo "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Robot Web Interface v2.1"
echo "========================================"

echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:"
sudo systemctl status "$SERVICE" --no-pager -l

echo -e "\nüåê –°–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
sudo netstat -tlnp 2>/dev/null | grep :5000 || echo "–ü–æ—Ä—Ç 5000 –Ω–µ –∑–∞–Ω—è—Ç"

echo -e "\nüîå I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:"
if command -v i2cdetect &>/dev/null; then 
    sudo i2cdetect -y 1 2>/dev/null || echo "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è I2C —à–∏–Ω—ã"
else 
    echo "i2c-tools –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
fi

echo -e "\nüé• USB –∫–∞–º–µ—Ä—ã:"
ls -la /dev/video* 2>/dev/null || echo "–í–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

echo -e "\nüìπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–µ—Ä–∞—Ö:"
for device in /dev/video*; do
    if [[ -c "$device" ]]; then
        echo "‚îú‚îÄ $device:"
        v4l2-ctl --device="$device" --info 2>/dev/null | head -3 | sed 's/^/‚îÇ  /' || echo "‚îÇ  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è"
    fi
done

echo -e "\nüíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
if pgrep -f "robot.*gunicorn" >/dev/null; then
    ps aux | grep -E "(robot|gunicorn)" | grep -v grep
else
    echo "–ü—Ä–æ—Ü–µ—Å—Å—ã Robot Web –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

echo -e "\nüìÅ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞:"
ls -la /home/*/robot_web/ 2>/dev/null | head -10

echo -e "\nüì∏ –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã:"
PHOTOS_COUNT=$(find $HOME_DIR/robot_web/photos -name "*.jpg" 2>/dev/null | wc -l || echo "0")
VIDEOS_COUNT=$(find $HOME_DIR/robot_web/videos -name "*.mp4" 2>/dev/null | wc -l || echo "0")
echo "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: $PHOTOS_COUNT"
echo "–í–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤: $VIDEOS_COUNT"

echo -e "\nüêç Python –º–æ–¥—É–ª–∏:"
python3 -c "
try:
    import cv2
    print(f'‚úÖ OpenCV {cv2.__version__}')
except:
    print('‚ùå OpenCV –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')

try:
    import smbus2
    print('‚úÖ smbus2 (I2C)')
except:
    print('‚ùå smbus2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')

try:
    from robot.camera import USBCamera
    print('‚úÖ robot.camera')
except Exception as e:
    print(f'‚ùå robot.camera: {e}')
"

echo -e "\nüìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
sudo journalctl -u "$SERVICE" --no-pager -n 10

echo -e "\nüå°Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
echo "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: $(uptime -p)"
echo "–ù–∞–≥—Ä—É–∑–∫–∞: $(uptime | awk -F'load average:' '{print $2}')"
echo "–ü–∞–º—è—Ç—å: $(free -h | awk '/^Mem:/ {print $3 "/" $2}')"
echo "–î–∏—Å–∫: $(df -h / | awk 'NR==2 {print $3 "/" $2 " (" $5 ")"}')"

IP=$(hostname -I | awk '{print $1}')
echo -e "\nüîó –ê–¥—Ä–µ—Å–∞:"
echo "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://$IP:5000"
echo "–í–∏–¥–µ–æ–ø–æ—Ç–æ–∫: http://$IP:5000/camera/stream"
echo "API —Å—Ç–∞—Ç—É—Å: http://$IP:5000/api/status"
echo "API –∫–∞–º–µ—Ä–∞: http://$IP:5000/api/camera/status"
EOF

# –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
cat > "$PROJECT_DIR/update.sh" <<'EOF'
#!/bin/bash
set -euo pipefail

BLUE='\033[0;34m'; GREEN='\033[0;32m'; RED='\033[0;31m'; YELLOW='\033[1;33m'; NC='\033[0m'
echo -e "${BLUE}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Robot Web Interface v2.1${NC}"

PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
GITHUB_RAW="https://raw.githubusercontent.com/meshkovQA/Robot/main"

# –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –∫–∞–º–µ—Ä—É)
declare -A FILES=(
    ["run.py"]="run.py"
    ["robot/__init__.py"]="robot/__init__.py"
    ["robot/config.py"]="robot/config.py"
    ["robot/i2c_bus.py"]="robot/i2c_bus.py"
    ["robot/controller.py"]="robot/controller.py"
    ["robot/camera.py"]="robot/camera.py"
    ["robot/api.py"]="robot/api.py"
    ["templates/index.html"]="templates/index.html"
    ["static/style.css"]="static/style.css"
    ["static/script.js"]="static/script.js"
    ["static/camera.js"]="static/camera.js"
    ["README.md"]="README.md"
)

backup_and_download() {
    local remote="$1"
    local local="$2"
    local url="$GITHUB_RAW/$remote"
    local full_path="$PROJECT_DIR/$local"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    mkdir -p "$(dirname "$full_path")"
    
    # –ë—ç–∫–∞–ø —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
    if [[ -f "$full_path" ]]; then
        cp "$full_path" "$full_path.backup.$(date +%Y%m%d_%H%M%S)"
    fi
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    if curl -fsSL "$url" -o "$full_path"; then
        echo -e "‚úÖ $local"
        return 0
    else
        echo -e "${RED}‚ùå $local${NC}"
        return 1
    fi
}

echo -e "${YELLOW}‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...${NC}"
sudo systemctl stop robot-web.service || true

echo -e "${BLUE}üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...${NC}"
failed_files=()

for remote in "${!FILES[@]}"; do
    local="${FILES[$remote]}"
    if ! backup_and_download "$remote" "$local"; then
        failed_files+=("$local")
    fi
done

if [[ ${#failed_files[@]} -gt 0 ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: ${failed_files[*]}${NC}"
fi

echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...${NC}"
cd "$PROJECT_DIR"
if python3 -m py_compile run.py robot/*.py; then
    echo -e "${GREEN}‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω${NC}"
else
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∏ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ!${NC}"
    exit 1
fi

echo -e "${BLUE}üé• –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è –∫–∞–º–µ—Ä—ã...${NC}"
if python3 -c "from robot.camera import USBCamera; print('–ö–∞–º–µ—Ä–∞ OK')"; then
    echo -e "${GREEN}‚úÖ –ú–æ–¥—É–ª—å –∫–∞–º–µ—Ä—ã —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥—É–ª–µ–º –∫–∞–º–µ—Ä—ã${NC}"
fi

echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...${NC}"
sudo systemctl start robot-web.service

sleep 3

if systemctl is-active --quiet robot-web.service; then
    echo -e "${GREEN}‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!${NC}"
    IP=$(hostname -I | awk '{print $1}')
    echo -e "${GREEN}üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://$IP:5000${NC}"
    echo -e "${GREEN}üé• –í–∏–¥–µ–æ–ø–æ—Ç–æ–∫: http://$IP:5000/camera/stream${NC}"
else
    echo -e "${RED}‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è${NC}"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: ./logs.sh"
    exit 1
fi
EOF

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
chmod +x "$PROJECT_DIR"/{start.sh,stop.sh,restart.sh,logs.sh,status.sh,update.sh,test_camera.sh}
ok "–£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã"

# --- —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã ---
info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã..."
cd "$PROJECT_DIR"
bash test_camera.sh

# --- –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –º–æ–¥—É–ª–∏
cd "$PROJECT_DIR"
if python3 -c "from robot.api import create_app; from robot.camera import USBCamera; print('‚úì –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ')"; then
    ok "Python –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    warn "–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å Python –º–æ–¥—É–ª—è–º–∏, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å"
fi

info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
cd "$PROJECT_DIR"
if timeout 10 python3 run.py --help >/dev/null 2>&1; then
    ok "run.py –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    warn "–ü—Ä–æ–±–ª–µ–º—ã —Å run.py"
fi

# –¢–µ—Å—Ç gunicorn
if timeout 5 "$VENV_DIR/bin/gunicorn" --check-config run:app; then
    ok "Gunicorn –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
else
    err "–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Gunicorn"
fi

# --- –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ---
info "–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞..."
sudo systemctl start "$SERVICE_NAME"
sleep 5

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
if systemctl is-active --quiet "$SERVICE_NAME"; then
    ok "–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    
    # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å
    IP=$(hostname -I | awk '{print $1}')
    
    echo ""
    echo "=============================================="
    ok "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    echo "=============================================="
    echo ""
    echo "üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:"
    echo "   http://$IP:5000"
    echo ""
    echo "üé• –ü—Ä—è–º–æ–π –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫:"
    echo "   http://$IP:5000/camera/stream"
    echo ""
    echo "üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º:"
    echo "   ./start.sh       - –∑–∞–ø—É—Å–∫"
    echo "   ./stop.sh        - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"  
    echo "   ./restart.sh     - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
    echo "   ./logs.sh        - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo "   ./status.sh      - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
    echo "   ./update.sh      - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    echo "   ./test_camera.sh - —Ç–µ—Å—Ç –∫–∞–º–µ—Ä—ã"
    echo ""
    echo "üìÇ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_DIR"
    echo "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $ENV_FILE"
    echo "üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: $PROJECT_DIR/photos"
    echo "üé¨ –í–∏–¥–µ–æ: $PROJECT_DIR/videos"
    echo ""
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–µ—Ä–µ
    if [[ $V4L_DEVICES -gt 0 ]]; then
        echo "üìπ –ö–∞–º–µ—Ä–∞:"
        echo "   –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $V4L_DEVICES"
        echo "   –û—Å–Ω–æ–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: /dev/video0"
        echo "   –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: P - —Ñ–æ—Ç–æ, R - –∑–∞–ø–∏—Å—å"
    else
        echo "‚ö†Ô∏è –ö–∞–º–µ—Ä–∞:"
        echo "   USB –∫–∞–º–µ—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
        echo "   –ü–æ–¥–∫–ª—é—á–∏—Ç–µ USB –∫–∞–º–µ—Ä—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å"
    fi
    
    echo ""
    
    if [[ ${#failed_downloads[@]} -gt 0 ]]; then
        warn "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${failed_downloads[*]}"
        warn "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ./update.sh –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"
    fi
    
    echo "üîß –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
    echo "   sudo reboot"
    echo ""
    echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –ø—Ä–∏–º–µ—Ä—ã:"
    echo "   https://github.com/meshkovQA/Robot"
    
else
    err "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    echo ""
    echo "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:"
    echo "   ./status.sh      - –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
    echo "   ./test_camera.sh - —Ç–µ—Å—Ç –∫–∞–º–µ—Ä—ã"
    echo "   ./logs.sh        - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—à–∏–±–æ–∫"
    echo ""
    echo "üìÑ –õ–æ–≥–∏ –æ—à–∏–±–æ–∫:"
    sudo journalctl -u "$SERVICE_NAME" --no-pager -n 20
    exit 1
fi