#!/bin/bash
# setup.sh ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–æ–±–æ—Ç–∞ —Å USB –∫–∞–º–µ—Ä–æ–π v2.1 (–±–µ–∑ .env —Ñ–∞–π–ª–∞)

set -euo pipefail

RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'; NC='\033[0m'
info(){ echo -e "${BLUE}[INFO]${NC} $*"; }
ok(){ echo -e "${GREEN}[OK]${NC} $*"; }
warn(){ echo -e "${YELLOW}[WARN]${NC} $*"; }
err(){ echo -e "${RED}[ERR]${NC} $*"; }

# --- –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
if [[ $EUID -eq 0 ]]; then err "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –æ—Ç root. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–¥ –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."; exit 1; fi
command -v sudo >/dev/null || { err "sudo –Ω–µ –Ω–∞–π–¥–µ–Ω"; exit 1; }

# --- –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π/—Ä–µ–ø–æ ---
USER_NAME="$USER"
HOME_DIR="$HOME"
PROJECT_DIR="$HOME_DIR/robot_web"
VENV_DIR="$PROJECT_DIR/venv"
LOG_DIR="$PROJECT_DIR/logs"
SERVICE_NAME="robot-web.service"

# –í–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (raw):
GITHUB_RAW="https://raw.githubusercontent.com/meshkovQA/Robot/main"

# –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞–º–µ—Ä—ã
declare -A PROJECT_FILES=(
    # Python –º–æ–¥—É–ª–∏
    ["run.py"]="run.py"
    ["robot/__init__.py"]="robot/__init__.py"
    ["robot/config.py"]="robot/config.py"
    ["robot/i2c_bus.py"]="robot/i2c_bus.py"
    ["robot/controller.py"]="robot/controller.py"
    ["robot/camera.py"]="robot/camera.py"
    ["robot/api.py"]="robot/api.py"
    
    # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    ["templates/index.html"]="templates/index.html"
    ["static/style.css"]="static/style.css"
    ["static/script.js"]="static/script.js"
    ["static/camera.js"]="static/camera.js"
    
    # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    ["README.md"]="README.md"
)

echo "=============================================="
info "ü§ñüìπ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–æ–±–æ—Ç–∞ —Å USB –∫–∞–º–µ—Ä–æ–π v2.1"
info "üìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/meshkovQA/Robot"
info "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ robot/config.py (–±–µ–∑ .env)"
echo "=============================================="

# --- –≤–∫–ª—é—á–µ–Ω–∏–µ SSH ---
info "–í–∫–ª—é—á–µ–Ω–∏–µ SSH..."
sudo systemctl enable ssh
sudo systemctl start ssh
ok "SSH –≤–∫–ª—é—á–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"

# --- –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–∞–∫–µ—Ç—ã ---
info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ apt –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
sudo apt update
sudo apt install -y python3 python3-venv python3-pip python3-dev \
                    libffi-dev build-essential git curl i2c-tools \
                    net-tools htop \
                    v4l-utils uvcdynctrl guvcview \
                    libopencv-dev python3-opencv \
                    ffmpeg libavcodec-dev libavformat-dev libswscale-dev \
                    libjpeg-dev libpng-dev libtiff-dev

ok "–ë–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# --- –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ USB –∫–∞–º–µ—Ä ---
info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö USB –∫–∞–º–µ—Ä..."

# –ò—â–µ–º USB –∫–∞–º–µ—Ä—ã
USB_CAMERAS=$(lsusb | grep -i -E "(camera|webcam|uvc)" | wc -l || true)
V4L_DEVICES=$(ls /dev/video* 2>/dev/null | wc -l || echo "0")

if [[ $V4L_DEVICES -gt 0 ]]; then
    ok "–ù–∞–π–¥–µ–Ω–æ USB –∫–∞–º–µ—Ä: $V4L_DEVICES"
    info "–°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤:"
    ls -la /dev/video* 2>/dev/null || true
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–µ—Ä–∞—Ö
    for device in /dev/video*; do
        if [[ -c "$device" ]]; then
            info "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: $device"
            v4l2-ctl --device="$device" --info 2>/dev/null | head -5 || true
        fi
    done
else
    warn "USB –∫–∞–º–µ—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
    warn "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ USB –∫–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    warn "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É, –Ω–æ –∫–∞–º–µ—Ä–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
fi

# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
sudo usermod -a -G video "$USER_NAME" || true
ok "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É video"

# --- –≤–∫–ª—é—á–µ–Ω–∏–µ I2C ---
info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ I2C..."
if ! grep -q "^dtparam=i2c_arm=on" /boot/config.txt 2>/dev/null; then
    echo "dtparam=i2c_arm=on" | sudo tee -a /boot/config.txt >/dev/null
    ok "I2C –≤–∫–ª—é—á—ë–Ω –≤ /boot/config.txt"
fi

if ! grep -q "^i2c-dev" /etc/modules 2>/dev/null; then
    echo "i2c-dev" | sudo tee -a /etc/modules >/dev/null
    ok "–ú–æ–¥—É–ª—å i2c-dev –¥–æ–±–∞–≤–ª–µ–Ω –≤ /etc/modules"
fi

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—ã
sudo usermod -a -G i2c,gpio,spi,video "$USER_NAME" || true

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –≥—Ä—É–ø–ø–µ video
if ! groups "$USER_NAME" | grep -q video; then
    warn "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ video. –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ..."
    sudo usermod -a -G video "$USER_NAME"
    warn "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ"
fi

# --- —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ ---
info "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ $PROJECT_DIR ..."
mkdir -p "$PROJECT_DIR"/{robot,templates,static,logs,photos,videos}
mkdir -p "$PROJECT_DIR/static"/{photos,videos}

# --- –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ---
if [[ ! -d "$VENV_DIR" ]]; then
    info "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    python3 -m venv "$VENV_DIR"
    ok "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
fi

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º venv
source "$VENV_DIR/bin/activate"

# --- —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pip install --upgrade pip setuptools wheel

# –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
pip install flask>=2.3.0 gunicorn>=20.1.0 requests python-dotenv numpy smbus2 opencv-python flask-cors || true

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenCV
python3 -c "import cv2; print(f'‚úÖ OpenCV {cv2.__version__} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')" || warn "OpenCV –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# --- —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ ---
download_file() {
    local remote_path="$1"
    local local_path="$2"
    local url="$GITHUB_RAW/$remote_path"
    
    info "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ $remote_path -> $local_path"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    mkdir -p "$(dirname "$PROJECT_DIR/$local_path")"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    if curl -fsSL "$url" -o "$PROJECT_DIR/$local_path"; then
        ok "‚úì $local_path"
    else
        err "‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å $remote_path"
        return 1
    fi
}

# --- –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ ---
info "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ GitHub..."

failed_downloads=()
for remote_path in "${!PROJECT_FILES[@]}"; do
    local_path="${PROJECT_FILES[$remote_path]}"
    if ! download_file "$remote_path" "$local_path"; then
        failed_downloads+=("$remote_path")
    fi
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
critical_files=("run.py" "robot/api.py" "robot/controller.py" "robot/camera.py" "robot/config.py")
missing_critical=()

for file in "${critical_files[@]}"; do
    if [[ ! -f "$PROJECT_DIR/$file" ]]; then
        missing_critical+=("$file")
    fi
done

if [[ ${#missing_critical[@]} -gt 0 ]]; then
    err "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${missing_critical[*]}"
    err "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å—Å—è"
    exit 1
fi

# --- —Å–æ–∑–¥–∞–Ω–∏–µ SVG –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–∞–º–µ—Ä—ã ---
info "–°–æ–∑–¥–∞–Ω–∏–µ SVG –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–∞–º–µ—Ä—ã..."
cat > "$PROJECT_DIR/static/no-camera.svg" <<'EOF'
<svg width="640" height="480" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="#f8f9fa"/>
  <circle cx="320" cy="200" r="40" fill="#6c757d"/>
  <rect x="280" y="160" width="80" height="80" rx="15" fill="none" stroke="#6c757d" stroke-width="3"/>
  <text x="50%" y="60%" text-anchor="middle" font-family="Arial, sans-serif" font-size="18" fill="#6c757d">–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</text>
  <text x="50%" y="70%" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" fill="#adb5bd">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ USB –∫–∞–º–µ—Ä—ã</text>
  <text x="50%" y="80%" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" fill="#adb5bd">–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"</text>
</svg>
EOF

# --- —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∫–∞–º–µ—Ä—ã ---
info "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞..."
cat > "$PROJECT_DIR/test_frame.py" <<'EOF'
#!/usr/bin/env python3
"""–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã"""

import requests
import base64
import time
from pathlib import Path

def test_camera_frame():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ —á–µ—Ä–µ–∑ API"""
    
    base_url = "http://localhost:5000"
    
    print("üé• –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã")
    print("=" * 40)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–º–µ—Ä—ã
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–µ—Ä—ã...")
    try:
        response = requests.get(f"{base_url}/api/camera/status", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"   –°—Ç–∞—Ç—É—Å API: ‚úÖ {response.status_code}")
            
            if data.get('success'):
                camera_data = data.get('data', {})
                print(f"   –ö–∞–º–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: {'‚úÖ' if camera_data.get('available') else '‚ùå'}")
                print(f"   –ö–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: {'‚úÖ' if camera_data.get('connected') else '‚ùå'}")
                print(f"   FPS: {camera_data.get('fps', 0)}")
                print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {camera_data.get('config', {}).get('resolution', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                
                if camera_data.get('error'):
                    print(f"   –û—à–∏–±–∫–∞: {camera_data['error']}")
            else:
                print(f"   ‚ùå API –æ—à–∏–±–∫–∞: {data.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä
    print("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞...")
    try:
        response = requests.get(f"{base_url}/api/camera/frame", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"   –°—Ç–∞—Ç—É—Å API: ‚úÖ {response.status_code}")
            
            if data.get('success'):
                frame_data = data.get('data', {})
                frame_b64 = frame_data.get('frame')
                
                if frame_b64:
                    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–∞–¥—Ä (base64), —Ä–∞–∑–º–µ—Ä: {len(frame_b64)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä –∫–∞–∫ JPEG
                    try:
                        jpeg_data = base64.b64decode(frame_b64)
                        output_path = Path("test_frame.jpg")
                        output_path.write_bytes(jpeg_data)
                        print(f"   ‚úÖ –ö–∞–¥—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path} ({len(jpeg_data)} –±–∞–π—Ç)")
                        return True
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                        return False
                else:
                    print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞–¥—Ä–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                    return False
            else:
                print(f"   ‚ùå API –æ—à–∏–±–∫–∞: {data.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                return False
        else:
            print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã —Ä–æ–±–æ—Ç–∞")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: ./start.sh")
    print()
    
    time.sleep(1)
    success = test_camera_frame()
    
    print("\n" + "=" * 40)
    if success:
        print("üéâ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        print("–û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:5000")
    else:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä: ./start.sh")
        print("2. –õ–æ–≥–∏: ./logs.sh")
        print("3. –ö–∞–º–µ—Ä—É: ./test_camera.sh")
EOF

chmod +x "$PROJECT_DIR/test_frame.py"

# --- —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
info "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
cat > "$PROJECT_DIR/config_local.py" <<'EOF'
# config_local.py - –õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–±–æ—Ç–∞
# –≠—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ config.py –∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è

# ==================== –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ====================

# I2C –∞–¥—Ä–µ—Å Arduino (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0x08)
# ARDUINO_ADDRESS = 0x08

# –ü–æ—Ä–æ–≥–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö)
# SENSOR_FWD_STOP_CM = 15  # –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –≤–ø–µ—Ä–µ–¥
# SENSOR_BWD_STOP_CM = 10  # –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –Ω–∞–∑–∞–¥

# –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (0-255)
# DEFAULT_SPEED = 70

# ==================== –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–ú–ï–†–´ ====================

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä—ã
# CAMERA_DEVICE_ID = 0     # /dev/video0
# CAMERA_WIDTH = 640
# CAMERA_HEIGHT = 480
# CAMERA_FPS = 15

# –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (1-100)
# CAMERA_QUALITY = 70           # –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
# CAMERA_STREAM_QUALITY = 50    # –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: "low", "medium", "high", "ultra"
# CAMERA_PRESET = "low"

# ==================== –ü–û–í–û–†–û–¢–´ –ö–ê–ú–ï–†–´ ====================

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–≥–ª–æ–≤ –ø–æ–≤–æ—Ä–æ—Ç–∞ (0-180 –≥—Ä–∞–¥—É—Å–æ–≤)
# CAMERA_PAN_MIN = 0
# CAMERA_PAN_MAX = 180
# CAMERA_PAN_DEFAULT = 90

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–≥–ª–æ–≤ –Ω–∞–∫–ª–æ–Ω–∞ (50-150 –≥—Ä–∞–¥—É—Å–æ–≤)
# CAMERA_TILT_MIN = 50
# CAMERA_TILT_MAX = 150
# CAMERA_TILT_DEFAULT = 90

# –®–∞–≥ –ø–æ–≤–æ—Ä–æ—Ç–∞ (–≥—Ä–∞–¥—É—Å—ã –∑–∞ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É)
# CAMERA_STEP_SIZE = 10

# ==================== –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ ====================

# API –∫–ª—é—á –¥–ª—è –∑–∞—â–∏—Ç—ã (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è)
# API_KEY = ""

# ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: "DEBUG", "INFO", "WARNING", "ERROR"
# LOG_LEVEL = "INFO"

# –û—Ç–ª–∞–¥–∫–∞ –∫–∞–º–µ—Ä—ã
# ENABLE_CAMERA_DEBUG = False

# ==================== –†–ê–°–®–ò–†–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (True/False)
# RECORD_ON_ROBOT_MOVE = False      # –∑–∞–ø–∏—Å—å –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
# PHOTO_ON_OBSTACLE = False         # —Ñ–æ—Ç–æ –ø—Ä–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–∏
# SAVE_FRAME_ON_EMERGENCY = True   # –∫–∞–¥—Ä –ø—Ä–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ

# –î–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
# ENABLE_MOTION_DETECTION = False
# AUTO_RECORD_ON_MOTION = False

# –ù–∞–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –≤–∏–¥–µ–æ
# ENABLE_VIDEO_OVERLAY = False
# OVERLAY_TIMESTAMP = False

# ==================== –ò–ù–°–¢–†–£–ö–¶–ò–ò ====================

"""
–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:
1. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É (—É–±–µ—Ä–∏—Ç–µ # –≤ –Ω–∞—á–∞–ª–µ)
2. –ò–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: ./restart.sh

–ü—Ä–∏–º–µ—Ä—ã:

# –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –Ω–∞ HD
CAMERA_WIDTH = 1280
CAMERA_HEIGHT = 720
CAMERA_PRESET = "high"

# –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
SENSOR_FWD_STOP_CM = 20
SENSOR_BWD_STOP_CM = 15

# –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É
LOG_LEVEL = "DEBUG"
ENABLE_CAMERA_DEBUG = True

# –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —É–≥–ª—ã –∫–∞–º–µ—Ä—ã
CAMERA_PAN_MIN = 30
CAMERA_PAN_MAX = 150
CAMERA_TILT_MIN = 60
CAMERA_TILT_MAX = 120
"""
EOF

# --- —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ---
info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
chmod -R u+rwX "$PROJECT_DIR"
find "$PROJECT_DIR" -type f -name "*.py" -exec chmod +x {} \; 2>/dev/null || true

# –ü—Ä–∞–≤–∞ –¥–ª—è –ø–∞–ø–æ–∫ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
chmod 755 "$PROJECT_DIR/static"/{photos,videos}
chown -R "$USER_NAME:$USER_NAME" "$PROJECT_DIR/static"/{photos,videos} 2>/dev/null || true

# --- –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python ---
info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤..."
cd "$PROJECT_DIR"

if python3 -m py_compile run.py robot/*.py; then
    ok "–°–∏–Ω—Ç–∞–∫—Å–∏—Å Python —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
else
    err "–û—à–∏–±–∫–∏ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ Python —Ñ–∞–π–ª–æ–≤"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –∫–∞–º–µ—Ä—ã
if python3 -c "from robot.camera import USBCamera; print('‚úÖ –ú–æ–¥—É–ª—å –∫–∞–º–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')"; then
    ok "–ú–æ–¥—É–ª—å –∫–∞–º–µ—Ä—ã —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    warn "–ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥—É–ª–µ–º –∫–∞–º–µ—Ä—ã - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
fi

# --- —Å–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ ---
info "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞..."
SERVICE_FILE="/etc/systemd/system/$SERVICE_NAME"

sudo tee "$SERVICE_FILE" >/dev/null <<EOF
[Unit]
Description=Robot Web Interface v2.1 (Flask + Gunicorn + Camera)
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
User=$USER_NAME
Group=$USER_NAME
WorkingDirectory=$PROJECT_DIR
Environment="PYTHONUNBUFFERED=1"
Environment="PYTHONPATH=$PROJECT_DIR"

# Gunicorn: –æ–¥–∏–Ω –≤–æ—Ä–∫–µ—Ä, –ø–æ—Ç–æ–∫–æ–≤—ã–π –∫–ª–∞—Å—Å
ExecStart=$VENV_DIR/bin/gunicorn \
    --workers 1 \
    --worker-class gthread \
    --threads 4 \
    --timeout 120 \
    --keep-alive 5 \
    --max-requests 500 \
    --max-requests-jitter 50 \
    --bind 0.0.0.0:5000 \
    --access-logfile $LOG_DIR/access.log \
    --error-logfile $LOG_DIR/error.log \
    --log-level info \
    run:app

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–±–æ—è—Ö
Restart=always
RestartSec=10
StartLimitInterval=60
StartLimitBurst=3

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
StandardOutput=journal
StandardError=journal
SyslogIdentifier=robot-web

# –î–æ—Å—Ç—É–ø –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
SupplementaryGroups=i2c gpio spi video

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
NoNewPrivileges=true
PrivateTmp=true

[Install]
WantedBy=multi-user.target
EOF

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd –∏ –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
sudo systemctl daemon-reload
sudo systemctl enable "$SERVICE_NAME"
ok "Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –∏ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"

# --- —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ ---
info "–°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤..."

# –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã
cat > "$PROJECT_DIR/test_camera.sh" <<'EOF'
#!/bin/bash
echo "üé• –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ USB –∫–∞–º–µ—Ä—ã..."

echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:"
ls -la /dev/video* 2>/dev/null || echo "–í–∏–¥–µ–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

echo ""
echo "üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–µ—Ä–∞—Ö:"
for device in /dev/video*; do
    if [[ -c "$device" ]]; then
        echo "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: $device"
        v4l2-ctl --device="$device" --info 2>/dev/null | head -5 || echo "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è $device"
        echo "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:"
        v4l2-ctl --device="$device" --list-formats-ext 2>/dev/null | head -10 || echo "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤"
        echo "---"
    fi
done

echo ""
echo "üë• –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:"
echo "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $USER"
echo "–ì—Ä—É–ø–ø—ã: $(groups $USER)"
echo "–ü—Ä–∞–≤–∞ –Ω–∞ /dev/video0:"
ls -la /dev/video0 2>/dev/null || echo "/dev/video0 –Ω–µ –Ω–∞–π–¥–µ–Ω"

echo ""
echo "üêç –¢–µ—Å—Ç Python OpenCV:"
python3 -c "
import cv2
import sys
import time

print(f'OpenCV –≤–µ—Ä—Å–∏—è: {cv2.__version__}')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–º–µ—Ä—ã
available_cameras = []
for i in range(5):
    cap = cv2.VideoCapture(i, cv2.CAP_V4L2)
    if cap.isOpened():
        ret, _ = cap.read()
        if ret:
            available_cameras.append(i)
        cap.release()

print(f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–º–µ—Ä—ã: {available_cameras}')

if available_cameras:
    device_id = available_cameras[0]
    print(f'–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É /dev/video{device_id}...')
    
    cap = cv2.VideoCapture(device_id, cv2.CAP_V4L2)
    if cap.isOpened():
        print(f'‚úÖ –ö–∞–º–µ—Ä–∞ /dev/video{device_id} –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
        cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        cap.set(cv2.CAP_PROP_FPS, 15)
        
        # –ß–∏—Ç–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤
        success_count = 0
        for i in range(5):
            ret, frame = cap.read()
            if ret and frame is not None:
                success_count += 1
            time.sleep(0.2)
        
        if success_count > 2:
            print(f'‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {success_count}/5 –∫–∞–¥—Ä–æ–≤ - –∫–∞–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!')
            print(f'–†–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞: {frame.shape if \"frame\" in locals() else \"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\"}')
        else:
            print(f'‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ {success_count}/5 –∫–∞–¥—Ä–æ–≤ - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã')
        
        cap.release()
    else:
        print(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É /dev/video{device_id}')
else:
    print('‚ùå –ö–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
"

echo ""
echo "ü§ñ –¢–µ—Å—Ç –º–æ–¥—É–ª—è —Ä–æ–±–æ—Ç–∞:"
cd "$(dirname "${BASH_SOURCE[0]}")" 2>/dev/null || cd "$HOME/robot_web"

if [[ -f "robot/camera.py" ]]; then
    python3 -c "
import sys
sys.path.insert(0, '.')

try:
    from robot.camera import list_available_cameras, USBCamera, OPENCV_AVAILABLE
    print(f'OpenCV –¥–æ—Å—Ç—É–ø–µ–Ω: {OPENCV_AVAILABLE}')
    
    if OPENCV_AVAILABLE:
        cameras = list_available_cameras()
        print(f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–º–µ—Ä—ã —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å: {cameras}')
        
        if cameras:
            print('‚úÖ –ú–æ–¥—É–ª—å –∫–∞–º–µ—Ä—ã –Ω–∞—Ö–æ–¥–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
        else:
            print('‚ö†Ô∏è –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞—à–µ–ª –∫–∞–º–µ—Ä')
    else:
        print('‚ùå OpenCV –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –º–æ–¥—É–ª–µ')
        
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è –∫–∞–º–µ—Ä—ã: {e}')
"
else
    echo "‚ùå –§–∞–π–ª robot/camera.py –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

echo ""
echo "üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
echo "1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ USB –∫–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
echo "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞: groups \$USER (–¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å video)"
echo "3. –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤: sudo usermod -a -G video \$USER && sudo reboot"
echo "4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Å—Ç API: python3 test_frame.py"
echo "5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: ./logs.sh | grep camera"
EOF

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã...
cat > "$PROJECT_DIR/start.sh" <<EOF
#!/bin/bash
echo "üöÄ –ó–∞–ø—É—Å–∫ Robot Web Interface v2.1..."
sudo systemctl start $SERVICE_NAME
sleep 2
sudo systemctl status $SERVICE_NAME --no-pager -l
EOF

cat > "$PROJECT_DIR/stop.sh" <<EOF
#!/bin/bash
echo "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Robot Web Interface..."
sudo systemctl stop $SERVICE_NAME
echo "–°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
EOF

cat > "$PROJECT_DIR/restart.sh" <<EOF
#!/bin/bash
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Robot Web Interface v2.1..."
sudo systemctl restart $SERVICE_NAME
sleep 3
sudo systemctl status $SERVICE_NAME --no-pager -l
echo ""
IP=\$(hostname -I | awk '{print \$1}')
echo "üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω: http://\$IP:5000"
echo "üé• –í–∏–¥–µ–æ–ø–æ—Ç–æ–∫: http://\$IP:5000/camera/stream"
echo "üß™ –¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã: python3 test_frame.py"
EOF

cat > "$PROJECT_DIR/logs.sh" <<EOF
#!/bin/bash
echo "üìÑ –õ–æ–≥–∏ Robot Web Interface (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
echo "================================================"
sudo journalctl -u $SERVICE_NAME -f --no-pager
EOF

cat > "$PROJECT_DIR/config.sh" <<'EOF'
#!/bin/bash
# config.sh - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Ä–æ–±–æ—Ç–∞

PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$PROJECT_DIR/robot/config.py"

echo "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Robot Web Interface"
echo "==============================================="

case "${1:-help}" in
    "edit")
        echo "üìù –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ nano..."
        nano "$CONFIG_FILE"
        echo ""
        echo "–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ./restart.sh"
        ;;
    
    "show")
        echo "üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        echo "--------------------"
        python3 -c "
import sys
sys.path.insert(0, '$PROJECT_DIR')

try:
    from robot import config
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print(f'I2C_BUS: {config.I2C_BUS}')
    print(f'ARDUINO_ADDRESS: 0x{config.ARDUINO_ADDRESS:02X}')
    print(f'SENSOR_FWD_STOP_CM: {config.SENSOR_FWD_STOP_CM}')
    print(f'SENSOR_BWD_STOP_CM: {config.SENSOR_BWD_STOP_CM}')
    print(f'DEFAULT_SPEED: {config.DEFAULT_SPEED}')
    print()
    print('–ö–∞–º–µ—Ä–∞:')
    print(f'  CAMERA_DEVICE_ID: {config.CAMERA_DEVICE_ID}')
    print(f'  CAMERA_WIDTH: {config.CAMERA_WIDTH}')
    print(f'  CAMERA_HEIGHT: {config.CAMERA_HEIGHT}')
    print(f'  CAMERA_FPS: {config.CAMERA_FPS}')
    print(f'  CAMERA_QUALITY: {config.CAMERA_QUALITY}')
    print()
    print('–ü–æ–≤–æ—Ä–æ—Ç—ã –∫–∞–º–µ—Ä—ã:')
    print(f'  PAN: {config.CAMERA_PAN_MIN}-{config.CAMERA_PAN_MAX} (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {config.CAMERA_PAN_DEFAULT})')
    print(f'  TILT: {config.CAMERA_TILT_MIN}-{config.CAMERA_TILT_MAX} (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {config.CAMERA_TILT_DEFAULT})')
    print(f'  STEP_SIZE: {config.CAMERA_STEP_SIZE}')
    print()
    print(f'LOG_LEVEL: {config.LOG_LEVEL}')
    print(f'API_KEY: {\"—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\" if config.API_KEY else \"–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\"}')
    
except Exception as e:
    print(f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}')
"
        ;;
    
    "test")
        echo "üß™ –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
        echo "--------------------"
        python3 -c "
import sys
sys.path.insert(0, '$PROJECT_DIR')

try:
    from robot.config import *
    from robot.camera import list_available_cameras
    
    print(f'‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞')
    print(f'‚úÖ I2C –¥–æ—Å—Ç—É–ø–µ–Ω: {I2C_AVAILABLE}')
    print(f'‚úÖ OpenCV –¥–æ—Å—Ç—É–ø–µ–Ω: {CAMERA_AVAILABLE}')
    
    if CAMERA_AVAILABLE:
        cameras = list_available_cameras()
        print(f'‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä: {len(cameras)} {cameras}')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    errors = validate_camera_config()
    if errors:
        print('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:')
        for error in errors:
            print(f'   - {error}')
    else:
        print('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã –≤–∞–ª–∏–¥–Ω–∞')
        
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
"
        ;;
    
    "backup")
        BACKUP_FILE="$PROJECT_DIR/config_backup_$(date +%Y%m%d_%H%M%S).py"
        cp "$CONFIG_FILE" "$BACKUP_FILE" 2>/dev/null && echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $BACKUP_FILE" || echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞"
        ;;
    
    "help"|*)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./config.sh [–∫–æ–º–∞–Ω–¥–∞]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  edit    - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å robot/config.py –≤ nano"
        echo "  show    - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        echo "  test    - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        echo "  backup  - —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        echo "  help    - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo ""
        echo "–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫: $CONFIG_FILE"
        echo "–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ./restart.sh"
        echo ""
        echo "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º: cat SETTINGS.md"
        ;;
esac
EOF